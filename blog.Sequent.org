:PROPERTIES:
:ID:       a8bc74ff-eca5-4848-8ce9-f1c56170d4d4
:CREATED:  2024-06-27T16:30:54
:END:
#+title: Γ ⊢ formal logic and type systems
#+LATEX_HEADER: \usepackage{ebproof}
#+LANGUAGE: english
#+PROPERTY: header-args:latex :exports results

#+begin_quote
Note: This post is quite long, it is not finished and I might end up splitting
it into multiple parts in the end. A lot of thing I want are already there, but
some, like normalization proofs and human-usable variable references are
missing.

--- Justin
#+end_quote


If like me, you are interested in programming language theory, you have probably
encountered the following notation and were at first confused by it:

#+begin_src latex :file assets/sequent.svg
\begin{prooftree}
\hypo{\Gamma \vdash a : A}
\hypo{\Gamma \vdash b : B}
\infer2[\times-intro]{\Gamma \vdash \langle a, b \rangle : A \times B}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/sequent.svg]]

This notation was invented to serve as a meta language in which to talk about
new formal systems. Here, we use it to define a language's \( \times \)-intro rule,
which tells us that:

#+begin_quote
If in a context with variables \( \Gamma \), the term \( a \) has type \( A \) and
the term \( b \) has type \( B \), then in the same context, the term \( \langle a, b
\rangle \) has type \( A \times B \).
#+end_quote

Operationalizing this deduction rule into a type checker would give you
something like

#+begin_src haskell
typeCheck :: Ctx -> Term -> Type -> Bool
typeCheck Γ ⟨ a , b ⟩ (tA × tB) = typeCheck Γ a tA &&
                                  typeCheck Γ b tB
#+end_src

Usually, proving a result about our object is done by chaining together the
correct deduction rules until we get the result we want on the bottom line. For
instance, it is possible to use the \( \times \)-intro rule multiple time to create a
nested tuple like this:

#+begin_src latex :file assets/many-sequent.svg
\begin{prooftree}
\hypo{\Gamma \vdash x : X}
\hypo{\Gamma \vdash y : Y}
\infer2[\times-intro]{\Gamma \vdash \langle x, y \rangle : X \times Y}
\hypo{\Gamma \vdash z : Z}
\infer2[\times-intro]{\Gamma \vdash \langle \langle x, y \rangle, z \rangle : (X \times Y) \times Z}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/many-sequent.svg]]

In this post, I will show you how to describe your own object logic system using
Agda as a metalanguage to write formally verified proofs about it.

* About Agda

Agda is a dependently typed purely functional programming language. Those
properties mean it looks and feels a lot like Haskell, but the dependent type
system means you can also use it as a proof assistant to formalise some
mathematics.

Agda has [[https://agda.readthedocs.io/en/v2.7.0.1/language/index.html][A lot]] of very interesting features, but one of them I will use a lot
today is its "mixfix syntax". Agda doesn't have the concept of operators.
Identifiers can contain every character that isn't a space or a parenthesis.
This means that you must put spaces everywhere, but this system lets the user
define operators that take any form. For instance, if you give a function the
name of ~_+_~, then ~_+_ x y~ is the same as ~x + y~. If you give a function the name
~if_then_else_~, then ~if_then_else_ something yes no~ is the same as ~if something
then yes else no~. I will use this feature so that the syntax of judgments is
similar to what you would read in the literature (the \( \Gamma \vdash P \) syntax).

* COMMENT Dependencies

Here are a few definitions we will use in the rest of this post. Remember that
at any time, if you don't remember what something in the code is, you can click
on it to jump to its definition.

#+BEGIN_EXPORT html
<pre class="Agda">
<a id="3693" class="Keyword">module</a> <a id="3700" href="blog.Sequent.html" class="Module">blog.Sequent</a> <a id="3713" class="Keyword">where</a>
<a id="3719" class="Keyword">module</a> <a id="PropositionalLogic"></a><a id="3726" href="blog.Sequent.html#3726" class="Module">PropositionalLogic</a> <a id="3745" class="Keyword">where</a>
</pre>
#+END_EXPORT

* Propositional logic

We know that the language of propositions contains (at least) two propositions
\( \top \) and \( \bot \), two connectives \( \vee \) and \( \wedge \) and the negation
\( \neg \).

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="3985" class="Keyword">data</a> <a id="PropositionalLogic.Prop"></a><a id="3990" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="3995" class="Symbol">:</a> <a id="3997" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="4001" class="Keyword">where</a>
    <a id="PropositionalLogic.Prop.⊤"></a><a id="4011" href="blog.Sequent.html#4011" class="InductiveConstructor">⊤</a> <a id="4013" class="Symbol">:</a> <a id="4015" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
    <a id="PropositionalLogic.Prop.⊥"></a><a id="4024" href="blog.Sequent.html#4024" class="InductiveConstructor">⊥</a> <a id="4026" class="Symbol">:</a> <a id="4028" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
    <a id="PropositionalLogic.Prop._∧_"></a><a id="4037" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">_∧_</a> <a id="4041" class="Symbol">:</a> <a id="4043" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4048" class="Symbol">-&gt;</a> <a id="4051" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4056" class="Symbol">-&gt;</a> <a id="4059" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
    <a id="PropositionalLogic.Prop._∨_"></a><a id="4068" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">_∨_</a> <a id="4072" class="Symbol">:</a> <a id="4074" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4079" class="Symbol">-&gt;</a> <a id="4082" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4087" class="Symbol">-&gt;</a> <a id="4090" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
    <a id="PropositionalLogic.Prop.¬_"></a><a id="4099" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬_</a> <a id="4102" class="Symbol">:</a> <a id="4104" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4109" class="Symbol">-&gt;</a> <a id="4112" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
  
  <a id="4122" class="Keyword">infixl</a> <a id="4129" class="Number">6</a> <a id="4131" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">_∧_</a>
  <a id="4137" class="Keyword">infixl</a> <a id="4144" class="Number">5</a> <a id="4146" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">_∨_</a>
  <a id="4152" class="Keyword">infix</a> <a id="4158" class="Number">7</a> <a id="4160" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬_</a>
</pre>
#+END_EXPORT

With this definition, we can give concrete examples of propositions

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="PropositionalLogic.some-prop"></a><a id="4263" href="blog.Sequent.html#4263" class="Function">some-prop</a> <a id="4273" class="Symbol">:</a> <a id="4275" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
  <a id="4282" href="blog.Sequent.html#4263" class="Function">some-prop</a> <a id="4292" class="Symbol">=</a> <a id="4294" href="blog.Sequent.html#4011" class="InductiveConstructor">⊤</a> <a id="4296" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">∧</a> <a id="4298" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬</a> <a id="4300" href="blog.Sequent.html#4024" class="InductiveConstructor">⊥</a>
</pre>
#+END_EXPORT


Now that we have defined the language of propositions, we need to define the language of contexts

** Contexts

In logic, it is very important to be able to talk about "hypotheses" that one
can use to prove some proposition. It is common to represent the set of
hypotheses as a "context" which is pretty much just a list of all the
propositions we assume to be true.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="4702" class="Keyword">data</a> <a id="PropositionalLogic.Ctx"></a><a id="4707" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="4711" class="Symbol">:</a> <a id="4713" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="4717" class="Keyword">where</a>
    <a id="4727" class="Comment">-- The empty context</a>
    <a id="PropositionalLogic.Ctx.·"></a><a id="4752" href="blog.Sequent.html#4752" class="InductiveConstructor">·</a> <a id="4754" class="Symbol">:</a> <a id="4756" href="blog.Sequent.html#4707" class="Datatype">Ctx</a>
    <a id="4764" class="Comment">-- A context with at least one hypothesis</a>
    <a id="PropositionalLogic.Ctx._,_"></a><a id="4810" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">_,_</a> <a id="4814" class="Symbol">:</a> <a id="4816" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="4820" class="Symbol">-&gt;</a> <a id="4823" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="4828" class="Symbol">-&gt;</a> <a id="4831" href="blog.Sequent.html#4707" class="Datatype">Ctx</a>
  
  <a id="4840" class="Keyword">infixl</a> <a id="4847" class="Number">4</a> <a id="4849" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">_,_</a>
</pre>
#+END_EXPORT

We will also need some way to represent the fact that our context contains some
hypothesis.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="4977" class="Keyword">infix</a> <a id="4983" class="Number">3</a> <a id="4985" href="blog.Sequent.html#4999" class="Datatype Operator">_∋_</a>
  
  <a id="4994" class="Keyword">data</a> <a id="PropositionalLogic._∋_"></a><a id="4999" href="blog.Sequent.html#4999" class="Datatype Operator">_∋_</a> <a id="5003" class="Symbol">:</a> <a id="5005" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="5009" class="Symbol">-&gt;</a> <a id="5012" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="5017" class="Symbol">-&gt;</a> <a id="5020" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="5024" class="Keyword">where</a>
    <a id="5034" class="Comment">-- it&#39;s the rightmost hypothesis</a>
    <a id="PropositionalLogic._∋_.here"></a><a id="5071" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a> <a id="5076" class="Symbol">:</a> <a id="5078" class="Symbol">∀{</a><a id="5080" href="blog.Sequent.html#5080" class="Bound">Γ</a> <a id="5082" href="blog.Sequent.html#5082" class="Bound">P</a><a id="5083" class="Symbol">}</a> <a id="5085" class="Symbol">-&gt;</a> <a id="5088" href="blog.Sequent.html#5080" class="Bound">Γ</a> <a id="5090" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="5092" href="blog.Sequent.html#5082" class="Bound">P</a> <a id="5094" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="5096" href="blog.Sequent.html#5082" class="Bound">P</a>
    <a id="5102" class="Comment">-- it&#39;s further left</a>
    <a id="PropositionalLogic._∋_.there"></a><a id="5127" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="5133" class="Symbol">:</a> <a id="5135" class="Symbol">∀{</a><a id="5137" href="blog.Sequent.html#5137" class="Bound">Γ</a> <a id="5139" href="blog.Sequent.html#5139" class="Bound">P</a> <a id="5141" href="blog.Sequent.html#5141" class="Bound">Q</a><a id="5142" class="Symbol">}</a> <a id="5144" class="Symbol">-&gt;</a> <a id="5147" href="blog.Sequent.html#5137" class="Bound">Γ</a> <a id="5149" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="5151" href="blog.Sequent.html#5139" class="Bound">P</a> <a id="5153" class="Symbol">-&gt;</a> <a id="5156" href="blog.Sequent.html#5137" class="Bound">Γ</a> <a id="5158" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="5160" href="blog.Sequent.html#5141" class="Bound">Q</a> <a id="5162" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="5164" href="blog.Sequent.html#5139" class="Bound">P</a>
  
  <a id="5171" href="blog.Sequent.html#5171" class="Function">_</a> <a id="5173" class="Symbol">:</a> <a id="5175" class="Symbol">∀{</a><a id="5177" href="blog.Sequent.html#5177" class="Bound">P</a> <a id="5179" href="blog.Sequent.html#5179" class="Bound">Q</a> <a id="5181" href="blog.Sequent.html#5181" class="Bound">R</a><a id="5182" class="Symbol">}</a> <a id="5184" class="Symbol">-&gt;</a> <a id="5187" href="blog.Sequent.html#4752" class="InductiveConstructor">·</a> <a id="5189" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="5191" href="blog.Sequent.html#5177" class="Bound">P</a> <a id="5193" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="5195" href="blog.Sequent.html#5179" class="Bound">Q</a> <a id="5197" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="5199" href="blog.Sequent.html#5181" class="Bound">R</a> <a id="5201" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="5203" href="blog.Sequent.html#5177" class="Bound">P</a>
  <a id="5207" class="Symbol">_</a> <a id="5209" class="Symbol">=</a> <a id="5211" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="5217" class="Symbol">(</a><a id="5218" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="5224" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="5228" class="Symbol">)</a>
</pre>
#+END_EXPORT

** Judgments

Finally, we have everything necessary to define the derivation rules of classical
logic.

Usually, rules can be put into either of two categories: structural rules, or
logical rules. Logical rules are the ones which describe how certain constructs
interact, whereas structural rules describe how the context can be manipulated.
In the case of classical logic, we will have only one such structural rule, ~hypo~
(which let us use a hypothesis), which will be sufficient for all of our
context-manipulation needs. Logics which have more restrictions in the way in
which the context is manipulated are usually called [[https://en.wikipedia.org/wiki/Substructural_logic][substructural logics]] and
they instead use weaker, but more numerous structural rules.

Each construct in a logical system is usually associated with three logical
rules:

1. A *formation* rule which asserts the existence of your construct.
2. An *introduction* rule which gives you a way to create a proof of the
   construct.
3. An *elimination* rule which lets you use the proof.

Since we have defined all of our constructs in the ~Prop~ type, we won't be
writing down formation rules, but introduction and elimination rules will still
be there. Note that eliminators usually follow a certain pattern: the subject
(the thing to eliminate) is the first argument and the different branches (think
of \( \vee \)) follow.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="6666" class="Keyword">infix</a> <a id="6672" class="Number">3</a> <a id="6674" href="blog.Sequent.html#6688" class="Datatype Operator">_⊢_</a>
  
  <a id="6683" class="Keyword">data</a> <a id="PropositionalLogic._⊢_"></a><a id="6688" href="blog.Sequent.html#6688" class="Datatype Operator">_⊢_</a> <a id="6692" class="Symbol">:</a> <a id="6694" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="6698" class="Symbol">-&gt;</a> <a id="6701" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="6706" class="Symbol">-&gt;</a> <a id="6709" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="6713" class="Keyword">where</a>
    <a id="PropositionalLogic._⊢_.hypo"></a><a id="6723" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="6728" class="Symbol">:</a> <a id="6730" class="Symbol">∀{</a><a id="6732" href="blog.Sequent.html#6732" class="Bound">Γ</a> <a id="6734" href="blog.Sequent.html#6734" class="Bound">P</a><a id="6735" class="Symbol">}</a> <a id="6737" class="Symbol">-&gt;</a> <a id="6740" href="blog.Sequent.html#6732" class="Bound">Γ</a> <a id="6742" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="6744" href="blog.Sequent.html#6734" class="Bound">P</a> <a id="6746" class="Symbol">-&gt;</a> <a id="6749" href="blog.Sequent.html#6732" class="Bound">Γ</a> <a id="6751" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="6753" href="blog.Sequent.html#6734" class="Bound">P</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/hypo.svg
\begin{equation*}
  \begin{prooftree}
    \hypo{\Gamma \ni P}
    \infer1[hypo]{\Gamma \vdash P}
  \end{prooftree}
\end{equation*}
#+end_src

#+RESULTS:
[[file:assets/hypo.svg]]

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="7007" class="Comment">-- ⊤ is true in every context</a>
    <a id="PropositionalLogic._⊢_.⊤-intro"></a><a id="7041" href="blog.Sequent.html#7041" class="InductiveConstructor">⊤-intro</a> <a id="7049" class="Symbol">:</a> <a id="7051" class="Symbol">∀{</a><a id="7053" href="blog.Sequent.html#7053" class="Bound">Γ</a><a id="7054" class="Symbol">}</a> <a id="7056" class="Symbol">-&gt;</a> <a id="7059" href="blog.Sequent.html#7053" class="Bound">Γ</a> <a id="7061" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7063" href="blog.Sequent.html#4011" class="InductiveConstructor">⊤</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/top-intro.svg
\begin{equation*}
  \begin{prooftree}
\infer0[\top-intro]{\Gamma \vdash \top}
  \end{prooftree}
\end{equation*}
#+end_src

#+RESULTS:
[[file:assets/top-intro.svg]]

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="PropositionalLogic._⊢_.⊤-elim"></a><a id="7308" href="blog.Sequent.html#7308" class="InductiveConstructor">⊤-elim</a> <a id="7315" class="Symbol">:</a> <a id="7317" class="Symbol">∀{</a><a id="7319" href="blog.Sequent.html#7319" class="Bound">Γ</a> <a id="7321" href="blog.Sequent.html#7321" class="Bound">P</a><a id="7322" class="Symbol">}</a> <a id="7324" class="Symbol">-&gt;</a> <a id="7327" href="blog.Sequent.html#7319" class="Bound">Γ</a> <a id="7329" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7331" href="blog.Sequent.html#4011" class="InductiveConstructor">⊤</a> <a id="7333" class="Symbol">-&gt;</a> <a id="7336" href="blog.Sequent.html#7319" class="Bound">Γ</a> <a id="7338" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="7340" href="blog.Sequent.html#4011" class="InductiveConstructor">⊤</a> <a id="7342" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7344" href="blog.Sequent.html#7321" class="Bound">P</a> <a id="7346" class="Symbol">-&gt;</a> <a id="7349" href="blog.Sequent.html#7319" class="Bound">Γ</a> <a id="7351" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7353" href="blog.Sequent.html#7321" class="Bound">P</a>
  
    <a id="7362" class="Comment">-- ⊥ has no introduction rule as it is the false proposition</a>
  
    <a id="7430" class="Comment">-- ex falso quodlibet</a>
    <a id="PropositionalLogic._⊢_.⊥-elim"></a><a id="7456" href="blog.Sequent.html#7456" class="InductiveConstructor">⊥-elim</a> <a id="7463" class="Symbol">:</a> <a id="7465" class="Symbol">∀{</a><a id="7467" href="blog.Sequent.html#7467" class="Bound">Γ</a> <a id="7469" href="blog.Sequent.html#7469" class="Bound">P</a><a id="7470" class="Symbol">}</a> <a id="7472" class="Symbol">-&gt;</a> <a id="7475" href="blog.Sequent.html#7467" class="Bound">Γ</a> <a id="7477" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7479" href="blog.Sequent.html#4024" class="InductiveConstructor">⊥</a> <a id="7481" class="Symbol">-&gt;</a> <a id="7484" href="blog.Sequent.html#7467" class="Bound">Γ</a> <a id="7486" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7488" href="blog.Sequent.html#7469" class="Bound">P</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/bot-elim.svg
\begin{equation*}
  \begin{prooftree}
    \hypo{\Gamma \vdash \bot}
    \infer1[\bot-elim]{\Gamma \vdash P}
  \end{prooftree}
\end{equation*}
#+end_src

#+RESULTS:
[[file:assets/bot-elim.svg]]

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="7761" class="Comment">-- To prove P ∨ Q, it suffices to prove either P or Q</a>
    <a id="PropositionalLogic._⊢_.∨-intro-left"></a><a id="7819" href="blog.Sequent.html#7819" class="InductiveConstructor">∨-intro-left</a> <a id="7832" class="Symbol">:</a> <a id="7834" class="Symbol">∀{</a><a id="7836" href="blog.Sequent.html#7836" class="Bound">Γ</a><a id="7837" class="Symbol">}</a> <a id="7839" class="Symbol">{</a><a id="7840" href="blog.Sequent.html#7840" class="Bound">P</a> <a id="7842" href="blog.Sequent.html#7842" class="Bound">Q</a> <a id="7844" class="Symbol">:</a> <a id="7846" href="blog.Sequent.html#3990" class="Datatype">Prop</a><a id="7850" class="Symbol">}</a> <a id="7852" class="Symbol">-&gt;</a> <a id="7855" href="blog.Sequent.html#7836" class="Bound">Γ</a> <a id="7857" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7859" href="blog.Sequent.html#7840" class="Bound">P</a> <a id="7861" class="Symbol">-&gt;</a> <a id="7864" href="blog.Sequent.html#7836" class="Bound">Γ</a> <a id="7866" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7868" href="blog.Sequent.html#7840" class="Bound">P</a> <a id="7870" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">∨</a> <a id="7872" href="blog.Sequent.html#7842" class="Bound">Q</a>
    <a id="PropositionalLogic._⊢_.∨-intro-right"></a><a id="7878" href="blog.Sequent.html#7878" class="InductiveConstructor">∨-intro-right</a> <a id="7892" class="Symbol">:</a> <a id="7894" class="Symbol">∀{</a><a id="7896" href="blog.Sequent.html#7896" class="Bound">Γ</a><a id="7897" class="Symbol">}</a> <a id="7899" class="Symbol">{</a><a id="7900" href="blog.Sequent.html#7900" class="Bound">P</a> <a id="7902" href="blog.Sequent.html#7902" class="Bound">Q</a> <a id="7904" class="Symbol">:</a> <a id="7906" href="blog.Sequent.html#3990" class="Datatype">Prop</a><a id="7910" class="Symbol">}</a> <a id="7912" class="Symbol">-&gt;</a> <a id="7915" href="blog.Sequent.html#7896" class="Bound">Γ</a> <a id="7917" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7919" href="blog.Sequent.html#7902" class="Bound">Q</a> <a id="7921" class="Symbol">-&gt;</a> <a id="7924" href="blog.Sequent.html#7896" class="Bound">Γ</a> <a id="7926" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="7928" href="blog.Sequent.html#7900" class="Bound">P</a> <a id="7930" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">∨</a> <a id="7932" href="blog.Sequent.html#7902" class="Bound">Q</a>
    <a id="7938" class="Comment">-- To use P ∨ Q, it suffices to be able to use both P and Q</a>
    <a id="PropositionalLogic._⊢_.∨-elim"></a><a id="8002" href="blog.Sequent.html#8002" class="InductiveConstructor">∨-elim</a> <a id="8009" class="Symbol">:</a> <a id="8011" class="Symbol">∀{</a><a id="8013" href="blog.Sequent.html#8013" class="Bound">Γ</a> <a id="8015" href="blog.Sequent.html#8015" class="Bound">P</a> <a id="8017" href="blog.Sequent.html#8017" class="Bound">Q</a> <a id="8019" href="blog.Sequent.html#8019" class="Bound">R</a><a id="8020" class="Symbol">}</a> <a id="8022" class="Symbol">-&gt;</a> <a id="8025" href="blog.Sequent.html#8013" class="Bound">Γ</a> <a id="8027" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8029" href="blog.Sequent.html#8015" class="Bound">P</a> <a id="8031" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">∨</a> <a id="8033" href="blog.Sequent.html#8017" class="Bound">Q</a> <a id="8035" class="Symbol">-&gt;</a> <a id="8038" href="blog.Sequent.html#8013" class="Bound">Γ</a> <a id="8040" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="8042" href="blog.Sequent.html#8015" class="Bound">P</a> <a id="8044" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8046" href="blog.Sequent.html#8019" class="Bound">R</a> <a id="8048" class="Symbol">-&gt;</a> <a id="8051" href="blog.Sequent.html#8013" class="Bound">Γ</a> <a id="8053" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="8055" href="blog.Sequent.html#8017" class="Bound">Q</a> <a id="8057" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8059" href="blog.Sequent.html#8019" class="Bound">R</a> <a id="8061" class="Symbol">-&gt;</a> <a id="8064" href="blog.Sequent.html#8013" class="Bound">Γ</a> <a id="8066" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8068" href="blog.Sequent.html#8019" class="Bound">R</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/vee-rules.svg
\begin{prooftree}
\hypo{\Gamma \vdash P}
\infer1[\vee-intro-left]{\Gamma \vdash P \vee Q}
\end{prooftree},\quad
\begin{prooftree}
\hypo{\Gamma \vdash Q}
\infer1[\vee-intro-right]{\Gamma \vdash P \vee Q}
\end{prooftree},\quad
\begin{prooftree}
\hypo{\Gamma \vdash P \vee Q}
\hypo{\Gamma , P \vdash R}
\hypo{\Gamma , Q \vdash R}
\infer3[\vee-elim]{\Gamma \vdash R}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/vee-rules.svg]]

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="8580" class="Comment">-- To prove P ∧ Q, you must prove both P and Q</a>
    <a id="PropositionalLogic._⊢_.∧-intro"></a><a id="8631" href="blog.Sequent.html#8631" class="InductiveConstructor">∧-intro</a> <a id="8639" class="Symbol">:</a> <a id="8641" class="Symbol">∀{</a><a id="8643" href="blog.Sequent.html#8643" class="Bound">Γ</a> <a id="8645" href="blog.Sequent.html#8645" class="Bound">P</a> <a id="8647" href="blog.Sequent.html#8647" class="Bound">Q</a><a id="8648" class="Symbol">}</a> <a id="8650" class="Symbol">-&gt;</a> <a id="8653" href="blog.Sequent.html#8643" class="Bound">Γ</a> <a id="8655" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8657" href="blog.Sequent.html#8645" class="Bound">P</a> <a id="8659" class="Symbol">-&gt;</a> <a id="8662" href="blog.Sequent.html#8643" class="Bound">Γ</a> <a id="8664" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8666" href="blog.Sequent.html#8647" class="Bound">Q</a> <a id="8668" class="Symbol">-&gt;</a> <a id="8671" href="blog.Sequent.html#8643" class="Bound">Γ</a> <a id="8673" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8675" href="blog.Sequent.html#8645" class="Bound">P</a> <a id="8677" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">∧</a> <a id="8679" href="blog.Sequent.html#8647" class="Bound">Q</a>
    <a id="PropositionalLogic._⊢_.∧-elim"></a><a id="8685" href="blog.Sequent.html#8685" class="InductiveConstructor">∧-elim</a> <a id="8692" class="Symbol">:</a> <a id="8694" class="Symbol">∀{</a><a id="8696" href="blog.Sequent.html#8696" class="Bound">Γ</a> <a id="8698" href="blog.Sequent.html#8698" class="Bound">P</a> <a id="8700" href="blog.Sequent.html#8700" class="Bound">Q</a> <a id="8702" href="blog.Sequent.html#8702" class="Bound">R</a><a id="8703" class="Symbol">}</a> <a id="8705" class="Symbol">-&gt;</a> <a id="8708" href="blog.Sequent.html#8696" class="Bound">Γ</a> <a id="8710" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8712" href="blog.Sequent.html#8698" class="Bound">P</a> <a id="8714" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">∧</a> <a id="8716" href="blog.Sequent.html#8700" class="Bound">Q</a> <a id="8718" class="Symbol">-&gt;</a> <a id="8721" href="blog.Sequent.html#8696" class="Bound">Γ</a> <a id="8723" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="8725" href="blog.Sequent.html#8698" class="Bound">P</a> <a id="8727" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="8729" href="blog.Sequent.html#8700" class="Bound">Q</a> <a id="8731" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8733" href="blog.Sequent.html#8702" class="Bound">R</a> <a id="8735" class="Symbol">-&gt;</a> <a id="8738" href="blog.Sequent.html#8696" class="Bound">Γ</a> <a id="8740" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="8742" href="blog.Sequent.html#8702" class="Bound">R</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/wedge-rules.svg
\begin{prooftree}
\hypo{\Gamma \vdash P}
\hypo{\Gamma \vdash Q}
\infer2[\wedge-intro]{\Gamma \vdash P \wedge Q}
\end{prooftree},\quad
\begin{prooftree}
\hypo{\Gamma \vdash P \wedge Q}
\hypo{\Gamma , P , Q \vdash R}
\infer2[\wedge-elim]{\Gamma \vdash R}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/wedge-rules.svg]]


#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="PropositionalLogic._⊢_.explosion"></a><a id="9149" href="blog.Sequent.html#9149" class="InductiveConstructor">explosion</a> <a id="9159" class="Symbol">:</a> <a id="9161" class="Symbol">∀{</a><a id="9163" href="blog.Sequent.html#9163" class="Bound">Γ</a> <a id="9165" href="blog.Sequent.html#9165" class="Bound">P</a><a id="9166" class="Symbol">}</a> <a id="9168" class="Symbol">-&gt;</a> <a id="9171" href="blog.Sequent.html#9163" class="Bound">Γ</a> <a id="9173" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="9175" href="blog.Sequent.html#9165" class="Bound">P</a> <a id="9177" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">∧</a> <a id="9179" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬</a> <a id="9181" href="blog.Sequent.html#9165" class="Bound">P</a> <a id="9183" class="Symbol">-&gt;</a> <a id="9186" href="blog.Sequent.html#9163" class="Bound">Γ</a> <a id="9188" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="9190" href="blog.Sequent.html#4024" class="InductiveConstructor">⊥</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/explosion.svg
\begin{prooftree}
\hypo{\Gamma \vdash P \wedge \neg P}
\infer1[explosion]{\Gamma \vdash \bot}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/explosion.svg]]


#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="PropositionalLogic._⊢_.excluded-middle"></a><a id="9434" href="blog.Sequent.html#9434" class="InductiveConstructor">excluded-middle</a> <a id="9450" class="Symbol">:</a> <a id="9452" class="Symbol">∀{</a><a id="9454" href="blog.Sequent.html#9454" class="Bound">Γ</a> <a id="9456" href="blog.Sequent.html#9456" class="Bound">P</a><a id="9457" class="Symbol">}</a> <a id="9459" class="Symbol">-&gt;</a> <a id="9462" href="blog.Sequent.html#9454" class="Bound">Γ</a> <a id="9464" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="9466" href="blog.Sequent.html#9456" class="Bound">P</a> <a id="9468" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">∨</a> <a id="9470" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬</a> <a id="9472" href="blog.Sequent.html#9456" class="Bound">P</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/excluded-middle.svg
\begin{prooftree}
\infer0[excluded middle]{\Gamma \vdash P \vee \neg P}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/excluded-middle.svg]]

** Context manipulations and renaming

Earlier, I said that the ~hypo~ deduction rule is sufficient to do any context
manipulation we might want, let's study what that means. Concretely, we want to
verify that renaming or introducing new hypotheses won't change the truth value
of some proposition.

First, let's define what a "renaming" is

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="PropositionalLogic.Renaming"></a><a id="10045" href="blog.Sequent.html#10045" class="Function">Renaming</a> <a id="10054" class="Symbol">:</a> <a id="10056" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="10060" class="Symbol">-&gt;</a> <a id="10063" href="blog.Sequent.html#4707" class="Datatype">Ctx</a> <a id="10067" class="Symbol">-&gt;</a> <a id="10070" href="Agda.Primitive.html#388" class="Primitive">Set</a>
  <a id="10076" href="blog.Sequent.html#10045" class="Function">Renaming</a> <a id="10085" href="blog.Sequent.html#10085" class="Bound">Γ</a> <a id="10087" href="blog.Sequent.html#10087" class="Bound">Δ</a> <a id="10089" class="Symbol">=</a> <a id="10091" class="Symbol">∀{</a><a id="10093" href="blog.Sequent.html#10093" class="Bound">P</a><a id="10094" class="Symbol">}</a> <a id="10096" class="Symbol">-&gt;</a> <a id="10099" href="blog.Sequent.html#10085" class="Bound">Γ</a> <a id="10101" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="10103" href="blog.Sequent.html#10093" class="Bound">P</a> <a id="10105" class="Symbol">-&gt;</a> <a id="10108" href="blog.Sequent.html#10087" class="Bound">Δ</a> <a id="10110" href="blog.Sequent.html#4999" class="Datatype Operator">∋</a> <a id="10112" href="blog.Sequent.html#10093" class="Bound">P</a>
</pre>
#+END_EXPORT

It is a procedure that, for any proposition present in the old context, tells
you where to find it in the new context. If you think about it, you will notice
that such a renaming:

1. Can introduce new hypotheses.
2. Can merge identical hypotheses.
3. Cannot eliminate hypotheses.

It has exactly the behaviour we would expect from a renaming procedure. Let's
see what we can do to a renaming procedure:

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="PropositionalLogic.extend"></a><a id="10550" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="10557" class="Symbol">:</a> <a id="10559" class="Symbol">∀{</a><a id="10561" href="blog.Sequent.html#10561" class="Bound">Γ</a> <a id="10563" href="blog.Sequent.html#10563" class="Bound">Δ</a> <a id="10565" href="blog.Sequent.html#10565" class="Bound">P</a><a id="10566" class="Symbol">}</a> <a id="10568" class="Symbol">-&gt;</a> <a id="10571" href="blog.Sequent.html#10045" class="Function">Renaming</a> <a id="10580" href="blog.Sequent.html#10561" class="Bound">Γ</a> <a id="10582" href="blog.Sequent.html#10563" class="Bound">Δ</a> <a id="10584" class="Symbol">-&gt;</a> <a id="10587" href="blog.Sequent.html#10045" class="Function">Renaming</a> <a id="10596" class="Symbol">(</a><a id="10597" href="blog.Sequent.html#10561" class="Bound">Γ</a> <a id="10599" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="10601" href="blog.Sequent.html#10565" class="Bound">P</a><a id="10602" class="Symbol">)</a> <a id="10604" class="Symbol">(</a><a id="10605" href="blog.Sequent.html#10563" class="Bound">Δ</a> <a id="10607" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="10609" href="blog.Sequent.html#10565" class="Bound">P</a><a id="10610" class="Symbol">)</a>
  <a id="10614" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="10621" href="blog.Sequent.html#10621" class="Bound">σ</a> <a id="10623" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a> <a id="10628" class="Symbol">=</a> <a id="10630" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a>
  <a id="10637" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="10644" href="blog.Sequent.html#10644" class="Bound">σ</a> <a id="10646" class="Symbol">(</a><a id="10647" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="10653" href="blog.Sequent.html#10653" class="Bound">n</a><a id="10654" class="Symbol">)</a> <a id="10656" class="Symbol">=</a> <a id="10658" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="10664" class="Symbol">(</a><a id="10665" href="blog.Sequent.html#10644" class="Bound">σ</a> <a id="10667" href="blog.Sequent.html#10653" class="Bound">n</a><a id="10668" class="Symbol">)</a>
</pre>
#+END_EXPORT

This means that when we can rename \( \Gamma \) into \( \Delta \), we can extend this
renaming so that it considers one more hypothesis, but doesn't do anything to
it.

Let's see how we can use a renaming procedure

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="10917" href="blog.Sequent.html#10917" class="Function">_</a> <a id="10919" class="Symbol">:</a> <a id="10921" class="Symbol">∀{</a><a id="10923" href="blog.Sequent.html#10923" class="Bound">Γ</a> <a id="10925" href="blog.Sequent.html#10925" class="Bound">P</a> <a id="10927" href="blog.Sequent.html#10927" class="Bound">Q</a><a id="10928" class="Symbol">}</a> <a id="10930" class="Symbol">-&gt;</a> <a id="10933" href="blog.Sequent.html#10923" class="Bound">Γ</a> <a id="10935" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="10937" href="blog.Sequent.html#10925" class="Bound">P</a> <a id="10939" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="10941" href="blog.Sequent.html#10927" class="Bound">Q</a> <a id="10943" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="10945" href="blog.Sequent.html#10925" class="Bound">P</a> <a id="10947" href="blog.Sequent.html#4037" class="InductiveConstructor Operator">∧</a> <a id="10949" href="blog.Sequent.html#10927" class="Bound">Q</a>
  <a id="10953" class="Symbol">_</a> <a id="10955" class="Symbol">=</a> <a id="10957" href="blog.Sequent.html#8631" class="InductiveConstructor">∧-intro</a> <a id="10965" class="Symbol">(</a><a id="10966" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="10971" class="Symbol">(</a><a id="10972" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="10978" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="10982" class="Symbol">))</a> <a id="10985" class="Symbol">(</a><a id="10986" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="10991" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="10995" class="Symbol">)</a>
  
  <a id="PropositionalLogic.rename"></a><a id="11002" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11009" class="Symbol">:</a> <a id="11011" class="Symbol">∀{</a><a id="11013" href="blog.Sequent.html#11013" class="Bound">Γ</a> <a id="11015" href="blog.Sequent.html#11015" class="Bound">Δ</a> <a id="11017" href="blog.Sequent.html#11017" class="Bound">P</a><a id="11018" class="Symbol">}</a> <a id="11020" class="Symbol">-&gt;</a> <a id="11023" href="blog.Sequent.html#10045" class="Function">Renaming</a> <a id="11032" href="blog.Sequent.html#11013" class="Bound">Γ</a> <a id="11034" href="blog.Sequent.html#11015" class="Bound">Δ</a> <a id="11036" class="Symbol">-&gt;</a> <a id="11039" href="blog.Sequent.html#11013" class="Bound">Γ</a> <a id="11041" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="11043" href="blog.Sequent.html#11017" class="Bound">P</a> <a id="11045" class="Symbol">-&gt;</a> <a id="11048" href="blog.Sequent.html#11015" class="Bound">Δ</a> <a id="11050" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="11052" href="blog.Sequent.html#11017" class="Bound">P</a>
  <a id="11056" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11063" href="blog.Sequent.html#11063" class="Bound">σ</a> <a id="11065" class="Symbol">(</a><a id="11066" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="11071" href="blog.Sequent.html#11071" class="Bound">x</a><a id="11072" class="Symbol">)</a> <a id="11074" class="Symbol">=</a> <a id="11076" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="11081" class="Symbol">(</a><a id="11082" href="blog.Sequent.html#11063" class="Bound">σ</a> <a id="11084" href="blog.Sequent.html#11071" class="Bound">x</a><a id="11085" class="Symbol">)</a>
  <a id="11089" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11096" href="blog.Sequent.html#11096" class="Bound">σ</a> <a id="11098" href="blog.Sequent.html#7041" class="InductiveConstructor">⊤-intro</a> <a id="11106" class="Symbol">=</a> <a id="11108" href="blog.Sequent.html#7041" class="InductiveConstructor">⊤-intro</a>
  <a id="11118" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11125" href="blog.Sequent.html#11125" class="Bound">σ</a> <a id="11127" class="Symbol">(</a><a id="11128" href="blog.Sequent.html#7308" class="InductiveConstructor">⊤-elim</a> <a id="11135" href="blog.Sequent.html#11135" class="Bound">p</a> <a id="11137" href="blog.Sequent.html#11137" class="Bound">q</a><a id="11138" class="Symbol">)</a> <a id="11140" class="Symbol">=</a> <a id="11142" href="blog.Sequent.html#7308" class="InductiveConstructor">⊤-elim</a> <a id="11149" class="Symbol">(</a><a id="11150" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11157" href="blog.Sequent.html#11125" class="Bound">σ</a> <a id="11159" href="blog.Sequent.html#11135" class="Bound">p</a><a id="11160" class="Symbol">)</a> <a id="11162" class="Symbol">(</a><a id="11163" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11170" class="Symbol">(</a><a id="11171" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="11178" href="blog.Sequent.html#11125" class="Bound">σ</a><a id="11179" class="Symbol">)</a> <a id="11181" href="blog.Sequent.html#11137" class="Bound">q</a><a id="11182" class="Symbol">)</a>
  <a id="11186" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11193" href="blog.Sequent.html#11193" class="Bound">σ</a> <a id="11195" class="Symbol">(</a><a id="11196" href="blog.Sequent.html#7456" class="InductiveConstructor">⊥-elim</a> <a id="11203" href="blog.Sequent.html#11203" class="Bound">p</a><a id="11204" class="Symbol">)</a> <a id="11206" class="Symbol">=</a> <a id="11208" href="blog.Sequent.html#7456" class="InductiveConstructor">⊥-elim</a> <a id="11215" class="Symbol">(</a><a id="11216" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11223" href="blog.Sequent.html#11193" class="Bound">σ</a> <a id="11225" href="blog.Sequent.html#11203" class="Bound">p</a><a id="11226" class="Symbol">)</a>
  <a id="11230" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11237" href="blog.Sequent.html#11237" class="Bound">σ</a> <a id="11239" class="Symbol">(</a><a id="11240" href="blog.Sequent.html#7819" class="InductiveConstructor">∨-intro-left</a> <a id="11253" href="blog.Sequent.html#11253" class="Bound">p</a><a id="11254" class="Symbol">)</a> <a id="11256" class="Symbol">=</a> <a id="11258" href="blog.Sequent.html#7819" class="InductiveConstructor">∨-intro-left</a> <a id="11271" class="Symbol">(</a><a id="11272" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11279" href="blog.Sequent.html#11237" class="Bound">σ</a> <a id="11281" href="blog.Sequent.html#11253" class="Bound">p</a><a id="11282" class="Symbol">)</a>
  <a id="11286" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11293" href="blog.Sequent.html#11293" class="Bound">σ</a> <a id="11295" class="Symbol">(</a><a id="11296" href="blog.Sequent.html#7878" class="InductiveConstructor">∨-intro-right</a> <a id="11310" href="blog.Sequent.html#11310" class="Bound">p</a><a id="11311" class="Symbol">)</a> <a id="11313" class="Symbol">=</a> <a id="11315" href="blog.Sequent.html#7878" class="InductiveConstructor">∨-intro-right</a> <a id="11329" class="Symbol">(</a><a id="11330" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11337" href="blog.Sequent.html#11293" class="Bound">σ</a> <a id="11339" href="blog.Sequent.html#11310" class="Bound">p</a><a id="11340" class="Symbol">)</a>
  <a id="11344" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11351" href="blog.Sequent.html#11351" class="Bound">σ</a> <a id="11353" class="Symbol">(</a><a id="11354" href="blog.Sequent.html#8002" class="InductiveConstructor">∨-elim</a> <a id="11361" href="blog.Sequent.html#11361" class="Bound">s</a> <a id="11363" href="blog.Sequent.html#11363" class="Bound">p</a> <a id="11365" href="blog.Sequent.html#11365" class="Bound">q</a><a id="11366" class="Symbol">)</a> <a id="11368" class="Symbol">=</a> <a id="11370" href="blog.Sequent.html#8002" class="InductiveConstructor">∨-elim</a> <a id="11377" class="Symbol">(</a><a id="11378" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11385" href="blog.Sequent.html#11351" class="Bound">σ</a> <a id="11387" href="blog.Sequent.html#11361" class="Bound">s</a><a id="11388" class="Symbol">)</a> <a id="11390" class="Symbol">(</a><a id="11391" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11398" class="Symbol">(</a><a id="11399" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="11406" href="blog.Sequent.html#11351" class="Bound">σ</a><a id="11407" class="Symbol">)</a> <a id="11409" href="blog.Sequent.html#11363" class="Bound">p</a><a id="11410" class="Symbol">)</a> <a id="11412" class="Symbol">(</a><a id="11413" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11420" class="Symbol">(</a><a id="11421" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="11428" href="blog.Sequent.html#11351" class="Bound">σ</a><a id="11429" class="Symbol">)</a> <a id="11431" href="blog.Sequent.html#11365" class="Bound">q</a><a id="11432" class="Symbol">)</a>
  <a id="11436" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11443" href="blog.Sequent.html#11443" class="Bound">σ</a> <a id="11445" class="Symbol">(</a><a id="11446" href="blog.Sequent.html#8631" class="InductiveConstructor">∧-intro</a> <a id="11454" href="blog.Sequent.html#11454" class="Bound">p</a> <a id="11456" href="blog.Sequent.html#11456" class="Bound">q</a><a id="11457" class="Symbol">)</a> <a id="11459" class="Symbol">=</a> <a id="11461" href="blog.Sequent.html#8631" class="InductiveConstructor">∧-intro</a> <a id="11469" class="Symbol">(</a><a id="11470" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11477" href="blog.Sequent.html#11443" class="Bound">σ</a> <a id="11479" href="blog.Sequent.html#11454" class="Bound">p</a><a id="11480" class="Symbol">)</a> <a id="11482" class="Symbol">(</a><a id="11483" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11490" href="blog.Sequent.html#11443" class="Bound">σ</a> <a id="11492" href="blog.Sequent.html#11456" class="Bound">q</a><a id="11493" class="Symbol">)</a>
  <a id="11497" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11504" href="blog.Sequent.html#11504" class="Bound">σ</a> <a id="11506" class="Symbol">(</a><a id="11507" href="blog.Sequent.html#8685" class="InductiveConstructor">∧-elim</a> <a id="11514" href="blog.Sequent.html#11514" class="Bound">s</a> <a id="11516" href="blog.Sequent.html#11516" class="Bound">p</a><a id="11517" class="Symbol">)</a> <a id="11519" class="Symbol">=</a> <a id="11521" href="blog.Sequent.html#8685" class="InductiveConstructor">∧-elim</a> <a id="11528" class="Symbol">(</a><a id="11529" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11536" href="blog.Sequent.html#11504" class="Bound">σ</a> <a id="11538" href="blog.Sequent.html#11514" class="Bound">s</a><a id="11539" class="Symbol">)</a> <a id="11541" class="Symbol">(</a><a id="11542" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11549" class="Symbol">(</a><a id="11550" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="11557" class="Symbol">(</a><a id="11558" href="blog.Sequent.html#10550" class="Function">extend</a> <a id="11565" href="blog.Sequent.html#11504" class="Bound">σ</a><a id="11566" class="Symbol">))</a> <a id="11569" href="blog.Sequent.html#11516" class="Bound">p</a><a id="11570" class="Symbol">)</a>
  <a id="11574" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11581" href="blog.Sequent.html#11581" class="Bound">σ</a> <a id="11583" class="Symbol">(</a><a id="11584" href="blog.Sequent.html#9149" class="InductiveConstructor">explosion</a> <a id="11594" href="blog.Sequent.html#11594" class="Bound">p</a><a id="11595" class="Symbol">)</a> <a id="11597" class="Symbol">=</a> <a id="11599" href="blog.Sequent.html#9149" class="InductiveConstructor">explosion</a> <a id="11609" class="Symbol">(</a><a id="11610" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11617" href="blog.Sequent.html#11581" class="Bound">σ</a> <a id="11619" href="blog.Sequent.html#11594" class="Bound">p</a><a id="11620" class="Symbol">)</a>
  <a id="11624" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="11631" href="blog.Sequent.html#11631" class="Bound">σ</a> <a id="11633" href="blog.Sequent.html#9434" class="InductiveConstructor">excluded-middle</a> <a id="11649" class="Symbol">=</a> <a id="11651" href="blog.Sequent.html#9434" class="InductiveConstructor">excluded-middle</a>
</pre>
#+END_EXPORT

Now that we know how to manipulate contexts, we can use that to define (strictly
in terms of our already-existing connectives) an implication operator.

** Defining \( \Rightarrow \)

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="PropositionalLogic._=&gt;_"></a><a id="11882" href="blog.Sequent.html#11882" class="Function Operator">_=&gt;_</a> <a id="11887" class="Symbol">:</a> <a id="11889" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="11894" class="Symbol">-&gt;</a> <a id="11897" href="blog.Sequent.html#3990" class="Datatype">Prop</a> <a id="11902" class="Symbol">-&gt;</a> <a id="11905" href="blog.Sequent.html#3990" class="Datatype">Prop</a>
  <a id="11912" href="blog.Sequent.html#11912" class="Bound">P</a> <a id="11914" href="blog.Sequent.html#11882" class="Function Operator">=&gt;</a> <a id="11917" href="blog.Sequent.html#11917" class="Bound">Q</a> <a id="11919" class="Symbol">=</a> <a id="11921" href="blog.Sequent.html#4099" class="InductiveConstructor Operator">¬</a> <a id="11923" href="blog.Sequent.html#11912" class="Bound">P</a> <a id="11925" href="blog.Sequent.html#4068" class="InductiveConstructor Operator">∨</a> <a id="11927" href="blog.Sequent.html#11917" class="Bound">Q</a>
</pre>
#+END_EXPORT

and show that it behaves as expected

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="PropositionalLogic.=&gt;-intro"></a><a id="11998" href="blog.Sequent.html#11998" class="Function">=&gt;-intro</a> <a id="12007" class="Symbol">:</a> <a id="12009" class="Symbol">∀{</a><a id="12011" href="blog.Sequent.html#12011" class="Bound">Γ</a> <a id="12013" href="blog.Sequent.html#12013" class="Bound">P</a> <a id="12015" href="blog.Sequent.html#12015" class="Bound">Q</a><a id="12016" class="Symbol">}</a> <a id="12018" class="Symbol">-&gt;</a> <a id="12021" href="blog.Sequent.html#12011" class="Bound">Γ</a> <a id="12023" href="blog.Sequent.html#4810" class="InductiveConstructor Operator">,</a> <a id="12025" href="blog.Sequent.html#12013" class="Bound">P</a> <a id="12027" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="12029" href="blog.Sequent.html#12015" class="Bound">Q</a> <a id="12031" class="Symbol">-&gt;</a> <a id="12034" href="blog.Sequent.html#12011" class="Bound">Γ</a> <a id="12036" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="12038" class="Symbol">(</a><a id="12039" href="blog.Sequent.html#12013" class="Bound">P</a> <a id="12041" href="blog.Sequent.html#11882" class="Function Operator">=&gt;</a> <a id="12044" href="blog.Sequent.html#12015" class="Bound">Q</a><a id="12045" class="Symbol">)</a>
  <a id="12049" href="blog.Sequent.html#11998" class="Function">=&gt;-intro</a> <a id="12058" class="Symbol">{</a><a id="12059" class="Argument">P</a> <a id="12061" class="Symbol">=</a> <a id="12063" href="blog.Sequent.html#12063" class="Bound">P</a><a id="12064" class="Symbol">}</a> <a id="12066" href="blog.Sequent.html#12066" class="Bound">t</a> <a id="12068" class="Symbol">=</a> <a id="12070" href="blog.Sequent.html#8002" class="InductiveConstructor">∨-elim</a> <a id="12077" class="Symbol">(</a><a id="12078" href="blog.Sequent.html#9434" class="InductiveConstructor">excluded-middle</a> <a id="12094" class="Symbol">{</a><a id="12095" class="Argument">P</a> <a id="12097" class="Symbol">=</a> <a id="12099" href="blog.Sequent.html#12063" class="Bound">P</a><a id="12100" class="Symbol">})</a> <a id="12103" class="Symbol">(</a><a id="12104" href="blog.Sequent.html#7878" class="InductiveConstructor">∨-intro-right</a> <a id="12118" href="blog.Sequent.html#12066" class="Bound">t</a><a id="12119" class="Symbol">)</a> <a id="12121" class="Symbol">(</a><a id="12122" href="blog.Sequent.html#7819" class="InductiveConstructor">∨-intro-left</a> <a id="12135" class="Symbol">(</a><a id="12136" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="12141" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="12145" class="Symbol">))</a>

  <a id="PropositionalLogic.=&gt;-elim"></a><a id="12151" href="blog.Sequent.html#12151" class="Function">=&gt;-elim</a> <a id="12159" class="Symbol">:</a> <a id="12161" class="Symbol">∀{</a><a id="12163" href="blog.Sequent.html#12163" class="Bound">Γ</a> <a id="12165" href="blog.Sequent.html#12165" class="Bound">P</a> <a id="12167" href="blog.Sequent.html#12167" class="Bound">Q</a><a id="12168" class="Symbol">}</a> <a id="12170" class="Symbol">-&gt;</a> <a id="12173" href="blog.Sequent.html#12163" class="Bound">Γ</a> <a id="12175" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="12177" class="Symbol">(</a><a id="12178" href="blog.Sequent.html#12165" class="Bound">P</a> <a id="12180" href="blog.Sequent.html#11882" class="Function Operator">=&gt;</a> <a id="12183" href="blog.Sequent.html#12167" class="Bound">Q</a><a id="12184" class="Symbol">)</a> <a id="12186" class="Symbol">-&gt;</a> <a id="12189" href="blog.Sequent.html#12163" class="Bound">Γ</a> <a id="12191" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="12193" href="blog.Sequent.html#12165" class="Bound">P</a> <a id="12195" class="Symbol">-&gt;</a> <a id="12198" href="blog.Sequent.html#12163" class="Bound">Γ</a> <a id="12200" href="blog.Sequent.html#6688" class="Datatype Operator">⊢</a> <a id="12202" href="blog.Sequent.html#12167" class="Bound">Q</a>
  <a id="12206" href="blog.Sequent.html#12151" class="Function">=&gt;-elim</a> <a id="12214" href="blog.Sequent.html#12214" class="Bound">P=&gt;Q</a> <a id="12219" href="blog.Sequent.html#12219" class="Bound">P</a> <a id="12221" class="Symbol">=</a>
    <a id="12227" href="blog.Sequent.html#8002" class="InductiveConstructor">∨-elim</a> <a id="12234" href="blog.Sequent.html#12214" class="Bound">P=&gt;Q</a>
           <a id="12250" class="Symbol">(</a><a id="12251" href="blog.Sequent.html#7456" class="InductiveConstructor">⊥-elim</a> <a id="12258" class="Symbol">(</a><a id="12259" href="blog.Sequent.html#9149" class="InductiveConstructor">explosion</a> <a id="12269" class="Symbol">(</a><a id="12270" href="blog.Sequent.html#8631" class="InductiveConstructor">∧-intro</a> <a id="12278" class="Symbol">(</a><a id="12279" href="blog.Sequent.html#11002" class="Function">rename</a> <a id="12286" href="blog.Sequent.html#5127" class="InductiveConstructor">there</a> <a id="12292" href="blog.Sequent.html#12219" class="Bound">P</a><a id="12293" class="Symbol">)</a>
                                       <a id="12334" class="Symbol">(</a><a id="12335" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="12340" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="12344" class="Symbol">))))</a>
           <a id="12360" class="Symbol">(</a><a id="12361" href="blog.Sequent.html#6723" class="InductiveConstructor">hypo</a> <a id="12366" href="blog.Sequent.html#5071" class="InductiveConstructor">here</a><a id="12370" class="Symbol">)</a>
</pre>
#+END_EXPORT

#+begin_src latex :file assets/impl-rules.svg
\begin{equation*}
\begin{aligned}
\begin{prooftree}
\infer0[excluded middle]{\Gamma \vdash P \vee \neg P}
\hypo{\Gamma , P \vdash Q}
\infer1[\vee-intro-right]{\Gamma , P \vdash \neg P \vee Q}
\infer0{\Gamma , \neg P \vdash \neg P}
\infer1[\vee-intro-left]{\Gamma , \neg P \vdash \neg P \vee Q}
\infer3[\vee-elim]{\Gamma \vdash \neg P \vee Q}
\infer1[\Delta]{\Gamma \vdash P \Rightarrow Q}
\end{prooftree} & \text{\Rightarrow-intro} \\
\begin{prooftree}
\hypo{\Gamma \vdash P \Rightarrow Q}
\infer1[\Delta]{\Gamma \vdash \neg P \vee Q}
\hypo{\Gamma \vdash P}
\infer1{\Gamma , \neg P \vdash P}
\infer0{\Gamma , \neg P \vdash \neg P}
\infer2[\wedge-intro]{\Gamma , \neg P \vdash P \wedge \neg P}
\infer1[explosion]{\Gamma , \neg P \vdash \bot}
\infer1[\bot-elim]{\Gamma , \neg P \vdash Q}
\infer0{\Gamma , Q \vdash Q}
\infer3[\vee-elim]{\Gamma \vdash Q}
\end{prooftree} & \text{\Rightarrow-elim}
\end{aligned}
\end{equation*}
#+end_src

#+RESULTS:
[[file:assets/impl-rules.svg]]

Such rules that can be derived without adding new ones are called admissible.

Notice that the Agda version of the proofs are quite hard to read, especially
because unlike me, you don't have access to the [[https://agda.readthedocs.io/en/v2.7.0.1/language/lexical-structure.html#holes][holes]] and intermediate proof
states. However, the sequent calculus versions are more visual and give you
every intermediate proof state.

* Simply typed lambda calculus

#+BEGIN_EXPORT html
<pre class="Agda">
<a id="13882" class="Keyword">module</a> <a id="STLC"></a><a id="13889" href="blog.Sequent.html#13889" class="Module">STLC</a> <a id="13894" class="Keyword">where</a>
  <a id="13902" class="Keyword">open</a> <a id="13907" class="Keyword">import</a> <a id="13914" href="Terra.Data.Sigma.html" class="Module">Terra.Data.Sigma</a>
    <a id="13935" class="Keyword">renaming</a> <a id="13944" class="Symbol">(</a><a id="13945" href="Agda.Builtin.Sigma.html#235" class="InductiveConstructor Operator">_,_</a> <a id="13949" class="Symbol">to</a> <a id="13952" class="InductiveConstructor Operator">⟨_,_⟩</a><a id="13957" class="Symbol">)</a>
  <a id="13961" class="Keyword">open</a> <a id="13966" class="Keyword">import</a> <a id="13973" href="Terra.Data.Sigma.Syntax.html" class="Module">Terra.Data.Sigma.Syntax</a>
  <a id="13999" class="Keyword">open</a> <a id="14004" class="Keyword">import</a> <a id="14011" href="Terra.Data.Negation.html" class="Module">Terra.Data.Negation</a>

  <a id="14034" class="Keyword">infixr</a> <a id="14041" class="Number">4</a> <a id="14043" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">_=&gt;_</a>
  <a id="14050" class="Keyword">infixl</a> <a id="14057" class="Number">6</a> <a id="14059" href="blog.Sequent.html#14788" class="InductiveConstructor Operator">_×_</a>
  <a id="14065" class="Keyword">infixl</a> <a id="14072" class="Number">5</a> <a id="14074" href="blog.Sequent.html#14819" class="InductiveConstructor Operator">_+_</a>
  <a id="14080" class="Keyword">infixl</a> <a id="14087" class="Number">4</a> <a id="14089" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">_,_</a>
  <a id="14095" class="Keyword">infix</a> <a id="14101" class="Number">3</a> <a id="14103" href="blog.Sequent.html#14988" class="Datatype Operator">_∋_</a> <a id="14107" href="blog.Sequent.html#15139" class="Datatype Operator">_⊢_</a>
</pre>
#+END_EXPORT

You might know about a thing called the [[https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence][Curry Howard correspondance]]. It is name
given to the observation type systems are like logics and that programs are like
proofs. It turns out that the type system of the simply typed lambda calculus,
when translated into a logic, gives us intuitionistic propositional logic.

Let's quickly define the language of types (very similar to propositions in the
propositional logic we defined earlier). Everything is pretty much the same.

** Types

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="14697" class="Keyword">data</a> <a id="STLC.Type"></a><a id="14702" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14707" class="Symbol">:</a> <a id="14709" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="14713" class="Keyword">where</a>
    <a id="STLC.Type.Unit"></a><a id="14723" href="blog.Sequent.html#14723" class="InductiveConstructor">Unit</a> <a id="14728" class="Symbol">:</a> <a id="14730" href="blog.Sequent.html#14702" class="Datatype">Type</a>
    <a id="STLC.Type.Null"></a><a id="14739" href="blog.Sequent.html#14739" class="InductiveConstructor">Null</a> <a id="14744" class="Symbol">:</a> <a id="14746" href="blog.Sequent.html#14702" class="Datatype">Type</a>

    <a id="STLC.Type._=&gt;_"></a><a id="14756" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">_=&gt;_</a> <a id="14761" class="Symbol">:</a> <a id="14763" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14768" class="Symbol">-&gt;</a> <a id="14771" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14776" class="Symbol">-&gt;</a> <a id="14779" href="blog.Sequent.html#14702" class="Datatype">Type</a>
    <a id="STLC.Type._×_"></a><a id="14788" href="blog.Sequent.html#14788" class="InductiveConstructor Operator">_×_</a> <a id="14792" class="Symbol">:</a> <a id="14794" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14799" class="Symbol">-&gt;</a> <a id="14802" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14807" class="Symbol">-&gt;</a> <a id="14810" href="blog.Sequent.html#14702" class="Datatype">Type</a>
    <a id="STLC.Type._+_"></a><a id="14819" href="blog.Sequent.html#14819" class="InductiveConstructor Operator">_+_</a> <a id="14823" class="Symbol">:</a> <a id="14825" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14830" class="Symbol">-&gt;</a> <a id="14833" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14838" class="Symbol">-&gt;</a> <a id="14841" href="blog.Sequent.html#14702" class="Datatype">Type</a>

    <a id="STLC.Type.ℕ"></a><a id="14851" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a> <a id="14853" class="Symbol">:</a> <a id="14855" href="blog.Sequent.html#14702" class="Datatype">Type</a>
</pre>
#+END_EXPORT

** Context and references

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="14918" class="Keyword">data</a> <a id="STLC.Ctx"></a><a id="14923" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="14927" class="Symbol">:</a> <a id="14929" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="14933" class="Keyword">where</a>
    <a id="STLC.Ctx.·"></a><a id="14943" href="blog.Sequent.html#14943" class="InductiveConstructor">·</a> <a id="14945" class="Symbol">:</a> <a id="14947" href="blog.Sequent.html#14923" class="Datatype">Ctx</a>
    <a id="STLC.Ctx._,_"></a><a id="14955" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">_,_</a> <a id="14959" class="Symbol">:</a> <a id="14961" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="14965" class="Symbol">-&gt;</a> <a id="14968" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="14973" class="Symbol">-&gt;</a> <a id="14976" href="blog.Sequent.html#14923" class="Datatype">Ctx</a>

  <a id="14983" class="Keyword">data</a> <a id="STLC._∋_"></a><a id="14988" href="blog.Sequent.html#14988" class="Datatype Operator">_∋_</a> <a id="14992" class="Symbol">:</a> <a id="14994" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="14998" class="Symbol">-&gt;</a> <a id="15001" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="15006" class="Symbol">-&gt;</a> <a id="15009" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="15013" class="Keyword">where</a>
    <a id="STLC._∋_.here"></a><a id="15023" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a> <a id="15028" class="Symbol">:</a> <a id="15030" class="Symbol">∀{</a><a id="15032" href="blog.Sequent.html#15032" class="Bound">Γ</a> <a id="15034" href="blog.Sequent.html#15034" class="Bound">T</a><a id="15035" class="Symbol">}</a> <a id="15037" class="Symbol">-&gt;</a> <a id="15040" href="blog.Sequent.html#15032" class="Bound">Γ</a> <a id="15042" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15044" href="blog.Sequent.html#15034" class="Bound">T</a> <a id="15046" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="15048" href="blog.Sequent.html#15034" class="Bound">T</a>
    <a id="STLC._∋_.there"></a><a id="15054" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="15060" class="Symbol">:</a> <a id="15062" class="Symbol">∀{</a><a id="15064" href="blog.Sequent.html#15064" class="Bound">Γ</a> <a id="15066" href="blog.Sequent.html#15066" class="Bound">S</a> <a id="15068" href="blog.Sequent.html#15068" class="Bound">T</a><a id="15069" class="Symbol">}</a> <a id="15071" class="Symbol">-&gt;</a> <a id="15074" href="blog.Sequent.html#15064" class="Bound">Γ</a> <a id="15076" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="15078" href="blog.Sequent.html#15068" class="Bound">T</a> <a id="15080" class="Symbol">-&gt;</a> <a id="15083" href="blog.Sequent.html#15064" class="Bound">Γ</a> <a id="15085" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15087" href="blog.Sequent.html#15066" class="Bound">S</a> <a id="15089" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="15091" href="blog.Sequent.html#15068" class="Bound">T</a>
</pre>
#+END_EXPORT

** Terms

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="15134" class="Keyword">data</a> <a id="STLC._⊢_"></a><a id="15139" href="blog.Sequent.html#15139" class="Datatype Operator">_⊢_</a> <a id="15143" class="Symbol">:</a> <a id="15145" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="15149" class="Symbol">-&gt;</a> <a id="15152" href="blog.Sequent.html#14702" class="Datatype">Type</a> <a id="15157" class="Symbol">-&gt;</a> <a id="15160" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="15164" class="Keyword">where</a>
    <a id="STLC._⊢_.var"></a><a id="15174" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="15178" class="Symbol">:</a> <a id="15180" class="Symbol">∀{</a><a id="15182" href="blog.Sequent.html#15182" class="Bound">Γ</a> <a id="15184" href="blog.Sequent.html#15184" class="Bound">T</a><a id="15185" class="Symbol">}</a> <a id="15187" class="Symbol">-&gt;</a> <a id="15190" href="blog.Sequent.html#15182" class="Bound">Γ</a> <a id="15192" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="15194" href="blog.Sequent.html#15184" class="Bound">T</a> <a id="15196" class="Symbol">-&gt;</a> <a id="15199" href="blog.Sequent.html#15182" class="Bound">Γ</a> <a id="15201" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15203" href="blog.Sequent.html#15184" class="Bound">T</a>

    <a id="STLC._⊢_.unit-intro"></a><a id="15210" href="blog.Sequent.html#15210" class="InductiveConstructor">unit-intro</a> <a id="15221" class="Symbol">:</a> <a id="15223" class="Symbol">∀{</a><a id="15225" href="blog.Sequent.html#15225" class="Bound">Γ</a><a id="15226" class="Symbol">}</a> <a id="15228" class="Symbol">-&gt;</a> <a id="15231" href="blog.Sequent.html#15225" class="Bound">Γ</a> <a id="15233" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15235" href="blog.Sequent.html#14723" class="InductiveConstructor">Unit</a>
    <a id="STLC._⊢_.null-elim"></a><a id="15244" href="blog.Sequent.html#15244" class="InductiveConstructor">null-elim</a> <a id="15254" class="Symbol">:</a> <a id="15256" class="Symbol">∀{</a><a id="15258" href="blog.Sequent.html#15258" class="Bound">Γ</a> <a id="15260" href="blog.Sequent.html#15260" class="Bound">T</a><a id="15261" class="Symbol">}</a> <a id="15263" class="Symbol">-&gt;</a> <a id="15266" href="blog.Sequent.html#15258" class="Bound">Γ</a> <a id="15268" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15270" href="blog.Sequent.html#14739" class="InductiveConstructor">Null</a> <a id="15275" class="Symbol">-&gt;</a> <a id="15278" href="blog.Sequent.html#15258" class="Bound">Γ</a> <a id="15280" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15282" href="blog.Sequent.html#15260" class="Bound">T</a>

    <a id="15289" class="Comment">-- also known as =&gt;-intro or even λ</a>
    <a id="STLC._⊢_.abs"></a><a id="15329" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="15333" class="Symbol">:</a> <a id="15335" class="Symbol">∀{</a><a id="15337" href="blog.Sequent.html#15337" class="Bound">Γ</a> <a id="15339" href="blog.Sequent.html#15339" class="Bound">S</a> <a id="15341" href="blog.Sequent.html#15341" class="Bound">T</a><a id="15342" class="Symbol">}</a> <a id="15344" class="Symbol">-&gt;</a> <a id="15347" href="blog.Sequent.html#15337" class="Bound">Γ</a> <a id="15349" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15351" href="blog.Sequent.html#15339" class="Bound">S</a> <a id="15353" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15355" href="blog.Sequent.html#15341" class="Bound">T</a> <a id="15357" class="Symbol">-&gt;</a> <a id="15360" href="blog.Sequent.html#15337" class="Bound">Γ</a> <a id="15362" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15364" class="Symbol">(</a><a id="15365" href="blog.Sequent.html#15339" class="Bound">S</a> <a id="15367" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">=&gt;</a> <a id="15370" href="blog.Sequent.html#15341" class="Bound">T</a><a id="15371" class="Symbol">)</a>
    <a id="15377" class="Comment">-- also known as =&gt;-elim</a>
    <a id="STLC._⊢_.app"></a><a id="15406" href="blog.Sequent.html#15406" class="InductiveConstructor">app</a> <a id="15410" class="Symbol">:</a> <a id="15412" class="Symbol">∀{</a><a id="15414" href="blog.Sequent.html#15414" class="Bound">Γ</a> <a id="15416" href="blog.Sequent.html#15416" class="Bound">S</a> <a id="15418" href="blog.Sequent.html#15418" class="Bound">T</a><a id="15419" class="Symbol">}</a> <a id="15421" class="Symbol">-&gt;</a> <a id="15424" href="blog.Sequent.html#15414" class="Bound">Γ</a> <a id="15426" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15428" class="Symbol">(</a><a id="15429" href="blog.Sequent.html#15416" class="Bound">S</a> <a id="15431" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">=&gt;</a> <a id="15434" href="blog.Sequent.html#15418" class="Bound">T</a><a id="15435" class="Symbol">)</a> <a id="15437" class="Symbol">-&gt;</a> <a id="15440" href="blog.Sequent.html#15414" class="Bound">Γ</a> <a id="15442" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15444" href="blog.Sequent.html#15416" class="Bound">S</a> <a id="15446" class="Symbol">-&gt;</a> <a id="15449" href="blog.Sequent.html#15414" class="Bound">Γ</a> <a id="15451" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15453" href="blog.Sequent.html#15418" class="Bound">T</a>

    <a id="STLC._⊢_.×-intro"></a><a id="15460" href="blog.Sequent.html#15460" class="InductiveConstructor">×-intro</a> <a id="15468" class="Symbol">:</a> <a id="15470" class="Symbol">∀{</a><a id="15472" href="blog.Sequent.html#15472" class="Bound">Γ</a> <a id="15474" href="blog.Sequent.html#15474" class="Bound">S</a> <a id="15476" href="blog.Sequent.html#15476" class="Bound">T</a><a id="15477" class="Symbol">}</a> <a id="15479" class="Symbol">-&gt;</a> <a id="15482" href="blog.Sequent.html#15472" class="Bound">Γ</a> <a id="15484" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15486" href="blog.Sequent.html#15474" class="Bound">S</a> <a id="15488" class="Symbol">-&gt;</a> <a id="15491" href="blog.Sequent.html#15472" class="Bound">Γ</a> <a id="15493" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15495" href="blog.Sequent.html#15476" class="Bound">T</a> <a id="15497" class="Symbol">-&gt;</a> <a id="15500" href="blog.Sequent.html#15472" class="Bound">Γ</a> <a id="15502" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15504" href="blog.Sequent.html#15474" class="Bound">S</a> <a id="15506" href="blog.Sequent.html#14788" class="InductiveConstructor Operator">×</a> <a id="15508" href="blog.Sequent.html#15476" class="Bound">T</a>
    <a id="STLC._⊢_.×-elim"></a><a id="15514" href="blog.Sequent.html#15514" class="InductiveConstructor">×-elim</a> <a id="15521" class="Symbol">:</a> <a id="15523" class="Symbol">∀{</a><a id="15525" href="blog.Sequent.html#15525" class="Bound">Γ</a> <a id="15527" href="blog.Sequent.html#15527" class="Bound">S</a> <a id="15529" href="blog.Sequent.html#15529" class="Bound">T</a> <a id="15531" href="blog.Sequent.html#15531" class="Bound">U</a><a id="15532" class="Symbol">}</a> <a id="15534" class="Symbol">-&gt;</a> <a id="15537" href="blog.Sequent.html#15525" class="Bound">Γ</a> <a id="15539" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15541" href="blog.Sequent.html#15527" class="Bound">S</a> <a id="15543" href="blog.Sequent.html#14788" class="InductiveConstructor Operator">×</a> <a id="15545" href="blog.Sequent.html#15529" class="Bound">T</a> <a id="15547" class="Symbol">-&gt;</a> <a id="15550" href="blog.Sequent.html#15525" class="Bound">Γ</a> <a id="15552" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15554" href="blog.Sequent.html#15527" class="Bound">S</a> <a id="15556" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15558" href="blog.Sequent.html#15529" class="Bound">T</a> <a id="15560" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15562" href="blog.Sequent.html#15531" class="Bound">U</a> <a id="15564" class="Symbol">-&gt;</a> <a id="15567" href="blog.Sequent.html#15525" class="Bound">Γ</a> <a id="15569" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15571" href="blog.Sequent.html#15531" class="Bound">U</a>

    <a id="STLC._⊢_.+-intro-left"></a><a id="15578" href="blog.Sequent.html#15578" class="InductiveConstructor">+-intro-left</a> <a id="15591" class="Symbol">:</a> <a id="15593" class="Symbol">∀{</a><a id="15595" href="blog.Sequent.html#15595" class="Bound">Γ</a> <a id="15597" href="blog.Sequent.html#15597" class="Bound">S</a> <a id="15599" href="blog.Sequent.html#15599" class="Bound">T</a><a id="15600" class="Symbol">}</a> <a id="15602" class="Symbol">-&gt;</a> <a id="15605" href="blog.Sequent.html#15595" class="Bound">Γ</a> <a id="15607" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15609" href="blog.Sequent.html#15597" class="Bound">S</a> <a id="15611" class="Symbol">-&gt;</a> <a id="15614" href="blog.Sequent.html#15595" class="Bound">Γ</a> <a id="15616" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15618" href="blog.Sequent.html#15597" class="Bound">S</a> <a id="15620" href="blog.Sequent.html#14819" class="InductiveConstructor Operator">+</a> <a id="15622" href="blog.Sequent.html#15599" class="Bound">T</a>
    <a id="STLC._⊢_.+-intro-right"></a><a id="15628" href="blog.Sequent.html#15628" class="InductiveConstructor">+-intro-right</a> <a id="15642" class="Symbol">:</a> <a id="15644" class="Symbol">∀{</a><a id="15646" href="blog.Sequent.html#15646" class="Bound">Γ</a> <a id="15648" href="blog.Sequent.html#15648" class="Bound">S</a> <a id="15650" href="blog.Sequent.html#15650" class="Bound">T</a><a id="15651" class="Symbol">}</a> <a id="15653" class="Symbol">-&gt;</a> <a id="15656" href="blog.Sequent.html#15646" class="Bound">Γ</a> <a id="15658" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15660" href="blog.Sequent.html#15650" class="Bound">T</a> <a id="15662" class="Symbol">-&gt;</a> <a id="15665" href="blog.Sequent.html#15646" class="Bound">Γ</a> <a id="15667" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15669" href="blog.Sequent.html#15648" class="Bound">S</a> <a id="15671" href="blog.Sequent.html#14819" class="InductiveConstructor Operator">+</a> <a id="15673" href="blog.Sequent.html#15650" class="Bound">T</a>
    <a id="STLC._⊢_.+-elim"></a><a id="15679" href="blog.Sequent.html#15679" class="InductiveConstructor">+-elim</a> <a id="15686" class="Symbol">:</a> <a id="15688" class="Symbol">∀{</a><a id="15690" href="blog.Sequent.html#15690" class="Bound">Γ</a> <a id="15692" href="blog.Sequent.html#15692" class="Bound">S</a> <a id="15694" href="blog.Sequent.html#15694" class="Bound">T</a> <a id="15696" href="blog.Sequent.html#15696" class="Bound">U</a><a id="15697" class="Symbol">}</a> <a id="15699" class="Symbol">-&gt;</a> <a id="15702" href="blog.Sequent.html#15690" class="Bound">Γ</a> <a id="15704" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15706" class="Symbol">(</a><a id="15707" href="blog.Sequent.html#15692" class="Bound">S</a> <a id="15709" href="blog.Sequent.html#14819" class="InductiveConstructor Operator">+</a> <a id="15711" href="blog.Sequent.html#15694" class="Bound">T</a><a id="15712" class="Symbol">)</a> <a id="15714" class="Symbol">-&gt;</a> <a id="15717" href="blog.Sequent.html#15690" class="Bound">Γ</a> <a id="15719" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15721" href="blog.Sequent.html#15692" class="Bound">S</a> <a id="15723" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15725" href="blog.Sequent.html#15696" class="Bound">U</a> <a id="15727" class="Symbol">-&gt;</a> <a id="15730" href="blog.Sequent.html#15690" class="Bound">Γ</a> <a id="15732" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15734" href="blog.Sequent.html#15694" class="Bound">T</a> <a id="15736" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15738" href="blog.Sequent.html#15696" class="Bound">U</a> <a id="15740" class="Symbol">-&gt;</a> <a id="15743" href="blog.Sequent.html#15690" class="Bound">Γ</a> <a id="15745" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15747" href="blog.Sequent.html#15696" class="Bound">U</a>

    <a id="STLC._⊢_.ℕ-intro-zero"></a><a id="15754" href="blog.Sequent.html#15754" class="InductiveConstructor">ℕ-intro-zero</a> <a id="15767" class="Symbol">:</a> <a id="15769" class="Symbol">∀{</a><a id="15771" href="blog.Sequent.html#15771" class="Bound">Γ</a><a id="15772" class="Symbol">}</a> <a id="15774" class="Symbol">-&gt;</a> <a id="15777" href="blog.Sequent.html#15771" class="Bound">Γ</a> <a id="15779" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15781" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a>
    <a id="STLC._⊢_.ℕ-intro-suc"></a><a id="15787" href="blog.Sequent.html#15787" class="InductiveConstructor">ℕ-intro-suc</a> <a id="15799" class="Symbol">:</a> <a id="15801" class="Symbol">∀{</a><a id="15803" href="blog.Sequent.html#15803" class="Bound">Γ</a><a id="15804" class="Symbol">}</a>
      <a id="15812" class="Symbol">-&gt;</a> <a id="15815" href="blog.Sequent.html#15803" class="Bound">Γ</a> <a id="15817" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15819" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a>
      <a id="15827" class="Symbol">-&gt;</a> <a id="15830" href="blog.Sequent.html#15803" class="Bound">Γ</a> <a id="15832" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15834" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a>

    <a id="STLC._⊢_.ℕ-elim"></a><a id="15841" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="15848" class="Symbol">:</a> <a id="15850" class="Symbol">∀{</a><a id="15852" href="blog.Sequent.html#15852" class="Bound">Γ</a> <a id="15854" href="blog.Sequent.html#15854" class="Bound">T</a><a id="15855" class="Symbol">}</a>
      <a id="15863" class="Symbol">-&gt;</a> <a id="15866" href="blog.Sequent.html#15852" class="Bound">Γ</a> <a id="15868" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15870" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a>
      <a id="15878" class="Symbol">-&gt;</a> <a id="15881" href="blog.Sequent.html#15852" class="Bound">Γ</a> <a id="15883" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15885" href="blog.Sequent.html#15854" class="Bound">T</a>
      <a id="15893" class="Symbol">-&gt;</a> <a id="15896" href="blog.Sequent.html#15852" class="Bound">Γ</a> <a id="15898" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="15900" href="blog.Sequent.html#15854" class="Bound">T</a> <a id="15902" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15904" href="blog.Sequent.html#15854" class="Bound">T</a>
      <a id="15912" class="Symbol">-&gt;</a> <a id="15915" href="blog.Sequent.html#15852" class="Bound">Γ</a> <a id="15917" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="15919" href="blog.Sequent.html#15854" class="Bound">T</a>
</pre>
#+END_EXPORT

** Renaming

Once again, we can apply renaming procedures to terms in contexts.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="STLC.Renaming"></a><a id="16033" href="blog.Sequent.html#16033" class="Function">Renaming</a> <a id="16042" class="Symbol">:</a> <a id="16044" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="16048" class="Symbol">-&gt;</a> <a id="16051" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="16055" class="Symbol">-&gt;</a> <a id="16058" href="Agda.Primitive.html#388" class="Primitive">Set</a>
  <a id="16064" href="blog.Sequent.html#16033" class="Function">Renaming</a> <a id="16073" href="blog.Sequent.html#16073" class="Bound">Γ</a> <a id="16075" href="blog.Sequent.html#16075" class="Bound">Δ</a> <a id="16077" class="Symbol">=</a> <a id="16079" class="Symbol">∀{</a><a id="16081" href="blog.Sequent.html#16081" class="Bound">T</a><a id="16082" class="Symbol">}</a> <a id="16084" class="Symbol">-&gt;</a> <a id="16087" href="blog.Sequent.html#16073" class="Bound">Γ</a> <a id="16089" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="16091" href="blog.Sequent.html#16081" class="Bound">T</a> <a id="16093" class="Symbol">-&gt;</a> <a id="16096" href="blog.Sequent.html#16075" class="Bound">Δ</a> <a id="16098" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="16100" href="blog.Sequent.html#16081" class="Bound">T</a>

  <a id="STLC.extend"></a><a id="16105" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16112" class="Symbol">:</a> <a id="16114" class="Symbol">∀{</a><a id="16116" href="blog.Sequent.html#16116" class="Bound">Γ</a> <a id="16118" href="blog.Sequent.html#16118" class="Bound">Δ</a> <a id="16120" href="blog.Sequent.html#16120" class="Bound">T</a><a id="16121" class="Symbol">}</a> <a id="16123" class="Symbol">-&gt;</a> <a id="16126" href="blog.Sequent.html#16033" class="Function">Renaming</a> <a id="16135" href="blog.Sequent.html#16116" class="Bound">Γ</a> <a id="16137" href="blog.Sequent.html#16118" class="Bound">Δ</a> <a id="16139" class="Symbol">-&gt;</a> <a id="16142" href="blog.Sequent.html#16033" class="Function">Renaming</a> <a id="16151" class="Symbol">(</a><a id="16152" href="blog.Sequent.html#16116" class="Bound">Γ</a> <a id="16154" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="16156" href="blog.Sequent.html#16120" class="Bound">T</a><a id="16157" class="Symbol">)</a> <a id="16159" class="Symbol">(</a><a id="16160" href="blog.Sequent.html#16118" class="Bound">Δ</a> <a id="16162" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="16164" href="blog.Sequent.html#16120" class="Bound">T</a><a id="16165" class="Symbol">)</a>
  <a id="16169" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16176" href="blog.Sequent.html#16176" class="Bound">r</a> <a id="16178" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a> <a id="16183" class="Symbol">=</a> <a id="16185" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a>
  <a id="16192" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16199" href="blog.Sequent.html#16199" class="Bound">r</a> <a id="16201" class="Symbol">(</a><a id="16202" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="16208" href="blog.Sequent.html#16208" class="Bound">ref</a><a id="16211" class="Symbol">)</a> <a id="16213" class="Symbol">=</a> <a id="16215" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="16221" class="Symbol">(</a><a id="16222" href="blog.Sequent.html#16199" class="Bound">r</a> <a id="16224" href="blog.Sequent.html#16208" class="Bound">ref</a><a id="16227" class="Symbol">)</a>

  <a id="STLC.rename"></a><a id="16232" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16239" class="Symbol">:</a> <a id="16241" class="Symbol">∀{</a><a id="16243" href="blog.Sequent.html#16243" class="Bound">Γ</a> <a id="16245" href="blog.Sequent.html#16245" class="Bound">Δ</a> <a id="16247" href="blog.Sequent.html#16247" class="Bound">T</a><a id="16248" class="Symbol">}</a> <a id="16250" class="Symbol">-&gt;</a> <a id="16253" href="blog.Sequent.html#16033" class="Function">Renaming</a> <a id="16262" href="blog.Sequent.html#16243" class="Bound">Γ</a> <a id="16264" href="blog.Sequent.html#16245" class="Bound">Δ</a> <a id="16266" class="Symbol">-&gt;</a> <a id="16269" href="blog.Sequent.html#16243" class="Bound">Γ</a> <a id="16271" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="16273" href="blog.Sequent.html#16247" class="Bound">T</a> <a id="16275" class="Symbol">-&gt;</a> <a id="16278" href="blog.Sequent.html#16245" class="Bound">Δ</a> <a id="16280" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="16282" href="blog.Sequent.html#16247" class="Bound">T</a>
  <a id="16286" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16293" href="blog.Sequent.html#16293" class="Bound">r</a> <a id="16295" class="Symbol">(</a><a id="16296" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="16300" href="blog.Sequent.html#16300" class="Bound">x</a><a id="16301" class="Symbol">)</a> <a id="16303" class="Symbol">=</a> <a id="16305" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="16309" class="Symbol">(</a><a id="16310" href="blog.Sequent.html#16293" class="Bound">r</a> <a id="16312" href="blog.Sequent.html#16300" class="Bound">x</a><a id="16313" class="Symbol">)</a>
  <a id="16317" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16324" href="blog.Sequent.html#16324" class="Bound">r</a> <a id="16326" href="blog.Sequent.html#15210" class="InductiveConstructor">unit-intro</a> <a id="16337" class="Symbol">=</a> <a id="16339" href="blog.Sequent.html#15210" class="InductiveConstructor">unit-intro</a>
  <a id="16352" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16359" href="blog.Sequent.html#16359" class="Bound">r</a> <a id="16361" class="Symbol">(</a><a id="16362" href="blog.Sequent.html#15244" class="InductiveConstructor">null-elim</a> <a id="16372" href="blog.Sequent.html#16372" class="Bound">t</a><a id="16373" class="Symbol">)</a> <a id="16375" class="Symbol">=</a> <a id="16377" href="blog.Sequent.html#15244" class="InductiveConstructor">null-elim</a> <a id="16387" class="Symbol">(</a><a id="16388" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16395" href="blog.Sequent.html#16359" class="Bound">r</a> <a id="16397" href="blog.Sequent.html#16372" class="Bound">t</a><a id="16398" class="Symbol">)</a>
  <a id="16402" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16409" href="blog.Sequent.html#16409" class="Bound">r</a> <a id="16411" class="Symbol">(</a><a id="16412" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="16416" href="blog.Sequent.html#16416" class="Bound">t</a><a id="16417" class="Symbol">)</a> <a id="16419" class="Symbol">=</a> <a id="16421" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="16425" class="Symbol">(</a><a id="16426" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16433" class="Symbol">(</a><a id="16434" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16441" href="blog.Sequent.html#16409" class="Bound">r</a><a id="16442" class="Symbol">)</a> <a id="16444" href="blog.Sequent.html#16416" class="Bound">t</a><a id="16445" class="Symbol">)</a>
  <a id="16449" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16456" href="blog.Sequent.html#16456" class="Bound">r</a> <a id="16458" class="Symbol">(</a><a id="16459" href="blog.Sequent.html#15406" class="InductiveConstructor">app</a> <a id="16463" href="blog.Sequent.html#16463" class="Bound">t</a> <a id="16465" href="blog.Sequent.html#16465" class="Bound">t₁</a><a id="16467" class="Symbol">)</a> <a id="16469" class="Symbol">=</a> <a id="16471" href="blog.Sequent.html#15406" class="InductiveConstructor">app</a> <a id="16475" class="Symbol">(</a><a id="16476" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16483" href="blog.Sequent.html#16456" class="Bound">r</a> <a id="16485" href="blog.Sequent.html#16463" class="Bound">t</a><a id="16486" class="Symbol">)</a> <a id="16488" class="Symbol">(</a><a id="16489" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16496" href="blog.Sequent.html#16456" class="Bound">r</a> <a id="16498" href="blog.Sequent.html#16465" class="Bound">t₁</a><a id="16500" class="Symbol">)</a>
  <a id="16504" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16511" href="blog.Sequent.html#16511" class="Bound">r</a> <a id="16513" class="Symbol">(</a><a id="16514" href="blog.Sequent.html#15460" class="InductiveConstructor">×-intro</a> <a id="16522" href="blog.Sequent.html#16522" class="Bound">t</a> <a id="16524" href="blog.Sequent.html#16524" class="Bound">t₁</a><a id="16526" class="Symbol">)</a> <a id="16528" class="Symbol">=</a> <a id="16530" href="blog.Sequent.html#15460" class="InductiveConstructor">×-intro</a> <a id="16538" class="Symbol">(</a><a id="16539" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16546" href="blog.Sequent.html#16511" class="Bound">r</a> <a id="16548" href="blog.Sequent.html#16522" class="Bound">t</a><a id="16549" class="Symbol">)</a> <a id="16551" class="Symbol">(</a><a id="16552" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16559" href="blog.Sequent.html#16511" class="Bound">r</a> <a id="16561" href="blog.Sequent.html#16524" class="Bound">t₁</a><a id="16563" class="Symbol">)</a>
  <a id="16567" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16574" href="blog.Sequent.html#16574" class="Bound">r</a> <a id="16576" class="Symbol">(</a><a id="16577" href="blog.Sequent.html#15514" class="InductiveConstructor">×-elim</a> <a id="16584" href="blog.Sequent.html#16584" class="Bound">s</a> <a id="16586" href="blog.Sequent.html#16586" class="Bound">t</a><a id="16587" class="Symbol">)</a> <a id="16589" class="Symbol">=</a> <a id="16591" href="blog.Sequent.html#15514" class="InductiveConstructor">×-elim</a> <a id="16598" class="Symbol">(</a><a id="16599" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16606" href="blog.Sequent.html#16574" class="Bound">r</a> <a id="16608" href="blog.Sequent.html#16584" class="Bound">s</a><a id="16609" class="Symbol">)</a> <a id="16611" class="Symbol">(</a><a id="16612" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16619" class="Symbol">(</a><a id="16620" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16627" class="Symbol">(</a><a id="16628" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16635" href="blog.Sequent.html#16574" class="Bound">r</a><a id="16636" class="Symbol">))</a> <a id="16639" href="blog.Sequent.html#16586" class="Bound">t</a><a id="16640" class="Symbol">)</a>
  <a id="16644" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16651" href="blog.Sequent.html#16651" class="Bound">r</a> <a id="16653" class="Symbol">(</a><a id="16654" href="blog.Sequent.html#15578" class="InductiveConstructor">+-intro-left</a> <a id="16667" href="blog.Sequent.html#16667" class="Bound">t</a><a id="16668" class="Symbol">)</a> <a id="16670" class="Symbol">=</a> <a id="16672" href="blog.Sequent.html#15578" class="InductiveConstructor">+-intro-left</a> <a id="16685" class="Symbol">(</a><a id="16686" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16693" href="blog.Sequent.html#16651" class="Bound">r</a> <a id="16695" href="blog.Sequent.html#16667" class="Bound">t</a><a id="16696" class="Symbol">)</a>
  <a id="16700" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16707" href="blog.Sequent.html#16707" class="Bound">r</a> <a id="16709" class="Symbol">(</a><a id="16710" href="blog.Sequent.html#15628" class="InductiveConstructor">+-intro-right</a> <a id="16724" href="blog.Sequent.html#16724" class="Bound">t</a><a id="16725" class="Symbol">)</a> <a id="16727" class="Symbol">=</a> <a id="16729" href="blog.Sequent.html#15628" class="InductiveConstructor">+-intro-right</a> <a id="16743" class="Symbol">(</a><a id="16744" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16751" href="blog.Sequent.html#16707" class="Bound">r</a> <a id="16753" href="blog.Sequent.html#16724" class="Bound">t</a><a id="16754" class="Symbol">)</a>
  <a id="16758" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16765" href="blog.Sequent.html#16765" class="Bound">r</a> <a id="16767" class="Symbol">(</a><a id="16768" href="blog.Sequent.html#15679" class="InductiveConstructor">+-elim</a> <a id="16775" href="blog.Sequent.html#16775" class="Bound">s</a> <a id="16777" href="blog.Sequent.html#16777" class="Bound">x</a> <a id="16779" href="blog.Sequent.html#16779" class="Bound">y</a><a id="16780" class="Symbol">)</a> <a id="16782" class="Symbol">=</a> <a id="16784" href="blog.Sequent.html#15679" class="InductiveConstructor">+-elim</a> <a id="16791" class="Symbol">(</a><a id="16792" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16799" href="blog.Sequent.html#16765" class="Bound">r</a> <a id="16801" href="blog.Sequent.html#16775" class="Bound">s</a><a id="16802" class="Symbol">)</a> <a id="16804" class="Symbol">(</a><a id="16805" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16812" class="Symbol">(</a><a id="16813" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16820" href="blog.Sequent.html#16765" class="Bound">r</a><a id="16821" class="Symbol">)</a> <a id="16823" href="blog.Sequent.html#16777" class="Bound">x</a><a id="16824" class="Symbol">)</a> <a id="16826" class="Symbol">(</a><a id="16827" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16834" class="Symbol">(</a><a id="16835" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="16842" href="blog.Sequent.html#16765" class="Bound">r</a><a id="16843" class="Symbol">)</a> <a id="16845" href="blog.Sequent.html#16779" class="Bound">y</a><a id="16846" class="Symbol">)</a>
  <a id="16850" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16857" href="blog.Sequent.html#16857" class="Bound">r</a> <a id="16859" href="blog.Sequent.html#15754" class="InductiveConstructor">ℕ-intro-zero</a> <a id="16872" class="Symbol">=</a> <a id="16874" href="blog.Sequent.html#15754" class="InductiveConstructor">ℕ-intro-zero</a>
  <a id="16889" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16896" href="blog.Sequent.html#16896" class="Bound">r</a> <a id="16898" class="Symbol">(</a><a id="16899" href="blog.Sequent.html#15787" class="InductiveConstructor">ℕ-intro-suc</a> <a id="16911" href="blog.Sequent.html#16911" class="Bound">t</a><a id="16912" class="Symbol">)</a> <a id="16914" class="Symbol">=</a> <a id="16916" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16923" href="blog.Sequent.html#16896" class="Bound">r</a> <a id="16925" href="blog.Sequent.html#16911" class="Bound">t</a>
  <a id="16929" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16936" href="blog.Sequent.html#16936" class="Bound">r</a> <a id="16938" class="Symbol">(</a><a id="16939" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="16946" href="blog.Sequent.html#16946" class="Bound">sub</a> <a id="16950" href="blog.Sequent.html#16950" class="Bound">z</a> <a id="16952" href="blog.Sequent.html#16952" class="Bound">s</a><a id="16953" class="Symbol">)</a> <a id="16955" class="Symbol">=</a> <a id="16957" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="16964" class="Symbol">(</a><a id="16965" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16972" href="blog.Sequent.html#16936" class="Bound">r</a> <a id="16974" href="blog.Sequent.html#16946" class="Bound">sub</a><a id="16977" class="Symbol">)</a> <a id="16979" class="Symbol">(</a><a id="16980" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="16987" href="blog.Sequent.html#16936" class="Bound">r</a> <a id="16989" href="blog.Sequent.html#16950" class="Bound">z</a><a id="16990" class="Symbol">)</a> <a id="16992" class="Symbol">(</a><a id="16993" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="17000" class="Symbol">(</a><a id="17001" href="blog.Sequent.html#16105" class="Function">extend</a> <a id="17008" href="blog.Sequent.html#16936" class="Bound">r</a><a id="17009" class="Symbol">)</a> <a id="17011" href="blog.Sequent.html#16952" class="Bound">s</a><a id="17012" class="Symbol">)</a>
</pre>
#+END_EXPORT

However, this time, because we are working with a programming language, we are
also interested in the *reduction rules* of our terms which did not exist before
for propositional logic. To be able to properly express reduction rules, we will
need a new type of transformations on terms: substitutions.

** Substitution

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="STLC.Substitution"></a><a id="17364" href="blog.Sequent.html#17364" class="Function">Substitution</a> <a id="17377" class="Symbol">:</a> <a id="17379" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="17383" class="Symbol">-&gt;</a> <a id="17386" href="blog.Sequent.html#14923" class="Datatype">Ctx</a> <a id="17390" class="Symbol">-&gt;</a> <a id="17393" href="Agda.Primitive.html#388" class="Primitive">Set</a>
  <a id="17399" href="blog.Sequent.html#17364" class="Function">Substitution</a> <a id="17412" href="blog.Sequent.html#17412" class="Bound">Γ</a> <a id="17414" href="blog.Sequent.html#17414" class="Bound">Δ</a> <a id="17416" class="Symbol">=</a> <a id="17418" class="Symbol">∀{</a><a id="17420" href="blog.Sequent.html#17420" class="Bound">T</a><a id="17421" class="Symbol">}</a> <a id="17423" class="Symbol">-&gt;</a> <a id="17426" href="blog.Sequent.html#17412" class="Bound">Γ</a> <a id="17428" href="blog.Sequent.html#14988" class="Datatype Operator">∋</a> <a id="17430" href="blog.Sequent.html#17420" class="Bound">T</a> <a id="17432" class="Symbol">-&gt;</a> <a id="17435" href="blog.Sequent.html#17414" class="Bound">Δ</a> <a id="17437" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="17439" href="blog.Sequent.html#17420" class="Bound">T</a>

  <a id="STLC.extend-sub"></a><a id="17444" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="17455" class="Symbol">:</a> <a id="17457" class="Symbol">∀{</a><a id="17459" href="blog.Sequent.html#17459" class="Bound">Γ</a> <a id="17461" href="blog.Sequent.html#17461" class="Bound">Δ</a> <a id="17463" href="blog.Sequent.html#17463" class="Bound">T</a><a id="17464" class="Symbol">}</a> <a id="17466" class="Symbol">-&gt;</a> <a id="17469" href="blog.Sequent.html#17364" class="Function">Substitution</a> <a id="17482" href="blog.Sequent.html#17459" class="Bound">Γ</a> <a id="17484" href="blog.Sequent.html#17461" class="Bound">Δ</a> <a id="17486" class="Symbol">-&gt;</a> <a id="17489" href="blog.Sequent.html#17364" class="Function">Substitution</a> <a id="17502" class="Symbol">(</a><a id="17503" href="blog.Sequent.html#17459" class="Bound">Γ</a> <a id="17505" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="17507" href="blog.Sequent.html#17463" class="Bound">T</a><a id="17508" class="Symbol">)</a> <a id="17510" class="Symbol">(</a><a id="17511" href="blog.Sequent.html#17461" class="Bound">Δ</a> <a id="17513" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="17515" href="blog.Sequent.html#17463" class="Bound">T</a><a id="17516" class="Symbol">)</a>
  <a id="17520" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="17531" href="blog.Sequent.html#17531" class="Bound">σ</a> <a id="17533" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a> <a id="17538" class="Symbol">=</a> <a id="17540" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="17544" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a>
  <a id="17551" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="17562" href="blog.Sequent.html#17562" class="Bound">σ</a> <a id="17564" class="Symbol">(</a><a id="17565" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="17571" href="blog.Sequent.html#17571" class="Bound">t</a><a id="17572" class="Symbol">)</a> <a id="17574" class="Symbol">=</a> <a id="17576" href="blog.Sequent.html#16232" class="Function">rename</a> <a id="17583" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="17589" class="Symbol">(</a><a id="17590" href="blog.Sequent.html#17562" class="Bound">σ</a> <a id="17592" href="blog.Sequent.html#17571" class="Bound">t</a><a id="17593" class="Symbol">)</a>

  <a id="STLC.substitute"></a><a id="17598" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17609" class="Symbol">:</a> <a id="17611" class="Symbol">∀{</a><a id="17613" href="blog.Sequent.html#17613" class="Bound">Γ</a> <a id="17615" href="blog.Sequent.html#17615" class="Bound">Δ</a> <a id="17617" href="blog.Sequent.html#17617" class="Bound">T</a><a id="17618" class="Symbol">}</a> <a id="17620" class="Symbol">-&gt;</a> <a id="17623" href="blog.Sequent.html#17364" class="Function">Substitution</a> <a id="17636" href="blog.Sequent.html#17613" class="Bound">Γ</a> <a id="17638" href="blog.Sequent.html#17615" class="Bound">Δ</a> <a id="17640" class="Symbol">-&gt;</a> <a id="17643" href="blog.Sequent.html#17613" class="Bound">Γ</a> <a id="17645" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="17647" href="blog.Sequent.html#17617" class="Bound">T</a> <a id="17649" class="Symbol">-&gt;</a> <a id="17652" href="blog.Sequent.html#17615" class="Bound">Δ</a> <a id="17654" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="17656" href="blog.Sequent.html#17617" class="Bound">T</a>
  <a id="17660" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17671" href="blog.Sequent.html#17671" class="Bound">σ</a> <a id="17673" class="Symbol">(</a><a id="17674" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="17678" href="blog.Sequent.html#17678" class="Bound">x</a><a id="17679" class="Symbol">)</a> <a id="17681" class="Symbol">=</a> <a id="17683" href="blog.Sequent.html#17671" class="Bound">σ</a> <a id="17685" href="blog.Sequent.html#17678" class="Bound">x</a>
  <a id="17689" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17700" href="blog.Sequent.html#17700" class="Bound">σ</a> <a id="17702" href="blog.Sequent.html#15210" class="InductiveConstructor">unit-intro</a> <a id="17713" class="Symbol">=</a> <a id="17715" href="blog.Sequent.html#15210" class="InductiveConstructor">unit-intro</a>
  <a id="17728" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17739" href="blog.Sequent.html#17739" class="Bound">σ</a> <a id="17741" class="Symbol">(</a><a id="17742" href="blog.Sequent.html#15244" class="InductiveConstructor">null-elim</a> <a id="17752" href="blog.Sequent.html#17752" class="Bound">t</a><a id="17753" class="Symbol">)</a> <a id="17755" class="Symbol">=</a> <a id="17757" href="blog.Sequent.html#15244" class="InductiveConstructor">null-elim</a> <a id="17767" class="Symbol">(</a><a id="17768" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17779" href="blog.Sequent.html#17739" class="Bound">σ</a> <a id="17781" href="blog.Sequent.html#17752" class="Bound">t</a><a id="17782" class="Symbol">)</a>
  <a id="17786" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17797" href="blog.Sequent.html#17797" class="Bound">σ</a> <a id="17799" class="Symbol">(</a><a id="17800" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="17804" href="blog.Sequent.html#17804" class="Bound">t</a><a id="17805" class="Symbol">)</a> <a id="17807" class="Symbol">=</a> <a id="17809" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="17813" class="Symbol">(</a><a id="17814" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17825" class="Symbol">(</a><a id="17826" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="17837" href="blog.Sequent.html#17797" class="Bound">σ</a><a id="17838" class="Symbol">)</a> <a id="17840" href="blog.Sequent.html#17804" class="Bound">t</a><a id="17841" class="Symbol">)</a>
  <a id="17845" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17856" href="blog.Sequent.html#17856" class="Bound">σ</a> <a id="17858" class="Symbol">(</a><a id="17859" href="blog.Sequent.html#15406" class="InductiveConstructor">app</a> <a id="17863" href="blog.Sequent.html#17863" class="Bound">t</a> <a id="17865" href="blog.Sequent.html#17865" class="Bound">t₁</a><a id="17867" class="Symbol">)</a> <a id="17869" class="Symbol">=</a> <a id="17871" href="blog.Sequent.html#15406" class="InductiveConstructor">app</a> <a id="17875" class="Symbol">(</a><a id="17876" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17887" href="blog.Sequent.html#17856" class="Bound">σ</a> <a id="17889" href="blog.Sequent.html#17863" class="Bound">t</a><a id="17890" class="Symbol">)</a> <a id="17892" class="Symbol">(</a><a id="17893" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17904" href="blog.Sequent.html#17856" class="Bound">σ</a> <a id="17906" href="blog.Sequent.html#17865" class="Bound">t₁</a><a id="17908" class="Symbol">)</a>
  <a id="17912" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17923" href="blog.Sequent.html#17923" class="Bound">σ</a> <a id="17925" class="Symbol">(</a><a id="17926" href="blog.Sequent.html#15460" class="InductiveConstructor">×-intro</a> <a id="17934" href="blog.Sequent.html#17934" class="Bound">t</a> <a id="17936" href="blog.Sequent.html#17936" class="Bound">t₁</a><a id="17938" class="Symbol">)</a> <a id="17940" class="Symbol">=</a> <a id="17942" href="blog.Sequent.html#15460" class="InductiveConstructor">×-intro</a> <a id="17950" class="Symbol">(</a><a id="17951" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17962" href="blog.Sequent.html#17923" class="Bound">σ</a> <a id="17964" href="blog.Sequent.html#17934" class="Bound">t</a><a id="17965" class="Symbol">)</a> <a id="17967" class="Symbol">(</a><a id="17968" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17979" href="blog.Sequent.html#17923" class="Bound">σ</a> <a id="17981" href="blog.Sequent.html#17936" class="Bound">t₁</a><a id="17983" class="Symbol">)</a>
  <a id="17987" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="17998" href="blog.Sequent.html#17998" class="Bound">σ</a> <a id="18000" class="Symbol">(</a><a id="18001" href="blog.Sequent.html#15514" class="InductiveConstructor">×-elim</a> <a id="18008" href="blog.Sequent.html#18008" class="Bound">s</a> <a id="18010" href="blog.Sequent.html#18010" class="Bound">b</a><a id="18011" class="Symbol">)</a> <a id="18013" class="Symbol">=</a> <a id="18015" href="blog.Sequent.html#15514" class="InductiveConstructor">×-elim</a> <a id="18022" class="Symbol">(</a><a id="18023" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18034" href="blog.Sequent.html#17998" class="Bound">σ</a> <a id="18036" href="blog.Sequent.html#18008" class="Bound">s</a><a id="18037" class="Symbol">)</a> <a id="18039" class="Symbol">(</a><a id="18040" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18051" class="Symbol">(</a><a id="18052" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="18063" class="Symbol">(</a><a id="18064" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="18075" href="blog.Sequent.html#17998" class="Bound">σ</a><a id="18076" class="Symbol">))</a> <a id="18079" href="blog.Sequent.html#18010" class="Bound">b</a><a id="18080" class="Symbol">)</a>
  <a id="18084" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18095" href="blog.Sequent.html#18095" class="Bound">σ</a> <a id="18097" class="Symbol">(</a><a id="18098" href="blog.Sequent.html#15578" class="InductiveConstructor">+-intro-left</a> <a id="18111" href="blog.Sequent.html#18111" class="Bound">t</a><a id="18112" class="Symbol">)</a> <a id="18114" class="Symbol">=</a> <a id="18116" href="blog.Sequent.html#15578" class="InductiveConstructor">+-intro-left</a> <a id="18129" class="Symbol">(</a><a id="18130" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18141" href="blog.Sequent.html#18095" class="Bound">σ</a> <a id="18143" href="blog.Sequent.html#18111" class="Bound">t</a><a id="18144" class="Symbol">)</a>
  <a id="18148" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18159" href="blog.Sequent.html#18159" class="Bound">σ</a> <a id="18161" class="Symbol">(</a><a id="18162" href="blog.Sequent.html#15628" class="InductiveConstructor">+-intro-right</a> <a id="18176" href="blog.Sequent.html#18176" class="Bound">t</a><a id="18177" class="Symbol">)</a> <a id="18179" class="Symbol">=</a> <a id="18181" href="blog.Sequent.html#15628" class="InductiveConstructor">+-intro-right</a> <a id="18195" class="Symbol">(</a><a id="18196" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18207" href="blog.Sequent.html#18159" class="Bound">σ</a> <a id="18209" href="blog.Sequent.html#18176" class="Bound">t</a><a id="18210" class="Symbol">)</a>
  <a id="18214" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18225" href="blog.Sequent.html#18225" class="Bound">σ</a> <a id="18227" class="Symbol">(</a><a id="18228" href="blog.Sequent.html#15679" class="InductiveConstructor">+-elim</a> <a id="18235" href="blog.Sequent.html#18235" class="Bound">s</a> <a id="18237" href="blog.Sequent.html#18237" class="Bound">x</a> <a id="18239" href="blog.Sequent.html#18239" class="Bound">y</a><a id="18240" class="Symbol">)</a> <a id="18242" class="Symbol">=</a> <a id="18244" href="blog.Sequent.html#15679" class="InductiveConstructor">+-elim</a> <a id="18251" class="Symbol">(</a><a id="18252" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18263" href="blog.Sequent.html#18225" class="Bound">σ</a> <a id="18265" href="blog.Sequent.html#18235" class="Bound">s</a><a id="18266" class="Symbol">)</a> <a id="18268" class="Symbol">(</a><a id="18269" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18280" class="Symbol">(</a><a id="18281" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="18292" href="blog.Sequent.html#18225" class="Bound">σ</a><a id="18293" class="Symbol">)</a> <a id="18295" href="blog.Sequent.html#18237" class="Bound">x</a><a id="18296" class="Symbol">)</a> <a id="18298" class="Symbol">(</a><a id="18299" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18310" class="Symbol">(</a><a id="18311" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="18322" href="blog.Sequent.html#18225" class="Bound">σ</a><a id="18323" class="Symbol">)</a> <a id="18325" href="blog.Sequent.html#18239" class="Bound">y</a><a id="18326" class="Symbol">)</a>
  <a id="18330" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18341" href="blog.Sequent.html#18341" class="Bound">σ</a> <a id="18343" href="blog.Sequent.html#15754" class="InductiveConstructor">ℕ-intro-zero</a> <a id="18356" class="Symbol">=</a> <a id="18358" href="blog.Sequent.html#15754" class="InductiveConstructor">ℕ-intro-zero</a>
  <a id="18373" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18384" href="blog.Sequent.html#18384" class="Bound">σ</a> <a id="18386" class="Symbol">(</a><a id="18387" href="blog.Sequent.html#15787" class="InductiveConstructor">ℕ-intro-suc</a> <a id="18399" href="blog.Sequent.html#18399" class="Bound">t</a><a id="18400" class="Symbol">)</a> <a id="18402" class="Symbol">=</a> <a id="18404" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18415" href="blog.Sequent.html#18384" class="Bound">σ</a> <a id="18417" href="blog.Sequent.html#18399" class="Bound">t</a>
  <a id="18421" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18432" href="blog.Sequent.html#18432" class="Bound">σ</a> <a id="18434" class="Symbol">(</a><a id="18435" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="18442" href="blog.Sequent.html#18442" class="Bound">sub</a> <a id="18446" href="blog.Sequent.html#18446" class="Bound">z</a> <a id="18448" href="blog.Sequent.html#18448" class="Bound">s</a><a id="18449" class="Symbol">)</a> <a id="18451" class="Symbol">=</a> <a id="18453" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="18460" class="Symbol">(</a><a id="18461" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18472" href="blog.Sequent.html#18432" class="Bound">σ</a> <a id="18474" href="blog.Sequent.html#18442" class="Bound">sub</a><a id="18477" class="Symbol">)</a> <a id="18479" class="Symbol">(</a><a id="18480" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18491" href="blog.Sequent.html#18432" class="Bound">σ</a> <a id="18493" href="blog.Sequent.html#18446" class="Bound">z</a><a id="18494" class="Symbol">)</a> <a id="18496" class="Symbol">(</a><a id="18497" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18508" class="Symbol">(</a><a id="18509" href="blog.Sequent.html#17444" class="Function">extend-sub</a> <a id="18520" href="blog.Sequent.html#18432" class="Bound">σ</a><a id="18521" class="Symbol">)</a> <a id="18523" href="blog.Sequent.html#18448" class="Bound">s</a><a id="18524" class="Symbol">)</a>

  <a id="18529" class="Comment">-- Special syntax for single variable substitution that we will use later</a>
  <a id="STLC._[_]"></a><a id="18605" href="blog.Sequent.html#18605" class="Function Operator">_[_]</a> <a id="18610" class="Symbol">:</a> <a id="18612" class="Symbol">∀{</a><a id="18614" href="blog.Sequent.html#18614" class="Bound">Γ</a> <a id="18616" href="blog.Sequent.html#18616" class="Bound">T</a> <a id="18618" href="blog.Sequent.html#18618" class="Bound">S</a><a id="18619" class="Symbol">}</a> <a id="18621" class="Symbol">-&gt;</a> <a id="18624" href="blog.Sequent.html#18614" class="Bound">Γ</a> <a id="18626" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="18628" href="blog.Sequent.html#18616" class="Bound">T</a> <a id="18630" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="18632" href="blog.Sequent.html#18618" class="Bound">S</a> <a id="18634" class="Symbol">-&gt;</a> <a id="18637" href="blog.Sequent.html#18614" class="Bound">Γ</a> <a id="18639" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="18641" href="blog.Sequent.html#18616" class="Bound">T</a> <a id="18643" class="Symbol">-&gt;</a> <a id="18646" href="blog.Sequent.html#18614" class="Bound">Γ</a> <a id="18648" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="18650" href="blog.Sequent.html#18618" class="Bound">S</a>
  <a id="18654" href="blog.Sequent.html#18654" class="Bound">a</a> <a id="18656" href="blog.Sequent.html#18605" class="Function Operator">[</a> <a id="18658" href="blog.Sequent.html#18658" class="Bound">b</a> <a id="18660" href="blog.Sequent.html#18605" class="Function Operator">]</a> <a id="18662" class="Symbol">=</a> <a id="18664" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18675" class="Symbol">(λ</a> <a id="18678" class="Symbol">{</a> <a id="18680" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a> <a id="18685" class="Symbol">→</a> <a id="18687" href="blog.Sequent.html#18658" class="Bound">b</a>
                          <a id="18715" class="Symbol">;</a> <a id="18717" class="Symbol">(</a><a id="18718" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="18724" href="blog.Sequent.html#18724" class="Bound">x</a><a id="18725" class="Symbol">)</a> <a id="18727" class="Symbol">→</a> <a id="18729" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="18733" href="blog.Sequent.html#18724" class="Bound">x</a><a id="18734" class="Symbol">})</a> <a id="18737" href="blog.Sequent.html#18654" class="Bound">a</a>

  <a id="18742" class="Keyword">infix</a> <a id="18748" class="Number">6</a> <a id="18750" href="blog.Sequent.html#18605" class="Function Operator">_[_]</a>

  <a id="STLC._`"></a><a id="18758" href="blog.Sequent.html#18758" class="Function Operator">_`</a> <a id="18761" class="Symbol">:</a> <a id="18763" class="Symbol">∀{</a><a id="18765" href="blog.Sequent.html#18765" class="Bound">Γ</a> <a id="18767" href="blog.Sequent.html#18767" class="Bound">T</a> <a id="18769" href="blog.Sequent.html#18769" class="Bound">S</a><a id="18770" class="Symbol">}</a> <a id="18772" class="Symbol">-&gt;</a> <a id="18775" href="blog.Sequent.html#18765" class="Bound">Γ</a> <a id="18777" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="18779" href="blog.Sequent.html#18769" class="Bound">S</a> <a id="18781" class="Symbol">-&gt;</a> <a id="18784" href="blog.Sequent.html#18765" class="Bound">Γ</a> <a id="18786" href="blog.Sequent.html#14955" class="InductiveConstructor Operator">,</a> <a id="18788" href="blog.Sequent.html#18767" class="Bound">T</a> <a id="18790" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="18792" href="blog.Sequent.html#18769" class="Bound">S</a>
  <a id="18796" href="blog.Sequent.html#18796" class="Bound">t</a> <a id="18798" href="blog.Sequent.html#18758" class="Function Operator">`</a>  <a id="18801" class="Symbol">=</a> <a id="18803" href="blog.Sequent.html#17598" class="Function">substitute</a> <a id="18814" class="Symbol">(λ</a> <a id="18817" href="blog.Sequent.html#18817" class="Bound">x</a> <a id="18819" class="Symbol">→</a> <a id="18821" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="18825" class="Symbol">(</a><a id="18826" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="18832" href="blog.Sequent.html#18817" class="Bound">x</a><a id="18833" class="Symbol">))</a> <a id="18836" href="blog.Sequent.html#18796" class="Bound">t</a>
</pre>
#+END_EXPORT

Note: If you think that the definition of substitution and renaming are very
similar, you are right. This is because the term is a functor (through rename)
and also a monad (through substitute). In fact, I have (kind of) explored the
relation between substitution and renaming an earlier post [[id:6d25ece7-27de-4847-a5d8-a5586c72bc6f][Well scoped lambda
terms]].

Now that we are done with defining every necessary required concept, we can
write down our reduction rules!

** Naturals

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="STLC.plus"></a><a id="19356" href="blog.Sequent.html#19356" class="Function">plus</a> <a id="19361" class="Symbol">:</a> <a id="19363" class="Symbol">∀{</a><a id="19365" href="blog.Sequent.html#19365" class="Bound">Γ</a><a id="19366" class="Symbol">}</a> <a id="19368" class="Symbol">-&gt;</a> <a id="19371" href="blog.Sequent.html#19365" class="Bound">Γ</a> <a id="19373" href="blog.Sequent.html#15139" class="Datatype Operator">⊢</a> <a id="19375" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a> <a id="19377" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">=&gt;</a> <a id="19380" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a> <a id="19382" href="blog.Sequent.html#14756" class="InductiveConstructor Operator">=&gt;</a> <a id="19385" href="blog.Sequent.html#14851" class="InductiveConstructor">ℕ</a>
  <a id="19389" href="blog.Sequent.html#19356" class="Function">plus</a> <a id="19394" class="Symbol">=</a> <a id="19396" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="19400" class="Symbol">(</a><a id="19401" href="blog.Sequent.html#15329" class="InductiveConstructor">abs</a> <a id="19405" class="Symbol">(</a><a id="19406" href="blog.Sequent.html#15841" class="InductiveConstructor">ℕ-elim</a> <a id="19413" class="Symbol">(</a><a id="19414" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="19418" class="Symbol">(</a><a id="19419" href="blog.Sequent.html#15054" class="InductiveConstructor">there</a> <a id="19425" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a><a id="19429" class="Symbol">))</a> <a id="19432" class="Symbol">(</a><a id="19433" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="19437" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a><a id="19441" class="Symbol">)</a> <a id="19443" class="Symbol">(</a><a id="19444" href="blog.Sequent.html#15787" class="InductiveConstructor">ℕ-intro-suc</a> <a id="19456" class="Symbol">(</a><a id="19457" href="blog.Sequent.html#15174" class="InductiveConstructor">var</a> <a id="19461" href="blog.Sequent.html#15023" class="InductiveConstructor">here</a><a id="19465" class="Symbol">))))</a>


  <a id="19474" class="Comment">-- _ : ∀{Γ}</a>
  <a id="19488" class="Comment">--   -&gt; app {Γ} (app plus (ℕ-intro-suc (ℕ-intro-suc ℕ-intro-zero))) (ℕ-intro-suc (ℕ-intro-suc ℕ-intro-zero))</a>
  <a id="19599" class="Comment">--      ~~&gt; (ℕ-intro-suc (ℕ-intro-suc (ℕ-intro-suc (ℕ-intro-suc ℕ-intro-zero))))</a>
  <a id="19682" class="Comment">-- _ = {!!}</a>
</pre>
#+END_EXPORT

* System F

#+BEGIN_EXPORT html
<pre class="Agda">
<a id="19735" class="Keyword">module</a> <a id="SystemF"></a><a id="19742" href="blog.Sequent.html#19742" class="Module">SystemF</a> <a id="19750" class="Keyword">where</a>
  <a id="19758" class="Keyword">infix</a> <a id="19764" class="Number">2</a> <a id="19766" href="blog.Sequent.html#21269" class="Datatype Operator">_⊢_</a> <a id="19770" href="blog.Sequent.html#21116" class="Datatype Operator">_⊢*</a> <a id="19774" href="blog.Sequent.html#21429" class="Datatype Operator">_∋*</a> <a id="19778" href="blog.Sequent.html#21596" class="Datatype Operator">_∋_</a>
  <a id="19784" class="Keyword">infixl</a> <a id="19791" class="Number">3</a> <a id="19793" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">_,_</a> <a id="19797" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">_,*</a>
  <a id="19803" class="Keyword">infixr</a> <a id="19810" class="Number">4</a> <a id="19812" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">_=&gt;_</a>
  <a id="19819" class="Keyword">infixr</a> <a id="19826" class="Number">5</a> <a id="19828" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">_+_</a>
  <a id="19834" class="Keyword">infixr</a> <a id="19841" class="Number">6</a> <a id="19843" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">_×_</a>
</pre>
#+END_EXPORT

[[https://en.wikipedia.org/wiki/System_F][System F]] extends the simply typed lambda calculus with type quantification. This
means that in System F, it is possible to give a type to the polymorphic
identity function

\[ \Lambda \alpha. \lambda x_\alpha.x : \forall \alpha. \alpha \Rightarrow \alpha \]

However, formalizing System F in agda will be harder than for the simply typed
\lambda-calculus for a couple of reasons:

1. In the STLC, a context is simply a list of types and types don't depend on
   anytying. In System F, a type depends on its context.
2. In the STLC, there are no type variable. Every type is concrete. This is not
   the case for System F in which types AND terms might refer to type variables.

Because we don't have the nice "terms depend on contexts depend on types depend
on nothing" hierarchy, we will use Agda's ~interleaved mutual~ block to define
everyting all at once and let us express the cyclic dependencies.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="20826" class="Keyword">interleaved</a> <a id="20838" class="Keyword">mutual</a>
</pre>
#+END_EXPORT

Our formalization will be made of five different entities.

- Contexts which contain term and type variables.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="20989" class="Keyword">data</a> <a id="SystemF.Ctx"></a><a id="20994" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="20998" class="Symbol">:</a> <a id="21000" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

- Types where a \( \Gamma \vdash * \) is a type in context \( \Gamma \).

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="21111" class="Keyword">data</a> <a id="SystemF._⊢*"></a><a id="21116" href="blog.Sequent.html#21116" class="Datatype Operator">_⊢*</a> <a id="21120" class="Symbol">:</a> <a id="21122" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="21126" class="Symbol">-&gt;</a> <a id="21129" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT
- Terms where a \( \Gamma \vdash \tau \) means a term of type \( \tau \) in context \( \Gamma \).

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="21264" class="Keyword">data</a> <a id="SystemF._⊢_"></a><a id="21269" href="blog.Sequent.html#21269" class="Datatype Operator">_⊢_</a> <a id="21273" class="Symbol">:</a> <a id="21275" class="Symbol">(</a><a id="21276" href="blog.Sequent.html#21276" class="Bound">Γ</a> <a id="21278" class="Symbol">:</a> <a id="21280" href="blog.Sequent.html#20994" class="Datatype">Ctx</a><a id="21283" class="Symbol">)</a> <a id="21285" class="Symbol">-&gt;</a> <a id="21288" href="blog.Sequent.html#21276" class="Bound">Γ</a> <a id="21290" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="21293" class="Symbol">-&gt;</a> <a id="21296" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

- Type variables where a \( \Gamma \ni * \)  refers to some type variable in the context.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="21424" class="Keyword">data</a> <a id="SystemF._∋*"></a><a id="21429" href="blog.Sequent.html#21429" class="Datatype Operator">_∋*</a> <a id="21433" class="Symbol">:</a> <a id="21435" class="Symbol">(</a><a id="21436" href="blog.Sequent.html#21436" class="Bound">Γ</a> <a id="21438" class="Symbol">:</a> <a id="21440" href="blog.Sequent.html#20994" class="Datatype">Ctx</a><a id="21443" class="Symbol">)</a> <a id="21445" class="Symbol">-&gt;</a> <a id="21448" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

- Term variables where a \( \Gamma \ni \tau \) refers to a variable of type \( \tau \)
  in the context.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="21591" class="Keyword">data</a> <a id="SystemF._∋_"></a><a id="21596" href="blog.Sequent.html#21596" class="Datatype Operator">_∋_</a> <a id="21600" class="Symbol">:</a> <a id="21602" class="Symbol">(</a><a id="21603" href="blog.Sequent.html#21603" class="Bound">Γ</a> <a id="21605" class="Symbol">:</a> <a id="21607" href="blog.Sequent.html#20994" class="Datatype">Ctx</a><a id="21610" class="Symbol">)</a> <a id="21612" class="Symbol">-&gt;</a> <a id="21615" href="blog.Sequent.html#21603" class="Bound">Γ</a> <a id="21617" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="21620" class="Symbol">-&gt;</a> <a id="21623" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

** Context

In the STLC, a context was a list of the term variable's types. Now, it will be
containing two things: the (term level) variable's types (in the polymorphic
identity function, we had \( x : \alpha \)) and the type variables themselves (\(
\alpha : * \)).

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="21928" class="Keyword">data</a> <a id="21933" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="21937" class="Keyword">where</a>
      <a id="SystemF.Ctx.●"></a><a id="21949" href="blog.Sequent.html#21949" class="InductiveConstructor">●</a> <a id="21951" class="Symbol">:</a> <a id="21953" href="blog.Sequent.html#20994" class="Datatype">Ctx</a>
      <a id="21963" class="Comment">-- Term level variables of type t</a>
      <a id="SystemF.Ctx._,_"></a><a id="22003" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">_,_</a> <a id="22007" class="Symbol">:</a> <a id="22009" class="Symbol">(</a><a id="22010" href="blog.Sequent.html#22010" class="Bound">Γ</a> <a id="22012" class="Symbol">:</a> <a id="22014" href="blog.Sequent.html#20994" class="Datatype">Ctx</a><a id="22017" class="Symbol">)</a> <a id="22019" class="Symbol">-&gt;</a> <a id="22022" class="Symbol">(</a><a id="22023" href="blog.Sequent.html#22023" class="Bound">t</a> <a id="22025" class="Symbol">:</a> <a id="22027" href="blog.Sequent.html#22010" class="Bound">Γ</a> <a id="22029" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22031" class="Symbol">)</a> <a id="22033" class="Symbol">-&gt;</a> <a id="22036" href="blog.Sequent.html#20994" class="Datatype">Ctx</a>
      <a id="22046" class="Comment">-- Type level variables</a>
      <a id="SystemF.Ctx._,*"></a><a id="22076" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">_,*</a> <a id="22080" class="Symbol">:</a> <a id="22082" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="22086" class="Symbol">-&gt;</a> <a id="22089" href="blog.Sequent.html#20994" class="Datatype">Ctx</a>
</pre>
#+END_EXPORT

** Type references

When a type exists in a context, it may refer to type variables in the context.
Since our context now contains to kinds of variables (type variables and term
variables), we have to account for this by adding a constructor ~skip~ .

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="22378" class="Keyword">data</a> <a id="22383" href="blog.Sequent.html#21429" class="Datatype Operator">_∋*</a> <a id="22387" class="Keyword">where</a>
      <a id="SystemF._∋*.here"></a><a id="22399" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="22404" class="Symbol">:</a> <a id="22406" class="Symbol">∀{</a><a id="22408" href="blog.Sequent.html#22408" class="Bound">Γ</a><a id="22409" class="Symbol">}</a> <a id="22411" class="Symbol">-&gt;</a> <a id="22414" href="blog.Sequent.html#22408" class="Bound">Γ</a> <a id="22416" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="22419" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a>
      <a id="SystemF._∋*.there"></a><a id="22428" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="22434" class="Symbol">:</a> <a id="22436" class="Symbol">∀{</a><a id="22438" href="blog.Sequent.html#22438" class="Bound">Γ</a><a id="22439" class="Symbol">}</a> <a id="22441" class="Symbol">-&gt;</a> <a id="22444" href="blog.Sequent.html#22438" class="Bound">Γ</a> <a id="22446" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a> <a id="22449" class="Symbol">-&gt;</a> <a id="22452" href="blog.Sequent.html#22438" class="Bound">Γ</a> <a id="22454" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="22457" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a>
      <a id="SystemF._∋*.skip"></a><a id="22466" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="22471" class="Symbol">:</a> <a id="22473" class="Symbol">∀{</a><a id="22475" href="blog.Sequent.html#22475" class="Bound">Γ</a><a id="22476" class="Symbol">}</a> <a id="22478" class="Symbol">{</a><a id="22479" href="blog.Sequent.html#22479" class="Bound">t</a> <a id="22481" class="Symbol">:</a> <a id="22483" href="blog.Sequent.html#22475" class="Bound">Γ</a> <a id="22485" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22487" class="Symbol">}</a> <a id="22489" class="Symbol">-&gt;</a> <a id="22492" href="blog.Sequent.html#22475" class="Bound">Γ</a> <a id="22494" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a> <a id="22497" class="Symbol">-&gt;</a> <a id="22500" href="blog.Sequent.html#22475" class="Bound">Γ</a> <a id="22502" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="22504" href="blog.Sequent.html#22479" class="Bound">t</a> <a id="22506" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a>
</pre>
#+END_EXPORT

** Types

The universe of types is very similar to what we had in the STLC, but this time,
it depends on the context in which the type lives. Most old types that we had in
the STLC, don't change much.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="22744" class="Keyword">data</a> <a id="22749" href="blog.Sequent.html#21116" class="Datatype Operator">_⊢*</a> <a id="22753" class="Keyword">where</a>
      <a id="SystemF._⊢*.⊤"></a><a id="22765" href="blog.Sequent.html#22765" class="InductiveConstructor">⊤</a> <a id="22767" class="Symbol">:</a> <a id="22769" class="Symbol">∀{</a><a id="22771" href="blog.Sequent.html#22771" class="Bound">Γ</a><a id="22772" class="Symbol">}</a> <a id="22774" class="Symbol">-&gt;</a> <a id="22777" href="blog.Sequent.html#22771" class="Bound">Γ</a> <a id="22779" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
      <a id="SystemF._⊢*.⊥"></a><a id="22788" href="blog.Sequent.html#22788" class="InductiveConstructor">⊥</a> <a id="22790" class="Symbol">:</a> <a id="22792" class="Symbol">∀{</a><a id="22794" href="blog.Sequent.html#22794" class="Bound">Γ</a><a id="22795" class="Symbol">}</a> <a id="22797" class="Symbol">-&gt;</a> <a id="22800" href="blog.Sequent.html#22794" class="Bound">Γ</a> <a id="22802" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

      <a id="SystemF._⊢*._×_"></a><a id="22812" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">_×_</a> <a id="22816" class="Symbol">:</a> <a id="22818" class="Symbol">∀{</a><a id="22820" href="blog.Sequent.html#22820" class="Bound">Γ</a><a id="22821" class="Symbol">}</a> <a id="22823" class="Symbol">(</a><a id="22824" href="blog.Sequent.html#22824" class="Bound">a</a> <a id="22826" class="Symbol">:</a> <a id="22828" href="blog.Sequent.html#22820" class="Bound">Γ</a> <a id="22830" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22832" class="Symbol">)</a> <a id="22834" class="Symbol">(</a><a id="22835" href="blog.Sequent.html#22835" class="Bound">b</a> <a id="22837" class="Symbol">:</a> <a id="22839" href="blog.Sequent.html#22820" class="Bound">Γ</a> <a id="22841" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22843" class="Symbol">)</a>
        <a id="22853" class="Symbol">-&gt;</a> <a id="22856" href="blog.Sequent.html#22820" class="Bound">Γ</a> <a id="22858" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

      <a id="SystemF._⊢*._+_"></a><a id="22868" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">_+_</a> <a id="22872" class="Symbol">:</a> <a id="22874" class="Symbol">∀{</a><a id="22876" href="blog.Sequent.html#22876" class="Bound">Γ</a><a id="22877" class="Symbol">}</a> <a id="22879" class="Symbol">(</a><a id="22880" href="blog.Sequent.html#22880" class="Bound">a</a> <a id="22882" class="Symbol">:</a> <a id="22884" href="blog.Sequent.html#22876" class="Bound">Γ</a> <a id="22886" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22888" class="Symbol">)</a> <a id="22890" class="Symbol">(</a><a id="22891" href="blog.Sequent.html#22891" class="Bound">b</a> <a id="22893" class="Symbol">:</a> <a id="22895" href="blog.Sequent.html#22876" class="Bound">Γ</a> <a id="22897" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22899" class="Symbol">)</a>
        <a id="22909" class="Symbol">-&gt;</a> <a id="22912" href="blog.Sequent.html#22876" class="Bound">Γ</a> <a id="22914" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

      <a id="SystemF._⊢*._=&gt;_"></a><a id="22924" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">_=&gt;_</a> <a id="22929" class="Symbol">:</a> <a id="22931" class="Symbol">∀{</a><a id="22933" href="blog.Sequent.html#22933" class="Bound">Γ</a><a id="22934" class="Symbol">}</a> <a id="22936" class="Symbol">(</a><a id="22937" href="blog.Sequent.html#22937" class="Bound">a</a> <a id="22939" class="Symbol">:</a> <a id="22941" href="blog.Sequent.html#22933" class="Bound">Γ</a> <a id="22943" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22945" class="Symbol">)</a> <a id="22947" class="Symbol">(</a><a id="22948" href="blog.Sequent.html#22948" class="Bound">b</a> <a id="22950" class="Symbol">:</a> <a id="22952" href="blog.Sequent.html#22933" class="Bound">Γ</a> <a id="22954" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="22956" class="Symbol">)</a>
        <a id="22966" class="Symbol">-&gt;</a> <a id="22969" href="blog.Sequent.html#22933" class="Bound">Γ</a> <a id="22971" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
</pre>
#+END_EXPORT

But we have new types: type variables and type quantification. A type variable
is pretty much what you would expect: a type reference into the context.

#+BEGIN_EXPORT html
<pre class="Agda">
      <a id="SystemF._⊢*.var"></a><a id="23162" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="23166" class="Symbol">:</a> <a id="23168" class="Symbol">∀{</a><a id="23170" href="blog.Sequent.html#23170" class="Bound">Γ</a><a id="23171" class="Symbol">}</a> <a id="23173" class="Symbol">-&gt;</a> <a id="23176" href="blog.Sequent.html#23170" class="Bound">Γ</a> <a id="23178" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a> <a id="23181" class="Symbol">-&gt;</a> <a id="23184" href="blog.Sequent.html#23170" class="Bound">Γ</a> <a id="23186" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
</pre>
#+END_EXPORT

And type quantification, like the STLC's ~abs~ constructor but for types, simply
binds a free type variable in the context.

#+BEGIN_EXPORT html
<pre class="Agda">
      <a id="23349" class="Comment">-- ∀ is a reserved identifier, so we must add a &#39;</a>
      <a id="SystemF._⊢*.∀&#39;"></a><a id="23405" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="23408" class="Symbol">:</a> <a id="23410" class="Symbol">∀{</a><a id="23412" href="blog.Sequent.html#23412" class="Bound">Γ</a><a id="23413" class="Symbol">}</a>
        <a id="23423" class="Symbol">-&gt;</a> <a id="23426" href="blog.Sequent.html#23412" class="Bound">Γ</a> <a id="23428" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="23431" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
        <a id="23442" class="Symbol">-&gt;</a> <a id="23445" href="blog.Sequent.html#23412" class="Bound">Γ</a> <a id="23447" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
</pre>
#+END_EXPORT

** Type renaming, substitution et cetera

If our universe of types admits variables and quantification, it follows that we
will need type level renaming and substitution procedures. Those work pretty
much the same ways as STLC's, but we must pay particular attention not to
confuse type variables which are all indistinguishable from each other.

Another change is that since we now have two kinds of variables we can add to a
context (a term variable and a type variable), a couple of functions are
duplicated. Those that add a term variable will keep the old name and those that
add a type variable will have a \( * \) at the end.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="24117" class="Comment">-- Renaming and substitution for types</a>
    <a id="SystemF.tRenaming"></a><a id="24160" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24170" class="Symbol">:</a> <a id="24172" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="24176" class="Symbol">-&gt;</a> <a id="24179" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="24183" class="Symbol">-&gt;</a> <a id="24186" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="24194" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24204" href="blog.Sequent.html#24204" class="Bound">Γ</a> <a id="24206" href="blog.Sequent.html#24206" class="Bound">Δ</a> <a id="24208" class="Symbol">=</a> <a id="24210" href="blog.Sequent.html#24204" class="Bound">Γ</a> <a id="24212" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a> <a id="24215" class="Symbol">-&gt;</a> <a id="24218" href="blog.Sequent.html#24206" class="Bound">Δ</a> <a id="24220" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a>

    <a id="SystemF.tSubstitution"></a><a id="24228" href="blog.Sequent.html#24228" class="Function">tSubstitution</a> <a id="24242" class="Symbol">:</a> <a id="24244" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="24248" class="Symbol">-&gt;</a> <a id="24251" href="blog.Sequent.html#20994" class="Datatype">Ctx</a> <a id="24255" class="Symbol">-&gt;</a> <a id="24258" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="24266" href="blog.Sequent.html#24228" class="Function">tSubstitution</a> <a id="24280" href="blog.Sequent.html#24280" class="Bound">Γ</a> <a id="24282" href="blog.Sequent.html#24282" class="Bound">Δ</a> <a id="24284" class="Symbol">=</a> <a id="24286" href="blog.Sequent.html#24280" class="Bound">Γ</a> <a id="24288" href="blog.Sequent.html#21429" class="Datatype Operator">∋*</a> <a id="24291" class="Symbol">-&gt;</a> <a id="24294" href="blog.Sequent.html#24282" class="Bound">Δ</a> <a id="24296" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

    <a id="24304" class="Comment">-- Variable renaming for types</a>
    <a id="SystemF.tRename"></a><a id="24339" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24347" class="Symbol">:</a> <a id="24349" class="Symbol">∀{</a><a id="24351" href="blog.Sequent.html#24351" class="Bound">Γ</a> <a id="24353" href="blog.Sequent.html#24353" class="Bound">Δ</a><a id="24354" class="Symbol">}</a> <a id="24356" class="Symbol">-&gt;</a> <a id="24359" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24369" href="blog.Sequent.html#24351" class="Bound">Γ</a> <a id="24371" href="blog.Sequent.html#24353" class="Bound">Δ</a> <a id="24373" class="Symbol">-&gt;</a> <a id="24376" href="blog.Sequent.html#24351" class="Bound">Γ</a> <a id="24378" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="24381" class="Symbol">-&gt;</a> <a id="24384" href="blog.Sequent.html#24353" class="Bound">Δ</a> <a id="24386" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

    <a id="24394" class="Comment">-- Renaming extension for types</a>
    <a id="SystemF.tExtend"></a><a id="24430" href="blog.Sequent.html#24430" class="Function">tExtend</a> <a id="24438" class="Symbol">:</a> <a id="24440" class="Symbol">∀{</a><a id="24442" href="blog.Sequent.html#24442" class="Bound">Γ</a> <a id="24444" href="blog.Sequent.html#24444" class="Bound">Δ</a><a id="24445" class="Symbol">}</a> <a id="24447" class="Symbol">{</a><a id="24448" href="blog.Sequent.html#24448" class="Bound">t</a> <a id="24450" class="Symbol">:</a> <a id="24452" href="blog.Sequent.html#24442" class="Bound">Γ</a> <a id="24454" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="24456" class="Symbol">}</a> <a id="24458" class="Symbol">-&gt;</a> <a id="24461" class="Symbol">(</a><a id="24462" href="blog.Sequent.html#24462" class="Bound">r</a> <a id="24464" class="Symbol">:</a> <a id="24466" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24476" href="blog.Sequent.html#24442" class="Bound">Γ</a> <a id="24478" href="blog.Sequent.html#24444" class="Bound">Δ</a><a id="24479" class="Symbol">)</a> <a id="24481" class="Symbol">-&gt;</a> <a id="24484" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24494" class="Symbol">(</a><a id="24495" href="blog.Sequent.html#24442" class="Bound">Γ</a> <a id="24497" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="24499" href="blog.Sequent.html#24448" class="Bound">t</a><a id="24500" class="Symbol">)</a> <a id="24502" class="Symbol">(</a><a id="24503" href="blog.Sequent.html#24444" class="Bound">Δ</a> <a id="24505" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="24507" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24515" href="blog.Sequent.html#24462" class="Bound">r</a> <a id="24517" href="blog.Sequent.html#24448" class="Bound">t</a><a id="24518" class="Symbol">)</a>
    <a id="SystemF.tExtend*"></a><a id="24524" href="blog.Sequent.html#24524" class="Function">tExtend*</a> <a id="24533" class="Symbol">:</a> <a id="24535" class="Symbol">∀{</a><a id="24537" href="blog.Sequent.html#24537" class="Bound">Γ</a> <a id="24539" href="blog.Sequent.html#24539" class="Bound">Δ</a><a id="24540" class="Symbol">}</a>           <a id="24552" class="Symbol">-&gt;</a> <a id="24555" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24565" href="blog.Sequent.html#24537" class="Bound">Γ</a> <a id="24567" href="blog.Sequent.html#24539" class="Bound">Δ</a>       <a id="24575" class="Symbol">-&gt;</a> <a id="24578" href="blog.Sequent.html#24160" class="Function">tRenaming</a> <a id="24588" class="Symbol">(</a><a id="24589" href="blog.Sequent.html#24537" class="Bound">Γ</a> <a id="24591" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a><a id="24593" class="Symbol">)</a>  <a id="24596" class="Symbol">(</a><a id="24597" href="blog.Sequent.html#24539" class="Bound">Δ</a> <a id="24599" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a><a id="24601" class="Symbol">)</a>

    <a id="24608" class="Comment">-- Context extension for types</a>
    <a id="SystemF.tShift"></a><a id="24643" href="blog.Sequent.html#24643" class="Function">tShift</a>  <a id="24651" class="Symbol">:</a> <a id="24653" class="Symbol">∀{</a><a id="24655" href="blog.Sequent.html#24655" class="Bound">Γ</a><a id="24656" class="Symbol">}</a> <a id="24658" class="Symbol">{</a><a id="24659" href="blog.Sequent.html#24659" class="Bound">t</a> <a id="24661" class="Symbol">:</a> <a id="24663" href="blog.Sequent.html#24655" class="Bound">Γ</a> <a id="24665" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="24667" class="Symbol">}</a> <a id="24669" class="Symbol">-&gt;</a> <a id="24672" href="blog.Sequent.html#24655" class="Bound">Γ</a> <a id="24674" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="24677" class="Symbol">-&gt;</a> <a id="24680" href="blog.Sequent.html#24655" class="Bound">Γ</a> <a id="24682" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="24684" href="blog.Sequent.html#24659" class="Bound">t</a> <a id="24686" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
    <a id="SystemF.tShift*"></a><a id="24693" href="blog.Sequent.html#24693" class="Function">tShift*</a> <a id="24701" class="Symbol">:</a> <a id="24703" class="Symbol">∀{</a><a id="24705" href="blog.Sequent.html#24705" class="Bound">Γ</a><a id="24706" class="Symbol">}</a>            <a id="24719" class="Symbol">-&gt;</a> <a id="24722" href="blog.Sequent.html#24705" class="Bound">Γ</a> <a id="24724" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="24727" class="Symbol">-&gt;</a> <a id="24730" href="blog.Sequent.html#24705" class="Bound">Γ</a> <a id="24732" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a>  <a id="24736" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>

    
    <a id="24749" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24757" href="blog.Sequent.html#24757" class="Bound">r</a> <a id="24759" class="Symbol">(</a><a id="24760" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="24764" href="blog.Sequent.html#24764" class="Bound">x</a><a id="24765" class="Symbol">)</a> <a id="24767" class="Symbol">=</a> <a id="24769" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="24773" class="Symbol">(</a><a id="24774" href="blog.Sequent.html#24757" class="Bound">r</a> <a id="24776" href="blog.Sequent.html#24764" class="Bound">x</a><a id="24777" class="Symbol">)</a>
    <a id="24783" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24791" href="blog.Sequent.html#24791" class="Bound">r</a> <a id="24793" href="blog.Sequent.html#22765" class="InductiveConstructor">⊤</a> <a id="24795" class="Symbol">=</a> <a id="24797" href="blog.Sequent.html#22765" class="InductiveConstructor">⊤</a>
    <a id="24803" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24811" href="blog.Sequent.html#24811" class="Bound">r</a> <a id="24813" href="blog.Sequent.html#22788" class="InductiveConstructor">⊥</a> <a id="24815" class="Symbol">=</a> <a id="24817" href="blog.Sequent.html#22788" class="InductiveConstructor">⊥</a>
    <a id="24823" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24831" href="blog.Sequent.html#24831" class="Bound">r</a> <a id="24833" class="Symbol">(</a><a id="24834" href="blog.Sequent.html#24834" class="Bound">t1</a> <a id="24837" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="24839" href="blog.Sequent.html#24839" class="Bound">t2</a><a id="24841" class="Symbol">)</a> <a id="24843" class="Symbol">=</a> <a id="24845" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24853" href="blog.Sequent.html#24831" class="Bound">r</a> <a id="24855" href="blog.Sequent.html#24834" class="Bound">t1</a> <a id="24858" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="24860" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24868" href="blog.Sequent.html#24831" class="Bound">r</a> <a id="24870" href="blog.Sequent.html#24839" class="Bound">t2</a>
    <a id="24877" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24885" href="blog.Sequent.html#24885" class="Bound">r</a> <a id="24887" class="Symbol">(</a><a id="24888" href="blog.Sequent.html#24888" class="Bound">t1</a> <a id="24891" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="24893" href="blog.Sequent.html#24893" class="Bound">t2</a><a id="24895" class="Symbol">)</a> <a id="24897" class="Symbol">=</a> <a id="24899" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24907" href="blog.Sequent.html#24885" class="Bound">r</a> <a id="24909" href="blog.Sequent.html#24888" class="Bound">t1</a> <a id="24912" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="24914" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24922" href="blog.Sequent.html#24885" class="Bound">r</a> <a id="24924" href="blog.Sequent.html#24893" class="Bound">t2</a>
    <a id="24931" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24939" href="blog.Sequent.html#24939" class="Bound">r</a> <a id="24941" class="Symbol">(</a><a id="24942" href="blog.Sequent.html#24942" class="Bound">t1</a> <a id="24945" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="24948" href="blog.Sequent.html#24948" class="Bound">t2</a><a id="24950" class="Symbol">)</a> <a id="24952" class="Symbol">=</a> <a id="24954" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24962" href="blog.Sequent.html#24939" class="Bound">r</a> <a id="24964" href="blog.Sequent.html#24942" class="Bound">t1</a> <a id="24967" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="24970" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24978" href="blog.Sequent.html#24939" class="Bound">r</a> <a id="24980" href="blog.Sequent.html#24948" class="Bound">t2</a>
    <a id="24987" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="24995" href="blog.Sequent.html#24995" class="Bound">r</a> <a id="24997" class="Symbol">(</a><a id="24998" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="25001" href="blog.Sequent.html#25001" class="Bound">t</a><a id="25002" class="Symbol">)</a> <a id="25004" class="Symbol">=</a> <a id="25006" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="25009" class="Symbol">(</a><a id="25010" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="25018" class="Symbol">(</a><a id="25019" href="blog.Sequent.html#24524" class="Function">tExtend*</a> <a id="25028" href="blog.Sequent.html#24995" class="Bound">r</a><a id="25029" class="Symbol">)</a> <a id="25031" href="blog.Sequent.html#25001" class="Bound">t</a><a id="25032" class="Symbol">)</a>

    <a id="25039" href="blog.Sequent.html#24430" class="Function">tExtend</a> <a id="25047" href="blog.Sequent.html#25047" class="Bound">r</a> <a id="25049" class="Symbol">(</a><a id="25050" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="25055" href="blog.Sequent.html#25055" class="Bound">t</a><a id="25056" class="Symbol">)</a> <a id="25058" class="Symbol">=</a> <a id="25060" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="25065" class="Symbol">(</a><a id="25066" href="blog.Sequent.html#25047" class="Bound">r</a> <a id="25068" href="blog.Sequent.html#25055" class="Bound">t</a><a id="25069" class="Symbol">)</a>

    <a id="25076" href="blog.Sequent.html#24524" class="Function">tExtend*</a> <a id="25085" href="blog.Sequent.html#25085" class="Bound">r</a> <a id="25087" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="25092" class="Symbol">=</a> <a id="25094" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a>
    <a id="25103" href="blog.Sequent.html#24524" class="Function">tExtend*</a> <a id="25112" href="blog.Sequent.html#25112" class="Bound">r</a> <a id="25114" class="Symbol">(</a><a id="25115" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="25121" href="blog.Sequent.html#25121" class="Bound">t</a><a id="25122" class="Symbol">)</a> <a id="25124" class="Symbol">=</a> <a id="25126" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="25132" class="Symbol">(</a><a id="25133" href="blog.Sequent.html#25112" class="Bound">r</a> <a id="25135" href="blog.Sequent.html#25121" class="Bound">t</a><a id="25136" class="Symbol">)</a>

    <a id="25143" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="25150" class="Symbol">=</a> <a id="25152" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="25160" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a>
    <a id="25169" href="blog.Sequent.html#24693" class="Function">tShift*</a> <a id="25177" class="Symbol">=</a> <a id="25179" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="25187" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a>

    <a id="25198" class="Comment">-- Substitutions for types</a>

    <a id="25230" class="Comment">-- Substitution extension for types</a>
    <a id="SystemF.subExtend*"></a><a id="25270" href="blog.Sequent.html#25270" class="Function">subExtend*</a> <a id="25281" class="Symbol">:</a> <a id="25283" class="Symbol">∀{</a><a id="25285" href="blog.Sequent.html#25285" class="Bound">Γ</a> <a id="25287" href="blog.Sequent.html#25287" class="Bound">Δ</a><a id="25288" class="Symbol">}</a> <a id="25290" class="Symbol">-&gt;</a> <a id="25293" href="blog.Sequent.html#24228" class="Function">tSubstitution</a> <a id="25307" href="blog.Sequent.html#25285" class="Bound">Γ</a> <a id="25309" href="blog.Sequent.html#25287" class="Bound">Δ</a> <a id="25311" class="Symbol">-&gt;</a> <a id="25314" href="blog.Sequent.html#24228" class="Function">tSubstitution</a> <a id="25328" class="Symbol">(</a><a id="25329" href="blog.Sequent.html#25285" class="Bound">Γ</a> <a id="25331" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a><a id="25333" class="Symbol">)</a> <a id="25335" class="Symbol">(</a><a id="25336" href="blog.Sequent.html#25287" class="Bound">Δ</a> <a id="25338" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a><a id="25340" class="Symbol">)</a>
    <a id="25346" href="blog.Sequent.html#25270" class="Function">subExtend*</a> <a id="25357" href="blog.Sequent.html#25357" class="Bound">σ</a> <a id="25359" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="25364" class="Symbol">=</a> <a id="25366" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="25370" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a>
    <a id="25379" href="blog.Sequent.html#25270" class="Function">subExtend*</a> <a id="25390" href="blog.Sequent.html#25390" class="Bound">σ</a> <a id="25392" class="Symbol">(</a><a id="25393" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="25399" href="blog.Sequent.html#25399" class="Bound">t</a><a id="25400" class="Symbol">)</a> <a id="25402" class="Symbol">=</a> <a id="25404" href="blog.Sequent.html#24339" class="Function">tRename</a> <a id="25412" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="25418" class="Symbol">(</a><a id="25419" href="blog.Sequent.html#25390" class="Bound">σ</a> <a id="25421" href="blog.Sequent.html#25399" class="Bound">t</a><a id="25422" class="Symbol">)</a>

    <a id="25429" class="Comment">-- Simultaneous substitution</a>
    <a id="SystemF.tSub"></a><a id="25462" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25467" class="Symbol">:</a> <a id="25469" class="Symbol">∀{</a><a id="25471" href="blog.Sequent.html#25471" class="Bound">Γ</a> <a id="25473" href="blog.Sequent.html#25473" class="Bound">Δ</a><a id="25474" class="Symbol">}</a> <a id="25476" class="Symbol">-&gt;</a> <a id="25479" href="blog.Sequent.html#24228" class="Function">tSubstitution</a> <a id="25493" href="blog.Sequent.html#25471" class="Bound">Γ</a> <a id="25495" href="blog.Sequent.html#25473" class="Bound">Δ</a> <a id="25497" class="Symbol">-&gt;</a> <a id="25500" href="blog.Sequent.html#25471" class="Bound">Γ</a> <a id="25502" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="25505" class="Symbol">-&gt;</a> <a id="25508" href="blog.Sequent.html#25473" class="Bound">Δ</a> <a id="25510" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
    <a id="25517" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25522" href="blog.Sequent.html#25522" class="Bound">σ</a> <a id="25524" class="Symbol">(</a><a id="25525" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="25529" href="blog.Sequent.html#25529" class="Bound">x</a><a id="25530" class="Symbol">)</a> <a id="25532" class="Symbol">=</a> <a id="25534" href="blog.Sequent.html#25522" class="Bound">σ</a> <a id="25536" href="blog.Sequent.html#25529" class="Bound">x</a>
    <a id="25542" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25547" href="blog.Sequent.html#25547" class="Bound">σ</a> <a id="25549" href="blog.Sequent.html#22765" class="InductiveConstructor">⊤</a> <a id="25551" class="Symbol">=</a> <a id="25553" href="blog.Sequent.html#22765" class="InductiveConstructor">⊤</a>
    <a id="25559" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25564" href="blog.Sequent.html#25564" class="Bound">σ</a> <a id="25566" href="blog.Sequent.html#22788" class="InductiveConstructor">⊥</a> <a id="25568" class="Symbol">=</a> <a id="25570" href="blog.Sequent.html#22788" class="InductiveConstructor">⊥</a>
    <a id="25576" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25581" href="blog.Sequent.html#25581" class="Bound">σ</a> <a id="25583" class="Symbol">(</a><a id="25584" href="blog.Sequent.html#25584" class="Bound">t1</a> <a id="25587" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="25589" href="blog.Sequent.html#25589" class="Bound">t2</a><a id="25591" class="Symbol">)</a> <a id="25593" class="Symbol">=</a> <a id="25595" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25600" href="blog.Sequent.html#25581" class="Bound">σ</a> <a id="25602" href="blog.Sequent.html#25584" class="Bound">t1</a> <a id="25605" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="25607" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25612" href="blog.Sequent.html#25581" class="Bound">σ</a> <a id="25614" href="blog.Sequent.html#25589" class="Bound">t2</a>
    <a id="25621" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25626" href="blog.Sequent.html#25626" class="Bound">σ</a> <a id="25628" class="Symbol">(</a><a id="25629" href="blog.Sequent.html#25629" class="Bound">t1</a> <a id="25632" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="25634" href="blog.Sequent.html#25634" class="Bound">t2</a><a id="25636" class="Symbol">)</a> <a id="25638" class="Symbol">=</a> <a id="25640" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25645" href="blog.Sequent.html#25626" class="Bound">σ</a> <a id="25647" href="blog.Sequent.html#25629" class="Bound">t1</a> <a id="25650" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="25652" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25657" href="blog.Sequent.html#25626" class="Bound">σ</a> <a id="25659" href="blog.Sequent.html#25634" class="Bound">t2</a>
    <a id="25666" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25671" href="blog.Sequent.html#25671" class="Bound">σ</a> <a id="25673" class="Symbol">(</a><a id="25674" href="blog.Sequent.html#25674" class="Bound">t1</a> <a id="25677" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="25680" href="blog.Sequent.html#25680" class="Bound">t2</a><a id="25682" class="Symbol">)</a> <a id="25684" class="Symbol">=</a> <a id="25686" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25691" href="blog.Sequent.html#25671" class="Bound">σ</a> <a id="25693" href="blog.Sequent.html#25674" class="Bound">t1</a> <a id="25696" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="25699" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25704" href="blog.Sequent.html#25671" class="Bound">σ</a> <a id="25706" href="blog.Sequent.html#25680" class="Bound">t2</a>
    <a id="25713" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25718" href="blog.Sequent.html#25718" class="Bound">σ</a> <a id="25720" class="Symbol">(</a><a id="25721" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="25724" href="blog.Sequent.html#25724" class="Bound">t</a><a id="25725" class="Symbol">)</a> <a id="25727" class="Symbol">=</a> <a id="25729" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="25732" class="Symbol">(</a><a id="25733" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25738" class="Symbol">(</a><a id="25739" href="blog.Sequent.html#25270" class="Function">subExtend*</a> <a id="25750" href="blog.Sequent.html#25718" class="Bound">σ</a><a id="25751" class="Symbol">)</a> <a id="25753" href="blog.Sequent.html#25724" class="Bound">t</a><a id="25754" class="Symbol">)</a>

    <a id="25761" class="Comment">-- Single variable substitution</a>
    <a id="SystemF._[_]t"></a><a id="25797" href="blog.Sequent.html#25797" class="Function Operator">_[_]t</a> <a id="25803" class="Symbol">:</a> <a id="25805" class="Symbol">∀{</a><a id="25807" href="blog.Sequent.html#25807" class="Bound">Γ</a><a id="25808" class="Symbol">}</a> <a id="25810" class="Symbol">-&gt;</a> <a id="25813" href="blog.Sequent.html#25807" class="Bound">Γ</a> <a id="25815" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="25818" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="25821" class="Symbol">-&gt;</a> <a id="25824" href="blog.Sequent.html#25807" class="Bound">Γ</a> <a id="25826" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a> <a id="25829" class="Symbol">-&gt;</a> <a id="25832" href="blog.Sequent.html#25807" class="Bound">Γ</a> <a id="25834" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
    <a id="25841" href="blog.Sequent.html#25841" class="Bound">l</a> <a id="25843" href="blog.Sequent.html#25797" class="Function Operator">[</a> <a id="25845" href="blog.Sequent.html#25845" class="Bound">r</a> <a id="25847" href="blog.Sequent.html#25797" class="Function Operator">]t</a> <a id="25850" class="Symbol">=</a> <a id="25852" href="blog.Sequent.html#25462" class="Function">tSub</a> <a id="25857" class="Symbol">(λ</a> <a id="25860" class="Symbol">{</a> <a id="25862" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="25867" class="Symbol">→</a> <a id="25869" href="blog.Sequent.html#25845" class="Bound">r</a>
                       <a id="25894" class="Symbol">;</a> <a id="25896" class="Symbol">(</a><a id="25897" href="blog.Sequent.html#22428" class="InductiveConstructor">there</a> <a id="25903" href="blog.Sequent.html#25903" class="Bound">x</a><a id="25904" class="Symbol">)</a> <a id="25906" class="Symbol">→</a> <a id="25908" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="25912" href="blog.Sequent.html#25903" class="Bound">x</a><a id="25913" class="Symbol">})</a> <a id="25916" href="blog.Sequent.html#25841" class="Bound">l</a>
</pre>
#+END_EXPORT

** Term references

Just as we had to add one constructor to type references earlier, we will do the
same for term references. Note that we re used the same names as for type
references, except we switched the meanings of ~there~ and ~skip~.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="26194" class="Keyword">data</a> <a id="26199" href="blog.Sequent.html#21596" class="Datatype Operator">_∋_</a> <a id="26203" class="Keyword">where</a>
      <a id="SystemF._∋_.here"></a><a id="26215" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a> <a id="26220" class="Symbol">:</a> <a id="26222" class="Symbol">∀{</a><a id="26224" href="blog.Sequent.html#26224" class="Bound">Γ</a> <a id="26226" href="blog.Sequent.html#26226" class="Bound">t</a><a id="26227" class="Symbol">}</a>
        <a id="26237" class="Symbol">-&gt;</a> <a id="26240" href="blog.Sequent.html#26224" class="Bound">Γ</a> <a id="26242" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="26244" href="blog.Sequent.html#26226" class="Bound">t</a> <a id="26246" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26248" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="26255" href="blog.Sequent.html#26226" class="Bound">t</a>
      <a id="SystemF._∋_.there"></a><a id="26263" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="26269" class="Symbol">:</a> <a id="26271" class="Symbol">∀{</a><a id="26273" href="blog.Sequent.html#26273" class="Bound">Γ</a> <a id="26275" href="blog.Sequent.html#26275" class="Bound">t1</a> <a id="26278" href="blog.Sequent.html#26278" class="Bound">t2</a><a id="26280" class="Symbol">}</a>
        <a id="26290" class="Symbol">-&gt;</a> <a id="26293" href="blog.Sequent.html#26273" class="Bound">Γ</a> <a id="26295" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26297" href="blog.Sequent.html#26275" class="Bound">t1</a>
        <a id="26308" class="Symbol">-&gt;</a> <a id="26311" href="blog.Sequent.html#26273" class="Bound">Γ</a> <a id="26313" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="26315" href="blog.Sequent.html#26278" class="Bound">t2</a> <a id="26318" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26320" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="26327" href="blog.Sequent.html#26275" class="Bound">t1</a>

      <a id="SystemF._∋_.skip"></a><a id="26337" href="blog.Sequent.html#26337" class="InductiveConstructor">skip</a> <a id="26342" class="Symbol">:</a> <a id="26344" class="Symbol">∀{</a><a id="26346" href="blog.Sequent.html#26346" class="Bound">Γ</a> <a id="26348" href="blog.Sequent.html#26348" class="Bound">t</a><a id="26349" class="Symbol">}</a>
        <a id="26359" class="Symbol">-&gt;</a> <a id="26362" href="blog.Sequent.html#26346" class="Bound">Γ</a> <a id="26364" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26366" href="blog.Sequent.html#26348" class="Bound">t</a>
        <a id="26376" class="Symbol">-&gt;</a> <a id="26379" href="blog.Sequent.html#26346" class="Bound">Γ</a> <a id="26381" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="26384" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26386" href="blog.Sequent.html#24693" class="Function">tShift*</a> <a id="26394" href="blog.Sequent.html#26348" class="Bound">t</a>
</pre>
#+END_EXPORT

** Terms

The definition of old terms are mostly the same as before, except we have to use
a bunch of ~tShift~'s when we want to consider the same type in multple contexts.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="26603" class="Keyword">data</a> <a id="26608" href="blog.Sequent.html#21269" class="Datatype Operator">_⊢_</a> <a id="26612" class="Keyword">where</a>
      <a id="SystemF._⊢_.var"></a><a id="26624" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="26628" class="Symbol">:</a> <a id="26630" class="Symbol">∀{</a><a id="26632" href="blog.Sequent.html#26632" class="Bound">Γ</a> <a id="26634" href="blog.Sequent.html#26634" class="Bound">t</a><a id="26635" class="Symbol">}</a>
        <a id="26645" class="Symbol">-&gt;</a> <a id="26648" href="blog.Sequent.html#26632" class="Bound">Γ</a> <a id="26650" href="blog.Sequent.html#21596" class="Datatype Operator">∋</a> <a id="26652" href="blog.Sequent.html#26634" class="Bound">t</a>
        <a id="26662" class="Symbol">-&gt;</a> <a id="26665" href="blog.Sequent.html#26632" class="Bound">Γ</a> <a id="26667" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26669" href="blog.Sequent.html#26634" class="Bound">t</a>


      <a id="SystemF._⊢_.×-intro"></a><a id="26679" href="blog.Sequent.html#26679" class="InductiveConstructor">×-intro</a> <a id="26687" class="Symbol">:</a> <a id="26689" class="Symbol">∀{</a><a id="26691" href="blog.Sequent.html#26691" class="Bound">Γ</a> <a id="26693" href="blog.Sequent.html#26693" class="Bound">t1</a> <a id="26696" href="blog.Sequent.html#26696" class="Bound">t2</a><a id="26698" class="Symbol">}</a>
        <a id="26708" class="Symbol">-&gt;</a> <a id="26711" href="blog.Sequent.html#26691" class="Bound">Γ</a> <a id="26713" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26715" href="blog.Sequent.html#26693" class="Bound">t1</a>
        <a id="26726" class="Symbol">-&gt;</a> <a id="26729" href="blog.Sequent.html#26691" class="Bound">Γ</a> <a id="26731" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26733" href="blog.Sequent.html#26696" class="Bound">t2</a>
        <a id="26744" class="Symbol">-&gt;</a> <a id="26747" href="blog.Sequent.html#26691" class="Bound">Γ</a> <a id="26749" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26751" href="blog.Sequent.html#26693" class="Bound">t1</a> <a id="26754" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="26756" href="blog.Sequent.html#26696" class="Bound">t2</a>

      <a id="SystemF._⊢_.×-elim"></a><a id="26766" href="blog.Sequent.html#26766" class="InductiveConstructor">×-elim</a> <a id="26773" class="Symbol">:</a> <a id="26775" class="Symbol">∀{</a><a id="26777" href="blog.Sequent.html#26777" class="Bound">Γ</a> <a id="26779" href="blog.Sequent.html#26779" class="Bound">t1</a> <a id="26782" href="blog.Sequent.html#26782" class="Bound">t2</a> <a id="26785" href="blog.Sequent.html#26785" class="Bound">t3</a><a id="26787" class="Symbol">}</a>
        <a id="26797" class="Symbol">-&gt;</a> <a id="26800" href="blog.Sequent.html#26777" class="Bound">Γ</a> <a id="26802" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26804" href="blog.Sequent.html#26779" class="Bound">t1</a> <a id="26807" href="blog.Sequent.html#22812" class="InductiveConstructor Operator">×</a> <a id="26809" href="blog.Sequent.html#26782" class="Bound">t2</a>
        <a id="26820" class="Symbol">-&gt;</a> <a id="26823" href="blog.Sequent.html#26777" class="Bound">Γ</a> <a id="26825" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="26827" href="blog.Sequent.html#26779" class="Bound">t1</a> <a id="26830" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="26832" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="26839" href="blog.Sequent.html#26782" class="Bound">t2</a> <a id="26842" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26844" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="26851" class="Symbol">(</a><a id="26852" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="26859" href="blog.Sequent.html#26785" class="Bound">t3</a><a id="26861" class="Symbol">)</a>
        <a id="26871" class="Symbol">-&gt;</a> <a id="26874" href="blog.Sequent.html#26777" class="Bound">Γ</a> <a id="26876" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26878" href="blog.Sequent.html#26785" class="Bound">t3</a>


      <a id="SystemF._⊢_.+-intro-left"></a><a id="26889" href="blog.Sequent.html#26889" class="InductiveConstructor">+-intro-left</a> <a id="26902" class="Symbol">:</a> <a id="26904" class="Symbol">∀{</a><a id="26906" href="blog.Sequent.html#26906" class="Bound">Γ</a> <a id="26908" href="blog.Sequent.html#26908" class="Bound">t1</a> <a id="26911" href="blog.Sequent.html#26911" class="Bound">t2</a><a id="26913" class="Symbol">}</a>
        <a id="26923" class="Symbol">-&gt;</a> <a id="26926" href="blog.Sequent.html#26906" class="Bound">Γ</a> <a id="26928" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26930" href="blog.Sequent.html#26908" class="Bound">t1</a>
        <a id="26941" class="Symbol">-&gt;</a> <a id="26944" href="blog.Sequent.html#26906" class="Bound">Γ</a> <a id="26946" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="26948" href="blog.Sequent.html#26908" class="Bound">t1</a> <a id="26951" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="26953" href="blog.Sequent.html#26911" class="Bound">t2</a>

      <a id="SystemF._⊢_.+-intro-right"></a><a id="26963" href="blog.Sequent.html#26963" class="InductiveConstructor">+-intro-right</a> <a id="26977" class="Symbol">:</a> <a id="26979" class="Symbol">∀{</a><a id="26981" href="blog.Sequent.html#26981" class="Bound">Γ</a> <a id="26983" href="blog.Sequent.html#26983" class="Bound">t1</a> <a id="26986" href="blog.Sequent.html#26986" class="Bound">t2</a><a id="26988" class="Symbol">}</a>
        <a id="26998" class="Symbol">-&gt;</a> <a id="27001" href="blog.Sequent.html#26981" class="Bound">Γ</a> <a id="27003" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27005" href="blog.Sequent.html#26986" class="Bound">t2</a>
        <a id="27016" class="Symbol">-&gt;</a> <a id="27019" href="blog.Sequent.html#26981" class="Bound">Γ</a> <a id="27021" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27023" href="blog.Sequent.html#26983" class="Bound">t1</a> <a id="27026" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="27028" href="blog.Sequent.html#26986" class="Bound">t2</a>

      <a id="SystemF._⊢_.+-elim"></a><a id="27038" href="blog.Sequent.html#27038" class="InductiveConstructor">+-elim</a> <a id="27045" class="Symbol">:</a> <a id="27047" class="Symbol">∀{</a><a id="27049" href="blog.Sequent.html#27049" class="Bound">Γ</a> <a id="27051" href="blog.Sequent.html#27051" class="Bound">t1</a> <a id="27054" href="blog.Sequent.html#27054" class="Bound">t2</a> <a id="27057" href="blog.Sequent.html#27057" class="Bound">t3</a><a id="27059" class="Symbol">}</a>
        <a id="27069" class="Symbol">-&gt;</a> <a id="27072" href="blog.Sequent.html#27049" class="Bound">Γ</a> <a id="27074" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27076" href="blog.Sequent.html#27051" class="Bound">t1</a> <a id="27079" href="blog.Sequent.html#22868" class="InductiveConstructor Operator">+</a> <a id="27081" href="blog.Sequent.html#27054" class="Bound">t2</a>
        <a id="27092" class="Symbol">-&gt;</a> <a id="27095" href="blog.Sequent.html#27049" class="Bound">Γ</a> <a id="27097" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="27099" href="blog.Sequent.html#27051" class="Bound">t1</a> <a id="27102" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27104" class="Symbol">(</a><a id="27105" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="27112" href="blog.Sequent.html#27057" class="Bound">t3</a><a id="27114" class="Symbol">)</a>
        <a id="27124" class="Symbol">-&gt;</a> <a id="27127" href="blog.Sequent.html#27049" class="Bound">Γ</a> <a id="27129" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="27131" href="blog.Sequent.html#27054" class="Bound">t2</a> <a id="27134" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27136" class="Symbol">(</a><a id="27137" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="27144" href="blog.Sequent.html#27057" class="Bound">t3</a><a id="27146" class="Symbol">)</a>
        <a id="27156" class="Symbol">-&gt;</a> <a id="27159" href="blog.Sequent.html#27049" class="Bound">Γ</a> <a id="27161" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27163" href="blog.Sequent.html#27057" class="Bound">t3</a>


      <a id="SystemF._⊢_.=&gt;-intro"></a><a id="27174" href="blog.Sequent.html#27174" class="InductiveConstructor">=&gt;-intro</a> <a id="27183" class="Symbol">:</a> <a id="27185" class="Symbol">∀{</a><a id="27187" href="blog.Sequent.html#27187" class="Bound">Γ</a> <a id="27189" href="blog.Sequent.html#27189" class="Bound">t1</a> <a id="27192" href="blog.Sequent.html#27192" class="Bound">t2</a><a id="27194" class="Symbol">}</a>
        <a id="27204" class="Symbol">-&gt;</a> <a id="27207" href="blog.Sequent.html#27187" class="Bound">Γ</a> <a id="27209" href="blog.Sequent.html#22003" class="InductiveConstructor Operator">,</a> <a id="27211" href="blog.Sequent.html#27189" class="Bound">t1</a> <a id="27214" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27216" class="Symbol">(</a><a id="27217" href="blog.Sequent.html#24643" class="Function">tShift</a> <a id="27224" href="blog.Sequent.html#27192" class="Bound">t2</a><a id="27226" class="Symbol">)</a>
        <a id="27236" class="Symbol">-&gt;</a> <a id="27239" href="blog.Sequent.html#27187" class="Bound">Γ</a> <a id="27241" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27243" href="blog.Sequent.html#27189" class="Bound">t1</a> <a id="27246" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="27249" href="blog.Sequent.html#27192" class="Bound">t2</a>
      <a id="SystemF._⊢_.=&gt;-elim"></a><a id="27258" href="blog.Sequent.html#27258" class="InductiveConstructor">=&gt;-elim</a> <a id="27266" class="Symbol">:</a> <a id="27268" class="Symbol">∀{</a><a id="27270" href="blog.Sequent.html#27270" class="Bound">Γ</a> <a id="27272" href="blog.Sequent.html#27272" class="Bound">t1</a> <a id="27275" href="blog.Sequent.html#27275" class="Bound">t2</a><a id="27277" class="Symbol">}</a>
        <a id="27287" class="Symbol">-&gt;</a> <a id="27290" href="blog.Sequent.html#27270" class="Bound">Γ</a> <a id="27292" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27294" href="blog.Sequent.html#27272" class="Bound">t1</a> <a id="27297" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="27300" href="blog.Sequent.html#27275" class="Bound">t2</a>
        <a id="27311" class="Symbol">-&gt;</a> <a id="27314" href="blog.Sequent.html#27270" class="Bound">Γ</a> <a id="27316" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27318" href="blog.Sequent.html#27272" class="Bound">t1</a>
        <a id="27329" class="Symbol">-&gt;</a> <a id="27332" href="blog.Sequent.html#27270" class="Bound">Γ</a> <a id="27334" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27336" href="blog.Sequent.html#27275" class="Bound">t2</a>
</pre>
#+END_EXPORT

Two new constructors we didn't have before, however, come from the type level
quantification operator for which we add an introduction rule and an elimination
rule. (Respectively denoted by \( \Lambda \alpha. x \) and \( t \cdot \alpha \) in the literature).

The \( \forall \)-intro reflects (at the term level) the introduction of a type
variable and \( \forall \)-elim instantiates the polymorphic term with a
specific type.

#+BEGIN_EXPORT html
<pre class="Agda">
      <a id="SystemF._⊢_.∀-intro"></a><a id="27803" href="blog.Sequent.html#27803" class="InductiveConstructor">∀-intro</a> <a id="27811" class="Symbol">:</a> <a id="27813" class="Symbol">∀{</a><a id="27815" href="blog.Sequent.html#27815" class="Bound">Γ</a> <a id="27817" href="blog.Sequent.html#27817" class="Bound">t</a><a id="27818" class="Symbol">}</a>
        <a id="27828" class="Symbol">-&gt;</a> <a id="27831" href="blog.Sequent.html#27815" class="Bound">Γ</a> <a id="27833" href="blog.Sequent.html#22076" class="InductiveConstructor Operator">,*</a> <a id="27836" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27838" href="blog.Sequent.html#27817" class="Bound">t</a>
        <a id="27848" class="Symbol">-&gt;</a> <a id="27851" href="blog.Sequent.html#27815" class="Bound">Γ</a> <a id="27853" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27855" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="27858" href="blog.Sequent.html#27817" class="Bound">t</a>

      <a id="SystemF._⊢_.∀-elim"></a><a id="27867" href="blog.Sequent.html#27867" class="InductiveConstructor">∀-elim</a> <a id="27874" class="Symbol">:</a> <a id="27876" class="Symbol">∀{</a><a id="27878" href="blog.Sequent.html#27878" class="Bound">Γ</a> <a id="27880" href="blog.Sequent.html#27880" class="Bound">f</a><a id="27881" class="Symbol">}</a>
        <a id="27891" class="Symbol">-&gt;</a> <a id="27894" href="blog.Sequent.html#27878" class="Bound">Γ</a> <a id="27896" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27898" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="27901" href="blog.Sequent.html#27880" class="Bound">f</a>
        <a id="27911" class="Symbol">-&gt;</a> <a id="27914" class="Symbol">(</a><a id="27915" href="blog.Sequent.html#27915" class="Bound">x</a> <a id="27917" class="Symbol">:</a> <a id="27919" href="blog.Sequent.html#27878" class="Bound">Γ</a> <a id="27921" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a><a id="27923" class="Symbol">)</a>
        <a id="27933" class="Symbol">-&gt;</a> <a id="27936" href="blog.Sequent.html#27878" class="Bound">Γ</a> <a id="27938" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="27940" class="Symbol">(</a> <a id="27942" href="blog.Sequent.html#27880" class="Bound">f</a> <a id="27944" href="blog.Sequent.html#25797" class="Function Operator">[</a> <a id="27946" href="blog.Sequent.html#27915" class="Bound">x</a> <a id="27948" href="blog.Sequent.html#25797" class="Function Operator">]t</a><a id="27950" class="Symbol">)</a>
</pre>
#+END_EXPORT

** Examples

As promised, we can now represent the polymorphic identity function.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="SystemF.poly-id"></a><a id="28066" href="blog.Sequent.html#28066" class="Function">poly-id</a> <a id="28074" class="Symbol">:</a> <a id="28076" href="blog.Sequent.html#21949" class="InductiveConstructor">●</a> <a id="28078" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="28080" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="28083" class="Symbol">(</a><a id="28084" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28088" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="28093" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28096" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28100" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="28104" class="Symbol">)</a>
  <a id="28108" href="blog.Sequent.html#28066" class="Function">poly-id</a> <a id="28116" class="Symbol">=</a> <a id="28118" href="blog.Sequent.html#27803" class="InductiveConstructor">∀-intro</a> <a id="28126" class="Symbol">(</a><a id="28127" href="blog.Sequent.html#27174" class="InductiveConstructor">=&gt;-intro</a> <a id="28136" class="Symbol">(</a><a id="28137" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="28141" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="28145" class="Symbol">))</a>
</pre>
#+END_EXPORT


We can also give a type to church encoded natural numbers.

\[ \mathbb{N} \stackrel{\Delta}{=} \forall \alpha. \alpha \Rightarrow (\alpha \Rightarrow \alpha) \Rightarrow \alpha \]

Note that I define some special notation for \( \Rightarrow \)-intro/elim and \( \forall
\)-intro/elim to ease readability.

#+BEGIN_EXPORT html
<pre class="Agda">

  <a id="SystemF.ƛ_"></a><a id="28487" href="blog.Sequent.html#28487" class="Function Operator">ƛ_</a> <a id="28490" class="Symbol">:</a> <a id="28492" class="Symbol">∀{</a><a id="28494" href="blog.Sequent.html#28494" class="Bound">Γ</a> <a id="28496" href="blog.Sequent.html#28496" class="Bound">t1</a> <a id="28499" href="blog.Sequent.html#28499" class="Bound">t2</a><a id="28501" class="Symbol">}</a> <a id="28503" class="Symbol">-&gt;</a> <a id="28506" class="Symbol">_</a>
  <a id="28510" href="blog.Sequent.html#28487" class="Function Operator">ƛ_</a> <a id="28513" class="Symbol">{</a><a id="28514" href="blog.Sequent.html#28514" class="Bound">Γ</a><a id="28515" class="Symbol">}</a> <a id="28517" class="Symbol">{</a><a id="28518" href="blog.Sequent.html#28518" class="Bound">t1</a><a id="28520" class="Symbol">}</a> <a id="28522" class="Symbol">{</a><a id="28523" href="blog.Sequent.html#28523" class="Bound">t2</a><a id="28525" class="Symbol">}</a> <a id="28527" class="Symbol">=</a> <a id="28529" href="blog.Sequent.html#27174" class="InductiveConstructor">=&gt;-intro</a> <a id="28538" class="Symbol">{</a><a id="28539" href="blog.Sequent.html#28514" class="Bound">Γ</a><a id="28540" class="Symbol">}</a> <a id="28542" class="Symbol">{</a><a id="28543" href="blog.Sequent.html#28518" class="Bound">t1</a><a id="28545" class="Symbol">}</a> <a id="28547" class="Symbol">{</a><a id="28548" href="blog.Sequent.html#28523" class="Bound">t2</a><a id="28550" class="Symbol">}</a>

  <a id="SystemF._·_"></a><a id="28555" href="blog.Sequent.html#28555" class="Function Operator">_·_</a> <a id="28559" class="Symbol">:</a> <a id="28561" class="Symbol">∀{</a><a id="28563" href="blog.Sequent.html#28563" class="Bound">Γ</a> <a id="28565" href="blog.Sequent.html#28565" class="Bound">t1</a> <a id="28568" href="blog.Sequent.html#28568" class="Bound">t2</a><a id="28570" class="Symbol">}</a> <a id="28572" class="Symbol">-&gt;</a> <a id="28575" class="Symbol">_</a>
  <a id="28579" href="blog.Sequent.html#28555" class="Function Operator">_·_</a> <a id="28583" class="Symbol">{</a><a id="28584" href="blog.Sequent.html#28584" class="Bound">Γ</a><a id="28585" class="Symbol">}</a> <a id="28587" class="Symbol">{</a><a id="28588" href="blog.Sequent.html#28588" class="Bound">t1</a><a id="28590" class="Symbol">}</a> <a id="28592" class="Symbol">{</a><a id="28593" href="blog.Sequent.html#28593" class="Bound">t2</a><a id="28595" class="Symbol">}</a> <a id="28597" class="Symbol">=</a> <a id="28599" href="blog.Sequent.html#27258" class="InductiveConstructor">=&gt;-elim</a> <a id="28607" class="Symbol">{</a><a id="28608" href="blog.Sequent.html#28584" class="Bound">Γ</a><a id="28609" class="Symbol">}</a> <a id="28611" class="Symbol">{</a><a id="28612" href="blog.Sequent.html#28588" class="Bound">t1</a><a id="28614" class="Symbol">}</a> <a id="28616" class="Symbol">{</a><a id="28617" href="blog.Sequent.html#28593" class="Bound">t2</a><a id="28619" class="Symbol">}</a>

  <a id="SystemF._·ₜ_"></a><a id="28624" href="blog.Sequent.html#28624" class="Function Operator">_·ₜ_</a> <a id="28629" class="Symbol">:</a> <a id="28631" class="Symbol">∀{</a><a id="28633" href="blog.Sequent.html#28633" class="Bound">Γ</a> <a id="28635" href="blog.Sequent.html#28635" class="Bound">f</a><a id="28636" class="Symbol">}</a> <a id="28638" class="Symbol">-&gt;</a> <a id="28641" class="Symbol">_</a>
  <a id="28645" href="blog.Sequent.html#28624" class="Function Operator">_·ₜ_</a> <a id="28650" class="Symbol">{</a><a id="28651" href="blog.Sequent.html#28651" class="Bound">Γ</a><a id="28652" class="Symbol">}</a> <a id="28654" class="Symbol">{</a><a id="28655" href="blog.Sequent.html#28655" class="Bound">f</a><a id="28656" class="Symbol">}</a> <a id="28658" class="Symbol">=</a> <a id="28660" href="blog.Sequent.html#27867" class="InductiveConstructor">∀-elim</a> <a id="28667" class="Symbol">{</a><a id="28668" href="blog.Sequent.html#28651" class="Bound">Γ</a><a id="28669" class="Symbol">}</a> <a id="28671" class="Symbol">{</a><a id="28672" href="blog.Sequent.html#28655" class="Bound">f</a><a id="28673" class="Symbol">}</a>

  <a id="28678" class="Keyword">infixl</a> <a id="28685" class="Number">5</a> <a id="28687" href="blog.Sequent.html#28555" class="Function Operator">_·_</a> <a id="28691" href="blog.Sequent.html#28624" class="Function Operator">_·ₜ_</a>
  <a id="28698" class="Keyword">infix</a> <a id="28704" class="Number">4</a> <a id="28706" href="blog.Sequent.html#28487" class="Function Operator">ƛ_</a>

  <a id="SystemF.church-nat"></a><a id="28712" href="blog.Sequent.html#28712" class="Function">church-nat</a> <a id="28723" class="Symbol">:</a> <a id="28725" class="Symbol">∀{</a><a id="28727" href="blog.Sequent.html#28727" class="Bound">Γ</a><a id="28728" class="Symbol">}</a> <a id="28730" class="Symbol">-&gt;</a> <a id="28733" href="blog.Sequent.html#28727" class="Bound">Γ</a> <a id="28735" href="blog.Sequent.html#21116" class="Datatype Operator">⊢*</a>
  <a id="28740" href="blog.Sequent.html#28712" class="Function">church-nat</a> <a id="28751" class="Symbol">=</a> <a id="28753" href="blog.Sequent.html#23405" class="InductiveConstructor">∀&#39;</a> <a id="28756" class="Symbol">(</a><a id="28757" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28761" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a> <a id="28766" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28769" class="Symbol">((</a><a id="28771" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28775" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="28779" class="Symbol">)</a> <a id="28781" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28784" class="Symbol">(</a><a id="28785" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28789" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="28793" class="Symbol">))</a> <a id="28796" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28799" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="28803" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="28807" class="Symbol">)</a>

  <a id="SystemF.two"></a><a id="28812" href="blog.Sequent.html#28812" class="Function">two</a> <a id="28816" class="Symbol">:</a> <a id="28818" class="Symbol">∀{</a><a id="28820" href="blog.Sequent.html#28820" class="Bound">Γ</a><a id="28821" class="Symbol">}</a> <a id="28823" class="Symbol">-&gt;</a> <a id="28826" href="blog.Sequent.html#28820" class="Bound">Γ</a> <a id="28828" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="28830" href="blog.Sequent.html#28712" class="Function">church-nat</a>
  <a id="28843" href="blog.Sequent.html#28812" class="Function">two</a> <a id="28847" class="Symbol">=</a> <a id="28849" href="blog.Sequent.html#27803" class="InductiveConstructor">∀-intro</a>
    <a id="28861" class="Symbol">(</a><a id="28862" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a> <a id="28864" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a> <a id="28866" class="Symbol">(</a><a id="28867" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="28871" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="28875" class="Symbol">)</a> <a id="28877" href="blog.Sequent.html#28555" class="Function Operator">·</a> <a id="28879" class="Symbol">((</a><a id="28881" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="28885" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="28889" class="Symbol">)</a> <a id="28891" href="blog.Sequent.html#28555" class="Function Operator">·</a> <a id="28893" class="Symbol">(</a><a id="28894" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="28898" class="Symbol">(</a><a id="28899" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="28905" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="28909" class="Symbol">))))</a>

  <a id="SystemF.plus"></a><a id="28917" href="blog.Sequent.html#28917" class="Function">plus</a> <a id="28922" class="Symbol">:</a> <a id="28924" class="Symbol">∀{</a><a id="28926" href="blog.Sequent.html#28926" class="Bound">Γ</a><a id="28927" class="Symbol">}</a> <a id="28929" class="Symbol">-&gt;</a> <a id="28932" href="blog.Sequent.html#28926" class="Bound">Γ</a> <a id="28934" href="blog.Sequent.html#21269" class="Datatype Operator">⊢</a> <a id="28936" class="Symbol">(</a><a id="28937" href="blog.Sequent.html#28712" class="Function">church-nat</a> <a id="28948" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28951" href="blog.Sequent.html#28712" class="Function">church-nat</a> <a id="28962" href="blog.Sequent.html#22924" class="InductiveConstructor Operator">=&gt;</a> <a id="28965" href="blog.Sequent.html#28712" class="Function">church-nat</a><a id="28975" class="Symbol">)</a>
  <a id="28979" class="Comment">-- λ a b. ∀ α. λ z s. (a α (b α z s) s)</a>
  <a id="29021" href="blog.Sequent.html#28917" class="Function">plus</a> <a id="29026" class="Symbol">=</a>
    <a id="29032" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a> <a id="29034" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a> <a id="29036" href="blog.Sequent.html#27803" class="InductiveConstructor">∀-intro</a>
          <a id="29054" class="Symbol">(</a><a id="29055" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a> <a id="29057" href="blog.Sequent.html#28487" class="Function Operator">ƛ</a>
            <a id="29071" class="Symbol">(</a><a id="29072" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="29076" class="Symbol">(</a><a id="29077" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="29083" class="Symbol">(</a><a id="29084" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="29090" class="Symbol">(</a><a id="29091" href="blog.Sequent.html#26337" class="InductiveConstructor">skip</a> <a id="29096" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="29100" class="Symbol">))))</a> <a id="29105" href="blog.Sequent.html#28624" class="Function Operator">·ₜ</a>
              <a id="29122" class="Symbol">(</a><a id="29123" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="29127" class="Symbol">(</a><a id="29128" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="29133" class="Symbol">(</a><a id="29134" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="29139" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="29143" class="Symbol">)))</a> <a id="29147" href="blog.Sequent.html#28555" class="Function Operator">·</a>
              <a id="29163" class="Symbol">(</a><a id="29164" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="29168" class="Symbol">(</a><a id="29169" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="29175" class="Symbol">(</a><a id="29176" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="29182" class="Symbol">(</a><a id="29183" href="blog.Sequent.html#26337" class="InductiveConstructor">skip</a> <a id="29188" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="29192" class="Symbol">)))</a> <a id="29196" href="blog.Sequent.html#28624" class="Function Operator">·ₜ</a>
                <a id="29215" href="blog.Sequent.html#23162" class="InductiveConstructor">var</a> <a id="29219" class="Symbol">(</a><a id="29220" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="29225" class="Symbol">(</a><a id="29226" href="blog.Sequent.html#22466" class="InductiveConstructor">skip</a> <a id="29231" href="blog.Sequent.html#22399" class="InductiveConstructor">here</a><a id="29235" class="Symbol">))</a> <a id="29238" href="blog.Sequent.html#28555" class="Function Operator">·</a>
                <a id="29256" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="29260" class="Symbol">(</a><a id="29261" href="blog.Sequent.html#26263" class="InductiveConstructor">there</a> <a id="29267" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="29271" class="Symbol">)</a> <a id="29273" href="blog.Sequent.html#28555" class="Function Operator">·</a>
                <a id="29291" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="29295" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="29299" class="Symbol">)</a> <a id="29301" href="blog.Sequent.html#28555" class="Function Operator">·</a>
              <a id="29317" href="blog.Sequent.html#26624" class="InductiveConstructor">var</a> <a id="29321" href="blog.Sequent.html#26215" class="InductiveConstructor">here</a><a id="29325" class="Symbol">)</a>
</pre>
#+END_EXPORT

* System F_ω

#+BEGIN_EXPORT html
<pre class="Agda">
<a id="29370" class="Keyword">module</a> <a id="SystemFω"></a><a id="29377" href="blog.Sequent.html#29377" class="Module">SystemFω</a> <a id="29386" class="Keyword">where</a>
  <a id="29394" class="Keyword">infix</a> <a id="29400" class="Number">2</a> <a id="29402" href="blog.Sequent.html#30679" class="Datatype Operator">_⊢_</a> <a id="29406" href="blog.Sequent.html#30621" class="Datatype Operator">_⊢ₖ_</a> <a id="29411" href="blog.Sequent.html#30744" class="Datatype Operator">_∋ₖ_</a> <a id="29416" href="blog.Sequent.html#30808" class="Datatype Operator">_∋_</a>
  <a id="29422" class="Keyword">infixl</a> <a id="29429" class="Number">3</a> <a id="29431" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">_,_</a> <a id="29435" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">_,ₖ_</a>
  <a id="29442" class="Keyword">infixr</a> <a id="29449" class="Number">4</a> <a id="29451" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">_=&gt;_</a>
  <a id="29458" class="Keyword">infixr</a> <a id="29465" class="Number">5</a> <a id="29467" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">_+_</a>
  <a id="29473" class="Keyword">infixr</a> <a id="29480" class="Number">6</a> <a id="29482" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">_×_</a>


</pre>
#+END_EXPORT

With System \( F \), we gained the power to internalise functions that work for
every input type (like the polymorphic identity). However, we would also like to
express type functions. To achieve this, a few modifications must be made to
normal System F.

1. We introduce the concept of a "kind". A kind is like a type for type level
   functions. The kind of the \( T \mapsto T \times \mathbb{N} \), for instance,
   would be \( * \Rightarrow * \) where \( * \) is the kind of types.
2. Because we want to refer to type functions, the context should be able to
   contain variables of a kind other than \( * \).



#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="30135" class="Keyword">interleaved</a> <a id="30147" class="Keyword">mutual</a>
</pre>
#+END_EXPORT

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="30187" class="Keyword">data</a> <a id="SystemFω.Ctx"></a><a id="30192" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="30196" class="Symbol">:</a> <a id="30198" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

The kinding judgment "in context \( \Gamma \) something of kind \( k \)" is a
straightforward expansion of the old ~_⊢*~ "in context \( \Gamma \), something of kind
type" judgment. This time, instead of only supporting the kind \( * \), it
supports a type expression of any kind.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="30516" class="Keyword">data</a> <a id="SystemFω.Kind"></a><a id="30521" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="30526" class="Symbol">:</a> <a id="30528" href="Agda.Primitive.html#388" class="Primitive">Set</a> <a id="30532" class="Keyword">where</a>
      <a id="SystemFω.Kind.*"></a><a id="30544" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a> <a id="30546" class="Symbol">:</a> <a id="30548" href="blog.Sequent.html#30521" class="Datatype">Kind</a>
      <a id="SystemFω.Kind._=&gt;_"></a><a id="30559" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">_=&gt;_</a> <a id="30564" class="Symbol">:</a> <a id="30566" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="30571" class="Symbol">-&gt;</a> <a id="30574" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="30579" class="Symbol">-&gt;</a> <a id="30582" href="blog.Sequent.html#30521" class="Datatype">Kind</a>

    <a id="30592" class="Comment">-- Kinding judgment</a>
    <a id="30616" class="Keyword">data</a> <a id="SystemFω._⊢ₖ_"></a><a id="30621" href="blog.Sequent.html#30621" class="Datatype Operator">_⊢ₖ_</a> <a id="30626" class="Symbol">:</a> <a id="30628" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="30632" class="Symbol">-&gt;</a> <a id="30635" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="30640" class="Symbol">-&gt;</a> <a id="30643" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="30651" class="Comment">-- Typing judgment</a>
    <a id="30674" class="Keyword">data</a> <a id="SystemFω._⊢_"></a><a id="30679" href="blog.Sequent.html#30679" class="Datatype Operator">_⊢_</a> <a id="30683" class="Symbol">:</a> <a id="30685" class="Symbol">(</a><a id="30686" href="blog.Sequent.html#30686" class="Bound">Γ</a> <a id="30688" class="Symbol">:</a> <a id="30690" href="blog.Sequent.html#30192" class="Datatype">Ctx</a><a id="30693" class="Symbol">)</a> <a id="30695" class="Symbol">-&gt;</a> <a id="30698" href="blog.Sequent.html#30686" class="Bound">Γ</a> <a id="30700" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="30703" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a> <a id="30705" class="Symbol">-&gt;</a> <a id="30708" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="30716" class="Comment">-- Kind references</a>
    <a id="30739" class="Keyword">data</a> <a id="SystemFω._∋ₖ_"></a><a id="30744" href="blog.Sequent.html#30744" class="Datatype Operator">_∋ₖ_</a> <a id="30749" class="Symbol">:</a> <a id="30751" class="Symbol">(</a><a id="30752" href="blog.Sequent.html#30752" class="Bound">Γ</a> <a id="30754" class="Symbol">:</a> <a id="30756" href="blog.Sequent.html#30192" class="Datatype">Ctx</a><a id="30759" class="Symbol">)</a> <a id="30761" class="Symbol">-&gt;</a> <a id="30764" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="30769" class="Symbol">-&gt;</a> <a id="30772" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="30780" class="Comment">-- Term references</a>
    <a id="30803" class="Keyword">data</a> <a id="SystemFω._∋_"></a><a id="30808" href="blog.Sequent.html#30808" class="Datatype Operator">_∋_</a> <a id="30812" class="Symbol">:</a> <a id="30814" class="Symbol">(</a><a id="30815" href="blog.Sequent.html#30815" class="Bound">Γ</a> <a id="30817" class="Symbol">:</a> <a id="30819" href="blog.Sequent.html#30192" class="Datatype">Ctx</a><a id="30822" class="Symbol">)</a> <a id="30824" class="Symbol">-&gt;</a> <a id="30827" href="blog.Sequent.html#30815" class="Bound">Γ</a> <a id="30829" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="30832" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a> <a id="30834" class="Symbol">-&gt;</a> <a id="30837" href="Agda.Primitive.html#388" class="Primitive">Set</a>
</pre>
#+END_EXPORT

** Context

In the STLC, a context was a list of the term variable's types. Now, it will be
containing two things: the (term level) variable's types (in the polymorphic
identity function, we had \( x : \alpha \)) and the type variables themselves (\(
\alpha : * \)).

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="31142" class="Keyword">data</a> <a id="31147" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="31151" class="Keyword">where</a>
      <a id="SystemFω.Ctx.●"></a><a id="31163" href="blog.Sequent.html#31163" class="InductiveConstructor">●</a> <a id="31165" class="Symbol">:</a> <a id="31167" href="blog.Sequent.html#30192" class="Datatype">Ctx</a>
      <a id="31177" class="Comment">-- Term level variables of type t</a>
      <a id="SystemFω.Ctx._,_"></a><a id="31217" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">_,_</a> <a id="31221" class="Symbol">:</a> <a id="31223" class="Symbol">(</a><a id="31224" href="blog.Sequent.html#31224" class="Bound">Γ</a> <a id="31226" class="Symbol">:</a> <a id="31228" href="blog.Sequent.html#30192" class="Datatype">Ctx</a><a id="31231" class="Symbol">)</a> <a id="31233" class="Symbol">-&gt;</a> <a id="31236" class="Symbol">(</a><a id="31237" href="blog.Sequent.html#31237" class="Bound">t</a> <a id="31239" class="Symbol">:</a> <a id="31241" href="blog.Sequent.html#31224" class="Bound">Γ</a> <a id="31243" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="31246" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="31247" class="Symbol">)</a> <a id="31249" class="Symbol">-&gt;</a> <a id="31252" href="blog.Sequent.html#30192" class="Datatype">Ctx</a>
      <a id="31262" class="Comment">-- Type level variables</a>
      <a id="SystemFω.Ctx._,ₖ_"></a><a id="31292" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">_,ₖ_</a> <a id="31297" class="Symbol">:</a> <a id="31299" class="Symbol">(</a><a id="31300" href="blog.Sequent.html#31300" class="Bound">Γ</a> <a id="31302" class="Symbol">:</a> <a id="31304" href="blog.Sequent.html#30192" class="Datatype">Ctx</a><a id="31307" class="Symbol">)</a> <a id="31309" class="Symbol">-&gt;</a> <a id="31312" href="blog.Sequent.html#30521" class="Datatype">Kind</a> <a id="31317" class="Symbol">-&gt;</a> <a id="31320" href="blog.Sequent.html#30192" class="Datatype">Ctx</a>
</pre>
#+END_EXPORT

** Type references

When a type exists in a context, it may refer to type variables in the context.
Since our context now contains to kinds of variables (type variables and term
variables), we have to account for this by adding a constructor ~skip~ .

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="31609" class="Keyword">data</a> <a id="31614" class="Symbol">_</a> <a id="31616" class="Keyword">where</a>
      <a id="SystemFω._∋ₖ_.here"></a><a id="31628" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="31633" class="Symbol">:</a> <a id="31635" class="Symbol">∀{</a><a id="31637" href="blog.Sequent.html#31637" class="Bound">Γ</a> <a id="31639" href="blog.Sequent.html#31639" class="Bound">k</a><a id="31640" class="Symbol">}</a> <a id="31642" class="Symbol">-&gt;</a> <a id="31645" href="blog.Sequent.html#31637" class="Bound">Γ</a> <a id="31647" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="31650" href="blog.Sequent.html#31639" class="Bound">k</a> <a id="31652" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="31655" href="blog.Sequent.html#31639" class="Bound">k</a>
      <a id="SystemFω._∋ₖ_.skipk"></a><a id="31663" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="31669" class="Symbol">:</a> <a id="31671" class="Symbol">∀{</a><a id="31673" href="blog.Sequent.html#31673" class="Bound">Γ</a> <a id="31675" href="blog.Sequent.html#31675" class="Bound">k</a> <a id="31677" href="blog.Sequent.html#31677" class="Bound">l</a><a id="31678" class="Symbol">}</a>
        <a id="31688" class="Symbol">-&gt;</a> <a id="31691" href="blog.Sequent.html#31673" class="Bound">Γ</a> <a id="31693" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="31696" href="blog.Sequent.html#31675" class="Bound">k</a>
        <a id="31706" class="Symbol">-&gt;</a> <a id="31709" href="blog.Sequent.html#31673" class="Bound">Γ</a> <a id="31711" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="31714" href="blog.Sequent.html#31677" class="Bound">l</a> <a id="31716" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="31719" href="blog.Sequent.html#31675" class="Bound">k</a>
      <a id="SystemFω._∋ₖ_.skipt"></a><a id="31727" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="31733" class="Symbol">:</a> <a id="31735" class="Symbol">∀{</a><a id="31737" href="blog.Sequent.html#31737" class="Bound">Γ</a> <a id="31739" href="blog.Sequent.html#31739" class="Bound">k</a> <a id="31741" href="blog.Sequent.html#31741" class="Bound">t</a><a id="31742" class="Symbol">}</a>
        <a id="31752" class="Symbol">-&gt;</a> <a id="31755" href="blog.Sequent.html#31737" class="Bound">Γ</a> <a id="31757" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="31760" href="blog.Sequent.html#31739" class="Bound">k</a>
        <a id="31770" class="Symbol">-&gt;</a> <a id="31773" href="blog.Sequent.html#31737" class="Bound">Γ</a> <a id="31775" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="31777" href="blog.Sequent.html#31741" class="Bound">t</a> <a id="31779" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="31782" href="blog.Sequent.html#31739" class="Bound">k</a>
</pre>
#+END_EXPORT

** Types

The universe of types is very similar to what we had in the STLC, but this time,
it depends on the context in which the type lives. Most old types that we had in
the STLC, don't change much.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="32019" class="Keyword">data</a> <a id="32024" class="Symbol">_</a> <a id="32026" class="Keyword">where</a>
      <a id="SystemFω._⊢ₖ_.⊤"></a><a id="32038" href="blog.Sequent.html#32038" class="InductiveConstructor">⊤</a> <a id="32040" class="Symbol">:</a> <a id="32042" class="Symbol">∀{</a><a id="32044" href="blog.Sequent.html#32044" class="Bound">Γ</a><a id="32045" class="Symbol">}</a> <a id="32047" class="Symbol">-&gt;</a> <a id="32050" href="blog.Sequent.html#32044" class="Bound">Γ</a> <a id="32052" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32055" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
      <a id="SystemFω._⊢ₖ_.⊥"></a><a id="32063" href="blog.Sequent.html#32063" class="InductiveConstructor">⊥</a> <a id="32065" class="Symbol">:</a> <a id="32067" class="Symbol">∀{</a><a id="32069" href="blog.Sequent.html#32069" class="Bound">Γ</a><a id="32070" class="Symbol">}</a> <a id="32072" class="Symbol">-&gt;</a> <a id="32075" href="blog.Sequent.html#32069" class="Bound">Γ</a> <a id="32077" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32080" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>

      <a id="SystemFω._⊢ₖ_._×_"></a><a id="32089" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">_×_</a> <a id="32093" class="Symbol">:</a> <a id="32095" class="Symbol">∀{</a><a id="32097" href="blog.Sequent.html#32097" class="Bound">Γ</a><a id="32098" class="Symbol">}</a> <a id="32100" class="Symbol">(</a><a id="32101" href="blog.Sequent.html#32101" class="Bound">a</a> <a id="32103" class="Symbol">:</a> <a id="32105" href="blog.Sequent.html#32097" class="Bound">Γ</a> <a id="32107" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32110" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32111" class="Symbol">)</a> <a id="32113" class="Symbol">(</a><a id="32114" href="blog.Sequent.html#32114" class="Bound">b</a> <a id="32116" class="Symbol">:</a> <a id="32118" href="blog.Sequent.html#32097" class="Bound">Γ</a> <a id="32120" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32123" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32124" class="Symbol">)</a>
        <a id="32134" class="Symbol">-&gt;</a> <a id="32137" href="blog.Sequent.html#32097" class="Bound">Γ</a> <a id="32139" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32142" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>

      <a id="SystemFω._⊢ₖ_._+_"></a><a id="32151" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">_+_</a> <a id="32155" class="Symbol">:</a> <a id="32157" class="Symbol">∀{</a><a id="32159" href="blog.Sequent.html#32159" class="Bound">Γ</a><a id="32160" class="Symbol">}</a> <a id="32162" class="Symbol">(</a><a id="32163" href="blog.Sequent.html#32163" class="Bound">a</a> <a id="32165" class="Symbol">:</a> <a id="32167" href="blog.Sequent.html#32159" class="Bound">Γ</a> <a id="32169" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32172" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32173" class="Symbol">)</a> <a id="32175" class="Symbol">(</a><a id="32176" href="blog.Sequent.html#32176" class="Bound">b</a> <a id="32178" class="Symbol">:</a> <a id="32180" href="blog.Sequent.html#32159" class="Bound">Γ</a> <a id="32182" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32185" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32186" class="Symbol">)</a>
        <a id="32196" class="Symbol">-&gt;</a> <a id="32199" href="blog.Sequent.html#32159" class="Bound">Γ</a> <a id="32201" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32204" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>

      <a id="SystemFω._⊢ₖ_._=&gt;_"></a><a id="32213" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">_=&gt;_</a> <a id="32218" class="Symbol">:</a> <a id="32220" class="Symbol">∀{</a><a id="32222" href="blog.Sequent.html#32222" class="Bound">Γ</a><a id="32223" class="Symbol">}</a> <a id="32225" class="Symbol">(</a><a id="32226" href="blog.Sequent.html#32226" class="Bound">a</a> <a id="32228" class="Symbol">:</a> <a id="32230" href="blog.Sequent.html#32222" class="Bound">Γ</a> <a id="32232" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32235" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32236" class="Symbol">)</a> <a id="32238" class="Symbol">(</a><a id="32239" href="blog.Sequent.html#32239" class="Bound">b</a> <a id="32241" class="Symbol">:</a> <a id="32243" href="blog.Sequent.html#32222" class="Bound">Γ</a> <a id="32245" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32248" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="32249" class="Symbol">)</a>
        <a id="32259" class="Symbol">-&gt;</a> <a id="32262" href="blog.Sequent.html#32222" class="Bound">Γ</a> <a id="32264" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32267" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>

      <a id="SystemFω._⊢ₖ_.var"></a><a id="32276" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="32280" class="Symbol">:</a> <a id="32282" class="Symbol">∀{</a><a id="32284" href="blog.Sequent.html#32284" class="Bound">Γ</a> <a id="32286" href="blog.Sequent.html#32286" class="Bound">k</a><a id="32287" class="Symbol">}</a> <a id="32289" class="Symbol">-&gt;</a> <a id="32292" href="blog.Sequent.html#32284" class="Bound">Γ</a> <a id="32294" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="32297" href="blog.Sequent.html#32286" class="Bound">k</a> <a id="32299" class="Symbol">-&gt;</a> <a id="32302" href="blog.Sequent.html#32284" class="Bound">Γ</a> <a id="32304" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32307" href="blog.Sequent.html#32286" class="Bound">k</a>

      <a id="SystemFω._⊢ₖ_.abs"></a><a id="32316" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a> <a id="32320" class="Symbol">:</a> <a id="32322" class="Symbol">∀{</a><a id="32324" href="blog.Sequent.html#32324" class="Bound">Γ</a> <a id="32326" href="blog.Sequent.html#32326" class="Bound">k1</a> <a id="32329" href="blog.Sequent.html#32329" class="Bound">k2</a><a id="32331" class="Symbol">}</a>
        <a id="32341" class="Symbol">-&gt;</a> <a id="32344" href="blog.Sequent.html#32324" class="Bound">Γ</a> <a id="32346" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="32349" href="blog.Sequent.html#32326" class="Bound">k1</a> <a id="32352" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32355" href="blog.Sequent.html#32329" class="Bound">k2</a>
        <a id="32366" class="Symbol">-&gt;</a> <a id="32369" href="blog.Sequent.html#32324" class="Bound">Γ</a> <a id="32371" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32374" href="blog.Sequent.html#32326" class="Bound">k1</a> <a id="32377" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">=&gt;</a> <a id="32380" href="blog.Sequent.html#32329" class="Bound">k2</a>

      <a id="SystemFω._⊢ₖ_.app"></a><a id="32390" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="32394" class="Symbol">:</a> <a id="32396" class="Symbol">∀{</a><a id="32398" href="blog.Sequent.html#32398" class="Bound">Γ</a> <a id="32400" href="blog.Sequent.html#32400" class="Bound">k1</a> <a id="32403" href="blog.Sequent.html#32403" class="Bound">k2</a><a id="32405" class="Symbol">}</a>
        <a id="32415" class="Symbol">-&gt;</a> <a id="32418" href="blog.Sequent.html#32398" class="Bound">Γ</a> <a id="32420" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32423" href="blog.Sequent.html#32400" class="Bound">k1</a> <a id="32426" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">=&gt;</a> <a id="32429" href="blog.Sequent.html#32403" class="Bound">k2</a>
        <a id="32440" class="Symbol">-&gt;</a> <a id="32443" href="blog.Sequent.html#32398" class="Bound">Γ</a> <a id="32445" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32448" href="blog.Sequent.html#32400" class="Bound">k1</a>
        <a id="32459" class="Symbol">-&gt;</a> <a id="32462" href="blog.Sequent.html#32398" class="Bound">Γ</a> <a id="32464" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32467" href="blog.Sequent.html#32403" class="Bound">k2</a>

      <a id="SystemFω._⊢ₖ_.∀&#39;"></a><a id="32477" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="32480" class="Symbol">:</a> <a id="32482" class="Symbol">∀{</a><a id="32484" href="blog.Sequent.html#32484" class="Bound">Γ</a><a id="32485" class="Symbol">}</a> <a id="32487" class="Symbol">(</a><a id="32488" href="blog.Sequent.html#32488" class="Bound">k</a> <a id="32490" class="Symbol">:</a> <a id="32492" href="blog.Sequent.html#30521" class="Datatype">Kind</a><a id="32496" class="Symbol">)</a>
        <a id="32506" class="Symbol">-&gt;</a> <a id="32509" href="blog.Sequent.html#32484" class="Bound">Γ</a> <a id="32511" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="32514" href="blog.Sequent.html#32488" class="Bound">k</a> <a id="32516" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32519" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
        <a id="32529" class="Symbol">-&gt;</a> <a id="32532" href="blog.Sequent.html#32484" class="Bound">Γ</a> <a id="32534" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32537" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
</pre>
#+END_EXPORT

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="32572" class="Comment">-- Renaming and substitution for types</a>
    <a id="SystemFω.tRenaming"></a><a id="32615" href="blog.Sequent.html#32615" class="Function">tRenaming</a> <a id="32625" class="Symbol">:</a> <a id="32627" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="32631" class="Symbol">-&gt;</a> <a id="32634" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="32638" class="Symbol">-&gt;</a> <a id="32641" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="32649" href="blog.Sequent.html#32615" class="Function">tRenaming</a> <a id="32659" href="blog.Sequent.html#32659" class="Bound">Γ</a> <a id="32661" href="blog.Sequent.html#32661" class="Bound">Δ</a> <a id="32663" class="Symbol">=</a> <a id="32665" class="Symbol">∀{</a><a id="32667" href="blog.Sequent.html#32667" class="Bound">k</a><a id="32668" class="Symbol">}</a> <a id="32670" class="Symbol">-&gt;</a> <a id="32673" href="blog.Sequent.html#32659" class="Bound">Γ</a> <a id="32675" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="32678" href="blog.Sequent.html#32667" class="Bound">k</a> <a id="32680" class="Symbol">-&gt;</a> <a id="32683" href="blog.Sequent.html#32661" class="Bound">Δ</a> <a id="32685" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="32688" href="blog.Sequent.html#32667" class="Bound">k</a>

    <a id="SystemFω.tSubstitution"></a><a id="32695" href="blog.Sequent.html#32695" class="Function">tSubstitution</a> <a id="32709" class="Symbol">:</a> <a id="32711" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="32715" class="Symbol">-&gt;</a> <a id="32718" href="blog.Sequent.html#30192" class="Datatype">Ctx</a> <a id="32722" class="Symbol">-&gt;</a> <a id="32725" href="Agda.Primitive.html#388" class="Primitive">Set</a>
    <a id="32733" href="blog.Sequent.html#32695" class="Function">tSubstitution</a> <a id="32747" href="blog.Sequent.html#32747" class="Bound">Γ</a> <a id="32749" href="blog.Sequent.html#32749" class="Bound">Δ</a> <a id="32751" class="Symbol">=</a> <a id="32753" class="Symbol">∀{</a><a id="32755" href="blog.Sequent.html#32755" class="Bound">k</a><a id="32756" class="Symbol">}</a> <a id="32758" class="Symbol">-&gt;</a> <a id="32761" href="blog.Sequent.html#32747" class="Bound">Γ</a> <a id="32763" href="blog.Sequent.html#30744" class="Datatype Operator">∋ₖ</a> <a id="32766" href="blog.Sequent.html#32755" class="Bound">k</a> <a id="32768" class="Symbol">-&gt;</a> <a id="32771" href="blog.Sequent.html#32749" class="Bound">Δ</a> <a id="32773" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32776" href="blog.Sequent.html#32755" class="Bound">k</a>

    <a id="SystemFω.tRename"></a><a id="32783" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32791" class="Symbol">:</a> <a id="32793" class="Symbol">∀{</a><a id="32795" href="blog.Sequent.html#32795" class="Bound">Γ</a> <a id="32797" href="blog.Sequent.html#32797" class="Bound">Δ</a> <a id="32799" href="blog.Sequent.html#32799" class="Bound">k</a><a id="32800" class="Symbol">}</a> <a id="32802" class="Symbol">-&gt;</a> <a id="32805" href="blog.Sequent.html#32615" class="Function">tRenaming</a> <a id="32815" href="blog.Sequent.html#32795" class="Bound">Γ</a> <a id="32817" href="blog.Sequent.html#32797" class="Bound">Δ</a> <a id="32819" class="Symbol">-&gt;</a> <a id="32822" href="blog.Sequent.html#32795" class="Bound">Γ</a> <a id="32824" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32827" href="blog.Sequent.html#32799" class="Bound">k</a> <a id="32829" class="Symbol">-&gt;</a> <a id="32832" href="blog.Sequent.html#32797" class="Bound">Δ</a> <a id="32834" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="32837" href="blog.Sequent.html#32799" class="Bound">k</a>
    <a id="32843" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32851" href="blog.Sequent.html#32851" class="Bound">r</a> <a id="32853" href="blog.Sequent.html#32038" class="InductiveConstructor">⊤</a> <a id="32855" class="Symbol">=</a> <a id="32857" href="blog.Sequent.html#32038" class="InductiveConstructor">⊤</a>
    <a id="32863" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32871" href="blog.Sequent.html#32871" class="Bound">r</a> <a id="32873" href="blog.Sequent.html#32063" class="InductiveConstructor">⊥</a> <a id="32875" class="Symbol">=</a> <a id="32877" href="blog.Sequent.html#32063" class="InductiveConstructor">⊥</a>
    <a id="32883" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32891" href="blog.Sequent.html#32891" class="Bound">r</a> <a id="32893" class="Symbol">(</a><a id="32894" href="blog.Sequent.html#32894" class="Bound">t1</a> <a id="32897" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="32899" href="blog.Sequent.html#32899" class="Bound">t2</a><a id="32901" class="Symbol">)</a> <a id="32903" class="Symbol">=</a> <a id="32905" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32913" href="blog.Sequent.html#32891" class="Bound">r</a> <a id="32915" href="blog.Sequent.html#32894" class="Bound">t1</a> <a id="32918" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="32920" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32928" href="blog.Sequent.html#32891" class="Bound">r</a> <a id="32930" href="blog.Sequent.html#32899" class="Bound">t2</a>
    <a id="32937" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32945" href="blog.Sequent.html#32945" class="Bound">r</a> <a id="32947" class="Symbol">(</a><a id="32948" href="blog.Sequent.html#32948" class="Bound">t1</a> <a id="32951" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="32953" href="blog.Sequent.html#32953" class="Bound">t2</a><a id="32955" class="Symbol">)</a> <a id="32957" class="Symbol">=</a> <a id="32959" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32967" href="blog.Sequent.html#32945" class="Bound">r</a> <a id="32969" href="blog.Sequent.html#32948" class="Bound">t1</a> <a id="32972" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="32974" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32982" href="blog.Sequent.html#32945" class="Bound">r</a> <a id="32984" href="blog.Sequent.html#32953" class="Bound">t2</a>
    <a id="32991" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="32999" href="blog.Sequent.html#32999" class="Bound">r</a> <a id="33001" class="Symbol">(</a><a id="33002" href="blog.Sequent.html#33002" class="Bound">t1</a> <a id="33005" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="33008" href="blog.Sequent.html#33008" class="Bound">t2</a><a id="33010" class="Symbol">)</a> <a id="33012" class="Symbol">=</a> <a id="33014" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33022" href="blog.Sequent.html#32999" class="Bound">r</a> <a id="33024" href="blog.Sequent.html#33002" class="Bound">t1</a> <a id="33027" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="33029" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33037" href="blog.Sequent.html#32999" class="Bound">r</a> <a id="33039" href="blog.Sequent.html#33008" class="Bound">t2</a>
    <a id="33046" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33054" href="blog.Sequent.html#33054" class="Bound">r</a> <a id="33056" class="Symbol">(</a><a id="33057" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="33061" href="blog.Sequent.html#33061" class="Bound">t1</a> <a id="33064" href="blog.Sequent.html#33064" class="Bound">t2</a><a id="33066" class="Symbol">)</a> <a id="33068" class="Symbol">=</a> <a id="33070" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="33074" class="Symbol">(</a><a id="33075" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33083" href="blog.Sequent.html#33054" class="Bound">r</a> <a id="33085" href="blog.Sequent.html#33061" class="Bound">t1</a><a id="33087" class="Symbol">)</a> <a id="33089" class="Symbol">(</a><a id="33090" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33098" href="blog.Sequent.html#33054" class="Bound">r</a> <a id="33100" href="blog.Sequent.html#33064" class="Bound">t2</a><a id="33102" class="Symbol">)</a>
    <a id="33108" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33116" href="blog.Sequent.html#33116" class="Bound">r</a> <a id="33118" class="Symbol">(</a><a id="33119" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33123" href="blog.Sequent.html#33123" class="Bound">x</a><a id="33124" class="Symbol">)</a> <a id="33126" class="Symbol">=</a> <a id="33128" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33132" class="Symbol">(</a><a id="33133" href="blog.Sequent.html#33116" class="Bound">r</a> <a id="33135" href="blog.Sequent.html#33123" class="Bound">x</a><a id="33136" class="Symbol">)</a>
    <a id="33142" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33150" href="blog.Sequent.html#33150" class="Bound">r</a> <a id="33152" class="Symbol">(</a><a id="33153" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a> <a id="33157" href="blog.Sequent.html#33157" class="Bound">t</a><a id="33158" class="Symbol">)</a> <a id="33160" class="Symbol">=</a> <a id="33162" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a> <a id="33166" class="Symbol">(</a><a id="33167" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33175" class="Symbol">(λ</a> <a id="33178" class="Symbol">{</a> <a id="33180" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33185" class="Symbol">→</a> <a id="33187" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33192" class="Symbol">;</a> <a id="33194" class="Symbol">(</a><a id="33195" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33201" href="blog.Sequent.html#33201" class="Bound">x</a><a id="33202" class="Symbol">)</a> <a id="33204" class="Symbol">→</a> <a id="33206" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33212" class="Symbol">(</a><a id="33213" href="blog.Sequent.html#33150" class="Bound">r</a> <a id="33215" href="blog.Sequent.html#33201" class="Bound">x</a><a id="33216" class="Symbol">)})</a> <a id="33220" href="blog.Sequent.html#33157" class="Bound">t</a><a id="33221" class="Symbol">)</a>
    <a id="33227" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33235" href="blog.Sequent.html#33235" class="Bound">r</a> <a id="33237" class="Symbol">(</a><a id="33238" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="33241" href="blog.Sequent.html#33241" class="Bound">k</a> <a id="33243" href="blog.Sequent.html#33243" class="Bound">x</a><a id="33244" class="Symbol">)</a> <a id="33246" class="Symbol">=</a> <a id="33248" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="33251" href="blog.Sequent.html#33241" class="Bound">k</a> <a id="33253" class="Symbol">(</a><a id="33254" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33262" class="Symbol">(λ</a> <a id="33265" class="Symbol">{</a> <a id="33267" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33272" class="Symbol">→</a> <a id="33274" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33279" class="Symbol">;</a> <a id="33281" class="Symbol">(</a><a id="33282" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33288" href="blog.Sequent.html#33288" class="Bound">x</a><a id="33289" class="Symbol">)</a> <a id="33291" class="Symbol">→</a> <a id="33293" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33299" class="Symbol">(</a><a id="33300" href="blog.Sequent.html#33235" class="Bound">r</a> <a id="33302" href="blog.Sequent.html#33288" class="Bound">x</a><a id="33303" class="Symbol">)})</a> <a id="33307" href="blog.Sequent.html#33243" class="Bound">x</a><a id="33308" class="Symbol">)</a>

    <a id="SystemFω.tSub"></a><a id="33315" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33320" class="Symbol">:</a> <a id="33322" class="Symbol">∀{</a><a id="33324" href="blog.Sequent.html#33324" class="Bound">Γ</a> <a id="33326" href="blog.Sequent.html#33326" class="Bound">Δ</a> <a id="33328" href="blog.Sequent.html#33328" class="Bound">k</a><a id="33329" class="Symbol">}</a> <a id="33331" class="Symbol">-&gt;</a> <a id="33334" href="blog.Sequent.html#32695" class="Function">tSubstitution</a> <a id="33348" href="blog.Sequent.html#33324" class="Bound">Γ</a> <a id="33350" href="blog.Sequent.html#33326" class="Bound">Δ</a> <a id="33352" class="Symbol">-&gt;</a> <a id="33355" href="blog.Sequent.html#33324" class="Bound">Γ</a> <a id="33357" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="33360" href="blog.Sequent.html#33328" class="Bound">k</a> <a id="33362" class="Symbol">-&gt;</a> <a id="33365" href="blog.Sequent.html#33326" class="Bound">Δ</a> <a id="33367" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="33370" href="blog.Sequent.html#33328" class="Bound">k</a>
    <a id="33376" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33381" href="blog.Sequent.html#33381" class="Bound">σ</a> <a id="33383" href="blog.Sequent.html#32038" class="InductiveConstructor">⊤</a> <a id="33385" class="Symbol">=</a> <a id="33387" href="blog.Sequent.html#32038" class="InductiveConstructor">⊤</a>
    <a id="33393" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33398" href="blog.Sequent.html#33398" class="Bound">σ</a> <a id="33400" href="blog.Sequent.html#32063" class="InductiveConstructor">⊥</a> <a id="33402" class="Symbol">=</a> <a id="33404" href="blog.Sequent.html#32063" class="InductiveConstructor">⊥</a>
    <a id="33410" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33415" href="blog.Sequent.html#33415" class="Bound">σ</a> <a id="33417" class="Symbol">(</a><a id="33418" href="blog.Sequent.html#33418" class="Bound">t1</a> <a id="33421" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="33423" href="blog.Sequent.html#33423" class="Bound">t2</a><a id="33425" class="Symbol">)</a> <a id="33427" class="Symbol">=</a> <a id="33429" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33434" href="blog.Sequent.html#33415" class="Bound">σ</a> <a id="33436" href="blog.Sequent.html#33418" class="Bound">t1</a> <a id="33439" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="33441" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33446" href="blog.Sequent.html#33415" class="Bound">σ</a> <a id="33448" href="blog.Sequent.html#33423" class="Bound">t2</a>
    <a id="33455" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33460" href="blog.Sequent.html#33460" class="Bound">σ</a> <a id="33462" class="Symbol">(</a><a id="33463" href="blog.Sequent.html#33463" class="Bound">t1</a> <a id="33466" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="33468" href="blog.Sequent.html#33468" class="Bound">t2</a><a id="33470" class="Symbol">)</a> <a id="33472" class="Symbol">=</a> <a id="33474" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33479" href="blog.Sequent.html#33460" class="Bound">σ</a> <a id="33481" href="blog.Sequent.html#33463" class="Bound">t1</a> <a id="33484" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="33486" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33491" href="blog.Sequent.html#33460" class="Bound">σ</a> <a id="33493" href="blog.Sequent.html#33468" class="Bound">t2</a>
    <a id="33500" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33505" href="blog.Sequent.html#33505" class="Bound">σ</a> <a id="33507" class="Symbol">(</a><a id="33508" href="blog.Sequent.html#33508" class="Bound">t1</a> <a id="33511" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="33514" href="blog.Sequent.html#33514" class="Bound">t2</a><a id="33516" class="Symbol">)</a> <a id="33518" class="Symbol">=</a> <a id="33520" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33525" href="blog.Sequent.html#33505" class="Bound">σ</a> <a id="33527" href="blog.Sequent.html#33508" class="Bound">t1</a> <a id="33530" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="33533" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33538" href="blog.Sequent.html#33505" class="Bound">σ</a> <a id="33540" href="blog.Sequent.html#33514" class="Bound">t2</a>
    <a id="33547" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33552" href="blog.Sequent.html#33552" class="Bound">σ</a> <a id="33554" class="Symbol">(</a><a id="33555" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="33559" href="blog.Sequent.html#33559" class="Bound">t1</a> <a id="33562" href="blog.Sequent.html#33562" class="Bound">t2</a><a id="33564" class="Symbol">)</a> <a id="33566" class="Symbol">=</a> <a id="33568" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="33572" class="Symbol">(</a><a id="33573" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33578" href="blog.Sequent.html#33552" class="Bound">σ</a> <a id="33580" href="blog.Sequent.html#33559" class="Bound">t1</a><a id="33582" class="Symbol">)</a> <a id="33584" class="Symbol">(</a><a id="33585" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33590" href="blog.Sequent.html#33552" class="Bound">σ</a> <a id="33592" href="blog.Sequent.html#33562" class="Bound">t2</a><a id="33594" class="Symbol">)</a>
    <a id="33600" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33605" href="blog.Sequent.html#33605" class="Bound">σ</a> <a id="33607" class="Symbol">(</a><a id="33608" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33612" href="blog.Sequent.html#33612" class="Bound">x</a><a id="33613" class="Symbol">)</a> <a id="33615" class="Symbol">=</a> <a id="33617" href="blog.Sequent.html#33605" class="Bound">σ</a> <a id="33619" href="blog.Sequent.html#33612" class="Bound">x</a>
    <a id="33625" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33630" href="blog.Sequent.html#33630" class="Bound">σ</a> <a id="33632" class="Symbol">(</a><a id="33633" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a> <a id="33637" href="blog.Sequent.html#33637" class="Bound">t</a><a id="33638" class="Symbol">)</a> <a id="33640" class="Symbol">=</a> <a id="33642" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a> <a id="33646" class="Symbol">(</a><a id="33647" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33652" class="Symbol">(λ</a> <a id="33655" class="Symbol">{</a> <a id="33657" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33662" class="Symbol">→</a> <a id="33664" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33668" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33673" class="Symbol">;</a> <a id="33675" class="Symbol">(</a><a id="33676" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33682" href="blog.Sequent.html#33682" class="Bound">x</a><a id="33683" class="Symbol">)</a> <a id="33685" class="Symbol">→</a> <a id="33687" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33695" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33701" class="Symbol">(</a><a id="33702" href="blog.Sequent.html#33630" class="Bound">σ</a> <a id="33704" href="blog.Sequent.html#33682" class="Bound">x</a><a id="33705" class="Symbol">)})</a> <a id="33709" href="blog.Sequent.html#33637" class="Bound">t</a><a id="33710" class="Symbol">)</a>
    <a id="33716" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33721" href="blog.Sequent.html#33721" class="Bound">σ</a> <a id="33723" class="Symbol">(</a><a id="33724" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="33727" href="blog.Sequent.html#33727" class="Bound">k</a> <a id="33729" href="blog.Sequent.html#33729" class="Bound">t</a><a id="33730" class="Symbol">)</a> <a id="33732" class="Symbol">=</a> <a id="33734" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="33737" href="blog.Sequent.html#33727" class="Bound">k</a> <a id="33739" class="Symbol">(</a><a id="33740" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33745" class="Symbol">(λ</a> <a id="33748" class="Symbol">{</a> <a id="33750" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33755" class="Symbol">→</a> <a id="33757" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33761" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33766" class="Symbol">;</a> <a id="33768" class="Symbol">(</a><a id="33769" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33775" href="blog.Sequent.html#33775" class="Bound">x</a><a id="33776" class="Symbol">)</a> <a id="33778" class="Symbol">→</a> <a id="33780" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="33788" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33794" class="Symbol">(</a><a id="33795" href="blog.Sequent.html#33721" class="Bound">σ</a> <a id="33797" href="blog.Sequent.html#33775" class="Bound">x</a><a id="33798" class="Symbol">)})</a> <a id="33802" href="blog.Sequent.html#33729" class="Bound">t</a><a id="33803" class="Symbol">)</a>

    <a id="SystemFω._[_]t"></a><a id="33810" href="blog.Sequent.html#33810" class="Function Operator">_[_]t</a> <a id="33816" class="Symbol">:</a> <a id="33818" class="Symbol">∀{</a><a id="33820" href="blog.Sequent.html#33820" class="Bound">Γ</a> <a id="33822" href="blog.Sequent.html#33822" class="Bound">k1</a> <a id="33825" href="blog.Sequent.html#33825" class="Bound">k2</a><a id="33827" class="Symbol">}</a> <a id="33829" class="Symbol">-&gt;</a> <a id="33832" href="blog.Sequent.html#33820" class="Bound">Γ</a> <a id="33834" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="33837" href="blog.Sequent.html#33822" class="Bound">k1</a> <a id="33840" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="33843" href="blog.Sequent.html#33825" class="Bound">k2</a> <a id="33846" class="Symbol">-&gt;</a> <a id="33849" href="blog.Sequent.html#33820" class="Bound">Γ</a> <a id="33851" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="33854" href="blog.Sequent.html#33822" class="Bound">k1</a> <a id="33857" class="Symbol">-&gt;</a> <a id="33860" href="blog.Sequent.html#33820" class="Bound">Γ</a> <a id="33862" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="33865" href="blog.Sequent.html#33825" class="Bound">k2</a>
    <a id="33872" href="blog.Sequent.html#33872" class="Bound">l</a> <a id="33874" href="blog.Sequent.html#33810" class="Function Operator">[</a> <a id="33876" href="blog.Sequent.html#33876" class="Bound">r</a> <a id="33878" href="blog.Sequent.html#33810" class="Function Operator">]t</a> <a id="33881" class="Symbol">=</a> <a id="33883" href="blog.Sequent.html#33315" class="Function">tSub</a> <a id="33888" class="Symbol">(λ</a> <a id="33891" class="Symbol">{</a> <a id="33893" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a> <a id="33898" class="Symbol">→</a> <a id="33900" href="blog.Sequent.html#33876" class="Bound">r</a>
                       <a id="33925" class="Symbol">;</a> <a id="33927" class="Symbol">(</a><a id="33928" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="33934" href="blog.Sequent.html#33934" class="Bound">x</a><a id="33935" class="Symbol">)</a> <a id="33937" class="Symbol">→</a> <a id="33939" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="33943" href="blog.Sequent.html#33934" class="Bound">x</a><a id="33944" class="Symbol">})</a> <a id="33947" href="blog.Sequent.html#33872" class="Bound">l</a>
</pre>
#+END_EXPORT

** Term references

Just as we had to add one constructor to type references earlier, we will do the
same for term references. Note that we re used the same names as for type
references, except we switched the meanings of ~there~ and ~skip~.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="34225" class="Keyword">data</a> <a id="34230" href="blog.Sequent.html#30808" class="Datatype Operator">_∋_</a> <a id="34234" class="Keyword">where</a>
      <a id="SystemFω._∋_.here"></a><a id="34246" href="blog.Sequent.html#34246" class="InductiveConstructor">here</a> <a id="34251" class="Symbol">:</a> <a id="34253" class="Symbol">∀{</a><a id="34255" href="blog.Sequent.html#34255" class="Bound">Γ</a> <a id="34257" href="blog.Sequent.html#34257" class="Bound">t</a><a id="34258" class="Symbol">}</a>
        <a id="34268" class="Symbol">-&gt;</a> <a id="34271" href="blog.Sequent.html#34255" class="Bound">Γ</a> <a id="34273" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="34275" href="blog.Sequent.html#34257" class="Bound">t</a> <a id="34277" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34279" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34287" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="34293" href="blog.Sequent.html#34257" class="Bound">t</a>
      <a id="SystemFω._∋_.skipt"></a><a id="34301" href="blog.Sequent.html#34301" class="InductiveConstructor">skipt</a> <a id="34307" class="Symbol">:</a> <a id="34309" class="Symbol">∀{</a><a id="34311" href="blog.Sequent.html#34311" class="Bound">Γ</a> <a id="34313" href="blog.Sequent.html#34313" class="Bound">t1</a> <a id="34316" href="blog.Sequent.html#34316" class="Bound">t2</a><a id="34318" class="Symbol">}</a>
        <a id="34328" class="Symbol">-&gt;</a> <a id="34331" href="blog.Sequent.html#34311" class="Bound">Γ</a> <a id="34333" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34335" href="blog.Sequent.html#34313" class="Bound">t1</a>
        <a id="34346" class="Symbol">-&gt;</a> <a id="34349" href="blog.Sequent.html#34311" class="Bound">Γ</a> <a id="34351" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="34353" href="blog.Sequent.html#34316" class="Bound">t2</a> <a id="34356" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34358" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34366" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="34372" href="blog.Sequent.html#34313" class="Bound">t1</a>

      <a id="SystemFω._∋_.skipk"></a><a id="34382" href="blog.Sequent.html#34382" class="InductiveConstructor">skipk</a> <a id="34388" class="Symbol">:</a> <a id="34390" class="Symbol">∀{</a><a id="34392" href="blog.Sequent.html#34392" class="Bound">Γ</a> <a id="34394" href="blog.Sequent.html#34394" class="Bound">t</a> <a id="34396" href="blog.Sequent.html#34396" class="Bound">k</a><a id="34397" class="Symbol">}</a>
        <a id="34407" class="Symbol">-&gt;</a> <a id="34410" href="blog.Sequent.html#34392" class="Bound">Γ</a> <a id="34412" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34414" href="blog.Sequent.html#34394" class="Bound">t</a>
        <a id="34424" class="Symbol">-&gt;</a> <a id="34427" href="blog.Sequent.html#34392" class="Bound">Γ</a> <a id="34429" href="blog.Sequent.html#31292" class="InductiveConstructor Operator">,ₖ</a> <a id="34432" href="blog.Sequent.html#34396" class="Bound">k</a> <a id="34434" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34436" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34444" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="34450" href="blog.Sequent.html#34394" class="Bound">t</a>
</pre>
#+END_EXPORT

** Terms

The definition of old terms are mostly the same as before, except we have to use
a bunch of ~tShift~'s when we want to consider the same type in multple contexts.

#+BEGIN_EXPORT html
<pre class="Agda">
    <a id="34659" class="Keyword">data</a> <a id="34664" class="Symbol">_</a> <a id="34666" class="Keyword">where</a>
      <a id="SystemFω._⊢_.var"></a><a id="34678" href="blog.Sequent.html#34678" class="InductiveConstructor">var</a> <a id="34682" class="Symbol">:</a> <a id="34684" class="Symbol">∀{</a><a id="34686" href="blog.Sequent.html#34686" class="Bound">Γ</a> <a id="34688" href="blog.Sequent.html#34688" class="Bound">t</a><a id="34689" class="Symbol">}</a>
        <a id="34699" class="Symbol">-&gt;</a> <a id="34702" href="blog.Sequent.html#34686" class="Bound">Γ</a> <a id="34704" href="blog.Sequent.html#30808" class="Datatype Operator">∋</a> <a id="34706" href="blog.Sequent.html#34688" class="Bound">t</a>
        <a id="34716" class="Symbol">-&gt;</a> <a id="34719" href="blog.Sequent.html#34686" class="Bound">Γ</a> <a id="34721" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34723" href="blog.Sequent.html#34688" class="Bound">t</a>


      <a id="SystemFω._⊢_.×-intro"></a><a id="34733" href="blog.Sequent.html#34733" class="InductiveConstructor">×-intro</a> <a id="34741" class="Symbol">:</a> <a id="34743" class="Symbol">∀{</a><a id="34745" href="blog.Sequent.html#34745" class="Bound">Γ</a> <a id="34747" href="blog.Sequent.html#34747" class="Bound">t1</a> <a id="34750" href="blog.Sequent.html#34750" class="Bound">t2</a><a id="34752" class="Symbol">}</a>
        <a id="34762" class="Symbol">-&gt;</a> <a id="34765" href="blog.Sequent.html#34745" class="Bound">Γ</a> <a id="34767" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34769" href="blog.Sequent.html#34747" class="Bound">t1</a>
        <a id="34780" class="Symbol">-&gt;</a> <a id="34783" href="blog.Sequent.html#34745" class="Bound">Γ</a> <a id="34785" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34787" href="blog.Sequent.html#34750" class="Bound">t2</a>
        <a id="34798" class="Symbol">-&gt;</a> <a id="34801" href="blog.Sequent.html#34745" class="Bound">Γ</a> <a id="34803" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34805" href="blog.Sequent.html#34747" class="Bound">t1</a> <a id="34808" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="34810" href="blog.Sequent.html#34750" class="Bound">t2</a>

      <a id="SystemFω._⊢_.×-elim"></a><a id="34820" href="blog.Sequent.html#34820" class="InductiveConstructor">×-elim</a> <a id="34827" class="Symbol">:</a> <a id="34829" class="Symbol">∀{</a><a id="34831" href="blog.Sequent.html#34831" class="Bound">Γ</a> <a id="34833" href="blog.Sequent.html#34833" class="Bound">t1</a> <a id="34836" href="blog.Sequent.html#34836" class="Bound">t2</a> <a id="34839" href="blog.Sequent.html#34839" class="Bound">t3</a><a id="34841" class="Symbol">}</a>
        <a id="34851" class="Symbol">-&gt;</a> <a id="34854" href="blog.Sequent.html#34831" class="Bound">Γ</a> <a id="34856" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34858" href="blog.Sequent.html#34833" class="Bound">t1</a> <a id="34861" href="blog.Sequent.html#32089" class="InductiveConstructor Operator">×</a> <a id="34863" href="blog.Sequent.html#34836" class="Bound">t2</a>
        <a id="34874" class="Symbol">-&gt;</a> <a id="34877" href="blog.Sequent.html#34831" class="Bound">Γ</a> <a id="34879" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="34881" href="blog.Sequent.html#34833" class="Bound">t1</a> <a id="34884" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="34886" class="Symbol">(</a><a id="34887" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34895" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="34901" href="blog.Sequent.html#34836" class="Bound">t2</a><a id="34903" class="Symbol">)</a> <a id="34905" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34907" class="Symbol">(</a><a id="34908" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34916" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="34922" class="Symbol">(</a><a id="34923" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="34931" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a>  <a id="34938" href="blog.Sequent.html#34839" class="Bound">t3</a><a id="34940" class="Symbol">))</a>
        <a id="34951" class="Symbol">-&gt;</a> <a id="34954" href="blog.Sequent.html#34831" class="Bound">Γ</a> <a id="34956" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="34958" href="blog.Sequent.html#34839" class="Bound">t3</a>


      <a id="SystemFω._⊢_.+-intro-left"></a><a id="34969" href="blog.Sequent.html#34969" class="InductiveConstructor">+-intro-left</a> <a id="34982" class="Symbol">:</a> <a id="34984" class="Symbol">∀{</a><a id="34986" href="blog.Sequent.html#34986" class="Bound">Γ</a> <a id="34988" href="blog.Sequent.html#34988" class="Bound">t1</a> <a id="34991" href="blog.Sequent.html#34991" class="Bound">t2</a><a id="34993" class="Symbol">}</a>
        <a id="35003" class="Symbol">-&gt;</a> <a id="35006" href="blog.Sequent.html#34986" class="Bound">Γ</a> <a id="35008" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35010" href="blog.Sequent.html#34988" class="Bound">t1</a>
        <a id="35021" class="Symbol">-&gt;</a> <a id="35024" href="blog.Sequent.html#34986" class="Bound">Γ</a> <a id="35026" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35028" href="blog.Sequent.html#34988" class="Bound">t1</a> <a id="35031" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="35033" href="blog.Sequent.html#34991" class="Bound">t2</a>

      <a id="SystemFω._⊢_.+-intro-right"></a><a id="35043" href="blog.Sequent.html#35043" class="InductiveConstructor">+-intro-right</a> <a id="35057" class="Symbol">:</a> <a id="35059" class="Symbol">∀{</a><a id="35061" href="blog.Sequent.html#35061" class="Bound">Γ</a> <a id="35063" href="blog.Sequent.html#35063" class="Bound">t1</a> <a id="35066" href="blog.Sequent.html#35066" class="Bound">t2</a><a id="35068" class="Symbol">}</a>
        <a id="35078" class="Symbol">-&gt;</a> <a id="35081" href="blog.Sequent.html#35061" class="Bound">Γ</a> <a id="35083" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35085" href="blog.Sequent.html#35066" class="Bound">t2</a>
        <a id="35096" class="Symbol">-&gt;</a> <a id="35099" href="blog.Sequent.html#35061" class="Bound">Γ</a> <a id="35101" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35103" href="blog.Sequent.html#35063" class="Bound">t1</a> <a id="35106" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="35108" href="blog.Sequent.html#35066" class="Bound">t2</a>

      <a id="SystemFω._⊢_.+-elim"></a><a id="35118" href="blog.Sequent.html#35118" class="InductiveConstructor">+-elim</a> <a id="35125" class="Symbol">:</a> <a id="35127" class="Symbol">∀{</a><a id="35129" href="blog.Sequent.html#35129" class="Bound">Γ</a> <a id="35131" href="blog.Sequent.html#35131" class="Bound">t1</a> <a id="35134" href="blog.Sequent.html#35134" class="Bound">t2</a> <a id="35137" href="blog.Sequent.html#35137" class="Bound">t3</a><a id="35139" class="Symbol">}</a>
        <a id="35149" class="Symbol">-&gt;</a> <a id="35152" href="blog.Sequent.html#35129" class="Bound">Γ</a> <a id="35154" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35156" href="blog.Sequent.html#35131" class="Bound">t1</a> <a id="35159" href="blog.Sequent.html#32151" class="InductiveConstructor Operator">+</a> <a id="35161" href="blog.Sequent.html#35134" class="Bound">t2</a>
        <a id="35172" class="Symbol">-&gt;</a> <a id="35175" href="blog.Sequent.html#35129" class="Bound">Γ</a> <a id="35177" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="35179" href="blog.Sequent.html#35131" class="Bound">t1</a> <a id="35182" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35184" class="Symbol">(</a><a id="35185" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="35193" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="35199" href="blog.Sequent.html#35137" class="Bound">t3</a><a id="35201" class="Symbol">)</a>
        <a id="35211" class="Symbol">-&gt;</a> <a id="35214" href="blog.Sequent.html#35129" class="Bound">Γ</a> <a id="35216" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="35218" href="blog.Sequent.html#35134" class="Bound">t2</a> <a id="35221" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35223" class="Symbol">(</a><a id="35224" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="35232" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="35238" href="blog.Sequent.html#35137" class="Bound">t3</a><a id="35240" class="Symbol">)</a>
        <a id="35250" class="Symbol">-&gt;</a> <a id="35253" href="blog.Sequent.html#35129" class="Bound">Γ</a> <a id="35255" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35257" href="blog.Sequent.html#35137" class="Bound">t3</a>


      <a id="SystemFω._⊢_.=&gt;-intro"></a><a id="35268" href="blog.Sequent.html#35268" class="InductiveConstructor">=&gt;-intro</a> <a id="35277" class="Symbol">:</a> <a id="35279" class="Symbol">∀{</a><a id="35281" href="blog.Sequent.html#35281" class="Bound">Γ</a> <a id="35283" href="blog.Sequent.html#35283" class="Bound">t1</a> <a id="35286" href="blog.Sequent.html#35286" class="Bound">t2</a><a id="35288" class="Symbol">}</a>
        <a id="35298" class="Symbol">-&gt;</a> <a id="35301" href="blog.Sequent.html#35281" class="Bound">Γ</a> <a id="35303" href="blog.Sequent.html#31217" class="InductiveConstructor Operator">,</a> <a id="35305" href="blog.Sequent.html#35283" class="Bound">t1</a> <a id="35308" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35310" class="Symbol">(</a><a id="35311" href="blog.Sequent.html#32783" class="Function">tRename</a> <a id="35319" href="blog.Sequent.html#31727" class="InductiveConstructor">skipt</a> <a id="35325" href="blog.Sequent.html#35286" class="Bound">t2</a><a id="35327" class="Symbol">)</a>
        <a id="35337" class="Symbol">-&gt;</a> <a id="35340" href="blog.Sequent.html#35281" class="Bound">Γ</a> <a id="35342" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35344" href="blog.Sequent.html#35283" class="Bound">t1</a> <a id="35347" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="35350" href="blog.Sequent.html#35286" class="Bound">t2</a>
      <a id="SystemFω._⊢_.=&gt;-elim"></a><a id="35359" href="blog.Sequent.html#35359" class="InductiveConstructor">=&gt;-elim</a> <a id="35367" class="Symbol">:</a> <a id="35369" class="Symbol">∀{</a><a id="35371" href="blog.Sequent.html#35371" class="Bound">Γ</a> <a id="35373" href="blog.Sequent.html#35373" class="Bound">t1</a> <a id="35376" href="blog.Sequent.html#35376" class="Bound">t2</a><a id="35378" class="Symbol">}</a>
        <a id="35388" class="Symbol">-&gt;</a> <a id="35391" href="blog.Sequent.html#35371" class="Bound">Γ</a> <a id="35393" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35395" href="blog.Sequent.html#35373" class="Bound">t1</a> <a id="35398" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="35401" href="blog.Sequent.html#35376" class="Bound">t2</a>
        <a id="35412" class="Symbol">-&gt;</a> <a id="35415" href="blog.Sequent.html#35371" class="Bound">Γ</a> <a id="35417" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35419" href="blog.Sequent.html#35373" class="Bound">t1</a>
        <a id="35430" class="Symbol">-&gt;</a> <a id="35433" href="blog.Sequent.html#35371" class="Bound">Γ</a> <a id="35435" href="blog.Sequent.html#30679" class="Datatype Operator">⊢</a> <a id="35437" href="blog.Sequent.html#35376" class="Bound">t2</a>
</pre>
#+END_EXPORT


** Encoding the functor typeclass

In Haskell, a witness that some type constructor \( f : * \Rightarrow * \) is a functor is
simply some polymorphic ~fmap~ implementation.

#+BEGIN_EXPORT html
<pre class="Agda">
  <a id="SystemFω.functor"></a><a id="35646" href="blog.Sequent.html#35646" class="Function">functor</a> <a id="35654" class="Symbol">:</a> <a id="35656" class="Symbol">∀{</a><a id="35658" href="blog.Sequent.html#35658" class="Bound">Γ</a><a id="35659" class="Symbol">}</a> <a id="35661" class="Symbol">-&gt;</a> <a id="35664" href="blog.Sequent.html#35658" class="Bound">Γ</a> <a id="35666" href="blog.Sequent.html#30621" class="Datatype Operator">⊢ₖ</a> <a id="35669" class="Symbol">(</a><a id="35670" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a> <a id="35672" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">=&gt;</a> <a id="35675" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a><a id="35676" class="Symbol">)</a> <a id="35678" href="blog.Sequent.html#30559" class="InductiveConstructor Operator">=&gt;</a> <a id="35681" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
  <a id="35685" class="Comment">-- functor f = ∀(a:*). ∀(b:*) (a =&gt; b) =&gt; f a =&gt; f b</a>
  <a id="35740" href="blog.Sequent.html#35646" class="Function">functor</a> <a id="35748" class="Symbol">=</a>
    <a id="35754" href="blog.Sequent.html#32316" class="InductiveConstructor">abs</a>
      <a id="35764" class="Symbol">(</a><a id="35765" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="35768" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
        <a id="35778" class="Symbol">(</a><a id="35779" href="blog.Sequent.html#32477" class="InductiveConstructor">∀&#39;</a> <a id="35782" href="blog.Sequent.html#30544" class="InductiveConstructor">*</a>
          <a id="35794" class="Symbol">((</a><a id="35796" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35800" class="Symbol">(</a><a id="35801" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35807" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35811" class="Symbol">)</a> <a id="35813" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="35816" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35820" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35824" class="Symbol">)</a>
           <a id="35837" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="35840" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="35844" class="Symbol">(</a><a id="35845" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35849" class="Symbol">(</a><a id="35850" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35856" class="Symbol">(</a><a id="35857" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35863" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35867" class="Symbol">)))</a> <a id="35871" class="Symbol">(</a><a id="35872" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35876" class="Symbol">(</a><a id="35877" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35883" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35887" class="Symbol">))</a>
           <a id="35901" href="blog.Sequent.html#32213" class="InductiveConstructor Operator">=&gt;</a> <a id="35904" href="blog.Sequent.html#32390" class="InductiveConstructor">app</a> <a id="35908" class="Symbol">(</a><a id="35909" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35913" class="Symbol">(</a><a id="35914" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35920" class="Symbol">(</a><a id="35921" href="blog.Sequent.html#31663" class="InductiveConstructor">skipk</a> <a id="35927" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35931" class="Symbol">)))</a> <a id="35935" class="Symbol">(</a><a id="35936" href="blog.Sequent.html#32276" class="InductiveConstructor">var</a> <a id="35940" href="blog.Sequent.html#31628" class="InductiveConstructor">here</a><a id="35944" class="Symbol">))))</a>
</pre>
#+END_EXPORT
