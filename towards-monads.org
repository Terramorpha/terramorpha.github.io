# -*- ispell-dictionary: "english" -*-
:PROPERTIES:
:ID:       c2f42e22-39fb-48c4-a194-270224670d1b
:CREATED:  2024-04-04T16:00:10
:END:
#+title: Towards monads
#+subtitle: (or yet another monad tutorial)
#+LANGUAGE: english
#+PROPERTY: header-args :exports code

This page on the Haskell wiki is very good and looks like what I wanted to
write: https://wiki.haskell.org/All_About_Monads.

Monads are a very useful concept/design pattern in functional programming that
has unfortunately attained /meme status/ partly because of the following phrase[fn:1]:

#+begin_quote
A monad is a monoid in the category of endofunctors, what's the problem?
#+end_quote

However, I propose that the usual way of explaining monads through metaphors is
bad. Monads are much easier the understand when viewed as the common abstraction over
src_haskell{List}, src_haskell{Maybe}, src_haskell{Either}, src_haskell{State s}, src_haskell{IO},
src_haskell{Writer o} and src_haskell{Reader o}.

[fn:1]http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html

* src_haskell{Maybe}

The src_haskell{Maybe} type is a good place to start. This is the type we use
when we realise we have a partial function (that might not be able to return
what it promised) and we want to signal that information in the type itself.

Here is an exemple of how we might use it:

#+begin_src haskell
couldFailString :: Maybe String

couldFailInt :: Maybe Int

program :: Maybe (Int, String)
program = case couldFailString of
  Nothing -> Nothing
  Just str -> let strlen = length str in
    case couldFailInt of
      Nothing -> Nothing
      Just int -> Just (int, str)
#+end_src


We achieved correctness! However, this is very annoying to write and to read.
The "look at the results, if we get nothing, return nothing but otherwise,
continue" pattern repeated /ad nauseum/ hinders readibility. To the rescue:
monads! We know we have an src_haskell{Monad Maybe} instance, so we can rely on
the two functions:

#+begin_src haskell
bind :: Monad m => m a -> (a -> m b) -> m b
return :: Monad m => a -> m a
#+end_src

src_haskell{return} is simple enough: it would wrap(for instance) an
src_haskell{Int} into a src_haskell{Maybe Int}. The signature of
src_haskell{bind}, however is confusing. Let's make the signature more concrete:

#+begin_src haskell
bindMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
#+end_src

The src_haskell{Maybe a} part is the object we would pattern match on(the
results) and src_haskell{a -> Maybe b} is the "if we get something, continue"
part. Let's rewrite our program using these functions.

#+begin_src haskell
couldFailString :: Maybe String

couldFailInt :: Maybe Int

program :: Maybe (Int, String)
program = bindMaybe couldFailString
          (\str -> let strlen = length str in
              bindMaybe couldFailInt
                (\int -> Just (int, str)))
#+end_src

This is more pleasing to the eye, but still slightly confusing. You could
imagine what happens to the nesting when we do many operations.[fn:2]

However, in Haskell, there is syntactic sugar for this kind of operation: ~do~
notation. Let's change our code to use ~do~ notation:

#+begin_src haskell
couldFailString :: Maybe String

couldFailInt :: Maybe Int

program :: Maybe (Int, String)
program = do
  str <- bindMaybe couldFailString
  let strlen = length str
  int <- couldFailInt
  Just (int, str)
#+end_src

This ~do~ notation has exactly the same semantics(in terms of ~bind~) as ~await~ (in
terms of ~.then~) in Javascript. In other words,

#+begin_src haskell
program = do
  x <- doSomething
  ...
#+end_src

becomes

#+begin_src haskell
program = bind doSomething (\x -> ...)
#+end_src

[fn:2]For those who use javascript Promises, src_haskell{bind} is essentially
the same thing as src_js{.then(x => ...)} for promises. If you know the solution
to the nesting problem, you won't be surprised by what comes next.

* src_haskell{Either e}

Whereas src_haskell{Maybe a} means "potentially an src_haskell{a}",
src_haskell{Either e a} means "potentially an src_haskell{a}, or else an error
of type src_haskell{e}".

If you know the ~go~ programming language, using do notation on src_haskell{Either
SomeErrorType x} is the same as doing

#+begin_src go
results, err := doSomething()
if err != nil {
	return err
}
...
#+end_src

The semantics is similar to src_haskell{Maybe}

* src_haskell{List}

One might wonder why it would be useful to have src_haskell{List} as a monad.
The answer is modelling nondeterminism in a functional way.

#+begin_src haskell :results output :exports both
:{
prog :: [(Int, String)]
prog = do 
  int <- [1, 2, 3, 4, 5]
  str <- ["one", "two", "three"]
  if int `mod` 2 == 0
    then []
    else return (int, str)
:}

prog
#+end_src

#+RESULTS:
: [(1,"one"),(1,"two"),(1,"three"),(3,"one"),(3,"two"),(3,"three"),(5,"one"),(5,"two"),(5,"three")]

Here, the ~<-~ operation splits the universe into parallel branches. The end
result is a list of all the branches that got to the end. For instance, here is
how you might find Pythagorean triples:

#+begin_src haskell :results output :exports both
:{
n = 40

prog :: [(Int, Int, Int)]
prog = do
  a <- [1..n]
  b <- [a..n]
  c <- [b..n]
  if a*a + b*b == c*c
    then return (a, b, c)
    else []
  :}

prog
#+end_src

#+RESULTS:
: [(3,4,5),(5,12,13),(6,8,10),(7,24,25),(8,15,17),(9,12,15),(10,24,26),(12,16,20),(12,35,37),(15,20,25),(15,36,39),(16,30,34),(18,24,30),(20,21,29),(21,28,35),(24,32,40)]

* src_haskell{Writer}

Let's say you want to do logging. In an imperative language, you would use
mutability and append to a log object (or even put prints everywhere). Here, you
can't do that. Instead, you accumulate a list of "entries" with each computation
you do.

#+begin_src haskell
data Writer o t = Writer (t, [o])

wReturn x = Writer (x, [])
Writer (val, log) >>= f = let Writer (v2, log2) = f val
                          in Writer (v2, log ++ log2)


Writer ("allo", "truc") >>= \x -> wReturn $ x ++ "truuuc"
#+end_src

#+RESULTS:

* src_haskell{Reader}

This time, you want to propagate "global variables" though your whole program,
but you can't actually mutate any global variables.
