# -*- ispell-dictionary: "english" -*-
:PROPERTIES:
:ID:       1ffbcfb3-9c0d-4776-b163-b737369328b4
:CREATED:  2024-04-02T22:46:19
:END:
#+title: Guix: elevate your computing
#+LANGUAGE: english

* Why Guix?

Guix, which is a package manager similar to [[https://nixos.org/][Nix]], takes a different approach to
functional package management that reuses GNU's extension language, [[https://www.gnu.org/software/guile/][Guile
scheme]], instead of nix (the language) as a package definition domain specific
language. By using scheme, an extendable and Turing complete language, it opens
the door to a world of possibilities. It enables the use of macros, of complex
algorithms and of a rich set of types through which users can express packages.

* A crash course on creating a package

Let's say you, a user of Guix, want to use a specific piece of software which is
not currently in Guix. I'll use as an example transmission-remote-gtk because
it was one of the first packages I wrote.

A great way to learn something new is by looking at examples. In our case, we
will familiarize ourselves with the anatomy of a package by looking at a very
simple package: hello.

We can easily open in our favorite text editor the definition for a package by
invoking =guix edit=.

#+begin_src scheme
;; $ guix edit hello

(define-public hello
  (package
   (name "hello")
   (version "2.10")
   (source (origin
            (method url-fetch)
            (uri (string-append "mirror://gnu/hello/hello-" version
                                ".tar.gz"))
            (sha256
             (base32
              "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
   (build-system gnu-build-system)
   (synopsis "Hello, GNU world: An example GNU package")
   (description
    "GNU Hello prints the message \"Hello, world!\" and then exits.  It
serves as an example of standard GNU coding practices.  As such, it supports
command-line arguments, multiple languages, and so on.")
   (home-page "https://www.gnu.org/software/hello/")
   (license gpl3+)))

#+end_src

Let's look over the basic anatomy of the =hello= package.

First, we can see that in Guix, every package is a value stored in some
module. The fact that packages are simply values inhabiting some module means,
as we will see later, that you can manipulate them just like any record in any
programming language. You can see where the package is defined by using the
=guix show= command.

#+begin_src shell :results output :exports both
guix show hello
#+end_src

#+RESULTS:
#+begin_example
name: hello
version: 2.12.1
outputs:
+ out: everything
systems: x86_64-linux i686-linux
dependencies: 
location: gnu/packages/base.scm:92:2
homepage: https://www.gnu.org/software/hello/
license: GPL 3+
synopsis: Hello, GNU world: An example GNU package  
description: GNU Hello prints the message "Hello, world!" and then exits.  It
+ serves as an example of standard GNU coding practices.  As such, it supports
+ command-line arguments, multiple languages, and so on.

#+end_example

Here, =package= is the form used to create the record and define all of its
attributes.

- =name= is pretty self-explanatory. It's simply a string used to name the
  package. This is actually what will be used by Guix to present packages to the
  user (=guix install=, =guix search=, =guix show=, etc.)

-  =version= is the version. It is not necessary to use a particular scheme, but
  Guix is still able to recognize the most up-to-date version.

- =source= is a file-like-object (more on that later, you will hear this term a
  lot) which points to the source code of the package

- =buid-system= is a value of type =<build-system>= used to abstract away the
  repetitive =./configure && make && make install= dance often used when compiling
  software.

- =synopsis=, =description= and =home-page= contain, respectively, a short summary of
  the package's purpose, a longer description and the webpage which one can
  visit to learn more about the project.

- =license= contains a =<license>= record that will be used by guix to determine the
  package's license. The fact it isn't simply a string makes the idea of
  programmatically combing through a list of packages with a certain license
  possible.

Now that we understand a bit better what goes into a package, we are one
step closer to creating our own. But before we start, it might be useful to know
how one is supposed to actually use that package we are writing.

To instruct guix to build a package, we use the src_shell{guix build} command.
If we give it a package name, as in src_shell{guix build hello}, it will find
hello in our =GUIX_PACKAGE_PATH= environment variable and if it doesn't find it,
in the =(guix packages ...)= modules.

We could modify the =GUIX_PACKAGE_PATH= environment variable, but a simpler way
is to simply pass the =-f= flag to =guix build=. When we actually have a package
to build, that's what we are going to do.

First, let's create an empty scheme file, then type in an ill-formed package
definition.

#+begin_src scheme :exports code
;; package.scm
(package)
#+end_src

If we type =guix build -f package.scm= into our terminal, we will receive a
helpful error message and a nice hint.

#+begin_src
/home/terramorpha/test/tmp.Sms/main.scm:1:1: error: package: unbound variable
hint: Did you forget `(use-modules (guix packages))'?
#+end_src

Oh! we need to actually import the module containing the =(package)= form. Let's try again.

#+begin_src scheme :exports code
;; package.scm
(use-modules (guix packages))
(package)
#+end_src

This time, we get a different kind of error, there are missing fields.

#+begin_src
/home/terramorpha/test/tmp.Sms/main.scm:3:0: error: (package): missing field initializers (name version source build-system synopsis description license home-page)
#+end_src

The majority of those fields, we can already fill them. What we end up with is
the following incomplete definition:

#+begin_src scheme
(use-modules (guix packages))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 ;; (source ???)
 ;; (build-system ???)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 ;; (license ???)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))
#+end_src

The simplest field to fill would be =license=. We can find the licenses that are
already defined in the =(guix licenses)= module. You can fire up a guile repl
using =guix repl= and type the following form:

#+begin_src scheme
(use-modules ((guix licenses) #:prefix license:))
#+end_src

now, you can type =license:= and tab complete your way to the correct value. If
we look at the github repository, we notice the project is licensed under the
GPL 2. Let's update our code accordingly.

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 ;; (source ???)
 ;; (build-system ???)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))
#+end_src

We are still missing the =source= and =build-system= fields.

The lowest hanging fruit seems to be the =build-system=. If we look inside one
of the release tarballs of the github repo, we recognize an =autogen.sh=
file. This must be a regular GNU autotools setup.

the =<build-system>= for such software is located in the =(guix buid-system
gnu)= and is named =gnu-build-system=.

We import the necessary module and modify our definition:

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:)
             (guix build-system gnu))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 ;; (source ???)
 (build-system gnu-build-system)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))
#+end_src

Now, the only field left to fill is =source=. This is, in my opinion, the part
which requires a bit of an explanation.

Guix is what is called a functional package manager. One of the consequences of
the "purely functional package manager" approach is that the dependencies of a
package are explicit. This means that every package, to be built, must come with
an explicit list of all other packages which it will need to both run and
compile. In the nix world, the smallest unit which possesses thes properties is
the derivation. A derivation contains references to every build dependency:
compilers, dynamic libraries, /et cetera/. Guix uses a similar but different
approach. It has many types of objects which can be "compiled" down to a
derivation. A package is such an object. In the case of our package, the
dependencies would be =gtk=, some other things and the compiler toolchain. The
instructions on how to build it would be the =gnu-build-system= and it's output
would be simply =out= (the default name of a package with only one output).

Then, where does the source code of a package come from? It's certainly one
of it's dependencies, but how can we define the source code in terms of
derivations. To download data from the internet, we use something called fixed
output derivations. While the build process of a normal derivation happens in an
isolated sandbox to prevent reproducibility issues, fixed output derivations'
output have a fixed hash, so we can let them communicate with the outside world
at build time.

One form defined by the guix libraries to create a fixed output derivation from
an URL is =origin=. It eases the definition of derivations which will simply
download a file from the internet. The =origin= record, located in =guix packages=,
is built from three parts. a =uri=, a =method= and some cryptographic hash. One
=method= we can use to download the source code of our program is url-fetch which
is located in =(guix download)=. We can now fill out parts of the missing =source=
field.

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:)
             (guix build-system gnu)
             (guix download))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 (source (origin (uri "https://github.com/transmission-remote-gtk/transmission-remote-gtk/archive/refs/tags/1.4.2.tar.gz")
                 (method url-fetch)))
 (build-system gnu-build-system)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))
#+end_src

But when we run =guix build -f package.scm=, guix still complains: =missing
field initializers (hash)=

We need to enter a valid hash. One way we can easily download then hash a file
at some url is by using the =guix download= command:

#+begin_src shell :results output :exports both
guix download "https://github.com/transmission-remote-gtk/transmission-remote-gtk/archive/refs/tags/1.4.2.tar.gz"
#+end_src

#+RESULTS:
: /gnu/store/26pkmmascf0pnzcwziy7216hzlqb5rqd-1.4.2.tar.gz
: 02dfiqks1wcvbg9h9l16dlgidzyiz498ahl9jcpg876azgsyh676


Since guix complains about =hash=, a beginner would probably try to fill this
one, but the guix codebase actually seems to prefer the alternative: =sha256=

We end up with the following:

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:)
             (guix build-system gnu)
             (guix download))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 (source (origin (uri "https://github.com/transmission-remote-gtk/transmission-remote-gtk/archive/refs/tags/1.4.2.tar.gz")
                 (method url-fetch)
                 (sha256 (base32 "02dfiqks1wcvbg9h9l16dlgidzyiz498ahl9jcpg876azgsyh676"))))
 (build-system gnu-build-system)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))

#+end_src

When running =guix build -f package.scm=, this time we actually get past the
evaluation phase and get an error in the build phase. What an improvement!

If you read carefully the output of the builder, you will see an =aclocal:
command not found= Weren't we supposed to *explicitly* declare all dependencies?
Yes. Let me now introduce you to the =inputs= field.

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:)
             (guix build-system gnu)
             (gnu packages autotools)
             (gnu packages gettext)
             (guix download))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 (source (origin (uri "https://github.com/transmission-remote-gtk/transmission-remote-gtk/archive/refs/tags/1.4.2.tar.gz")
                 (method url-fetch)
                 (sha256 (base32 "02dfiqks1wcvbg9h9l16dlgidzyiz498ahl9jcpg876azgsyh676"))))

 (inputs
  (list
   automake
   gnu-gettext))

 (build-system gnu-build-system)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))
#+end_src

Inputs are a way to allow a package to reference other packages at compile
time. Since we know that aclocal comes with the =automake= package, let's add it
to the list of inputs.

If we retry to build the package, this time, we get an error about gettext.
Let's add it.

Note: you can look for packages by using =guix search=. the output will contain
the necessary module to include. You can query the specific variable name of the
package by using =guix edit=

For each complaint that we get, we try to add to the inputs the correct
package. At the end, we get:

#+begin_src scheme
(use-modules (guix packages)
             ((guix licenses) #:prefix license:)
             (guix build-system gnu)
             (gnu packages autotools)
             (gnu packages gettext)
             (gnu packages glib)
             (gnu packages pkg-config)
             (gnu packages gtk)
             (gnu packages curl)
             (gnu packages gnome)
             (guix download))

(package
 (name "transmission-remote-gtk")
 (version "1.4.1")
 (source (origin (uri "https://github.com/transmission-remote-gtk/transmission-remote-gtk/archive/refs/tags/1.4.2.tar.gz")
                 (method url-fetch)
                 (sha256 (base32 "02dfiqks1wcvbg9h9l16dlgidzyiz498ahl9jcpg876azgsyh676"))))

 (inputs
  (list
   automake
   gnu-gettext
   autoconf
   autoconf-archive
   appstream-glib
   libtool
   pkg-config
   gtk+
   curl
   json-glib))
 (build-system gnu-build-system)
 (synopsis "graphical frontend to the Transmission daemon")
 (description "transmission-remote-gtk is a GTK client for remote management of
the Transmission BitTorrent client, using its HTTP RPC protocol.")
 (license license:gpl2)
 (home-page "https://github.com/transmission-remote-gtk/transmission-remote-gtk"))

#+end_src

If you want to install this package, you can run =guix package -f
package.scm=. You can also put the file in a directory pointed to by
=GUIX_PACKAGE_PATH= to make it =guix search=-able.

* Home directory configuration with Guix home

Some time ago, I decided to ease the transition and the configuration of all my
software by creating a neat little =dotfiles= directory, by having it
synchronized using syncthing and by deploying these configurations with gnu
stow.

In parallel, I also maintained a small collection of scripts which I used
somewhat frequently.

I found the migration of this setup quite annoying. The part with the dotfiles
was fine, thanks to =stow=, but having crucial parts of my workflow fail
(sometimes silently) because I forgot to install ghostscript or qrencode was, to
say the least, annoying.

Until =guix home= happened.

On the surface, =guix home= looks a bit like gnu stow, but with the idea of
"services" which allow you to declaratively instruct your shell to load
zsh-autosuggestions or direnv. However, combined with g-expressions and the
power of the store, magic happens.

** reproductible and hermetic xsession script

What if you wanted to take the exact visual appearance of your window manager,
put it into a scheme file and "evaluate" it later? Read: reproducible rice.

As an experiment, I once created a custom package that, when installed into the
system profile, added an entry in =/share/xsessions/=. An entry that, when run
by the display manager, instructed it to execute a script =~/.startup=. I was
able to get from a display manager to an arbitrary script file while never
leaving Guix's tender embrace.

Of course, if the goal is to prolong this blissful moment, =~/.startup= should
be managed by guix too, right ?

In =guix home='s =home-environment=, you can add a =home-files-service-type=
which lets you declare arbitrary "file-like objects" to be added into your home
directory. Could a g-expression turned into a script be such an object? Yes it
could.

#+begin_src scheme
(home-environment
 ...
 (services
  (list
   ...
   (simple-service 'environment-loader
                   home-files-service-type
                   `(("startup"
                      (program-file "startup" startup-gexp)))))))
#+end_src

In my case, I did multiple things in this script.

#+begin_src scheme
(define startup-gexp
  #~(begin
      (system* #$nitrogen-bin "--set-auto" #wallpaper)
	  (when (zero? (primitive-fork))
	    (exit (system* #$sxhkd-bin "-c" #$sxhkd-config)))
	  (system* #$i3-bin "-c" #$i3-config)))
#+end_src

I started the keybindings daemon, I also started the window manager and set my
wallpaper. All without assuming that either sxhkd, nitrogen or i3 was installed.
I was even able to define my wallpaper as a fixed output derivation

#+begin_src scheme
(define wallpaper
  (origin
	(uri "https://www.dalipaintings.com/images/paintings/metamorphosis-of-narcissus.jpg")
	(method url-fetch)
	(sha256 (base32 "0pn6dmqzakl88f1jxz7b325d98flkjx0fl9p7w2dfkiq3wbv9sn2"))
	(file-name "metamorphosis-of-narcissus.jpg")))
#+end_src

Now, my whole setup is controlled by a single command.


** Code as data

Let's say I have a small function that I use in tandem with direnv to facilitate
the creation and the loading of anonymous guix profiles.

#+begin_src shell
function guix-load {
    anon_prof=~/.anonymous-profiles
    sorted_packages=`for i in $@;do
                         echo $i
                     done | sort | uniq`

    pkg_hash=`echo $sorted_packages | md5sum | awk '{print $1}'`

    if [ -d $anon_prof/$pkg_hash ]
    then
        true
    else
        printf "building $anon_prof/$pkg_hash...\n" > /dev/stderr
        mkdir -p $anon_prof/$pkg_hash
        guix install -p $anon_prof/$pkg_hash/profile $@
        if [ "$?" != "0" ];then
            printf "couldn't build profile\n"
            return
        fi
    fi
    
    prof=$anon_prof/$pkg_hash/profile

    printf "sourcing $prof...\n"
    GUIX_PROFILE=$prof . $prof/etc/profile
}

#+end_src


This function, when given a list of packages, will first check if a profile
containing this exact list exists (if it doesn't, create it) and loads this
profile. This is useful both as a shell command (an alternative to the slow
=guix environment --ad-hoc ...=) and inside direnv (a haskell project might
contain in its .envrc =guix-load ghc cabal-install stylish-haskell=) I can give
this file-like object to the direnv-service-type so that the service puts the
function in =~/.config/direnv/direnvrc= and in zsh-service-type so that it gets
included in zshrc.

Every time I want to modify the function, I can just modify it and run =guix
home reconfigure ~/guix/home.scm=. No need to remember to keep =guix-load.sh= in
a specific place or to synchronize the definition between two
places. Automatically copy pasting the contents of this file into other files
works well, because =guix-load= doesn't actually require any external
program. What about complex scripts ? You can do something similar, but it is
necessary to write a bit of code.

Let's say you have a script:

#+begin_src shell
#!/usr/bin/env sh
size=15
if [ -z "$1" ];then
	qrencode -s 15 -o - | feh -
else
	echo "$1" | qrencode -s 15 -o - | feh -
fi
#+end_src

You can't just drop it into your path or concatenate it with your bashrc: It
depends on external programs.

How do we solve this? I had three ideas.

1. We translate it into a g-expression

   This sucks, because command pipelines and shell scripts are a sometimes very
   appropriate for a given task. Rewriting it in scheme would be painful^(size
   script).

2. We translate the script into a =mixed-text-file= call, then wrap it in a
   =program-file=

   This also sucks, because it removes the ability to easily edit the script.

3. We wrap it with =wrap-program= (IIRC)

   Cool, because it enables you to edit the script as if it wasn't processed by
   guix at all. However it is not possible to use this method for functions that
   you want included into a startup file.

4. We expand the commands in the script into their full path.

   Similar to a .in file, this method would produce assumption-free scripts that
   you can append (monadically) to shell startup scripts.

   This is what I went with.

Unless I had written a shell script parser to know exactly which occurences of
"ps" to modify, I couldn't make this work on the original script file.

I opted for a syntax similar to .in files, this is what I came up with:

#+begin_src scheme
(define (expand-template file-like-object env)
  (with-imported-modules
   '((guix build utils))
   (let ((alist
          #~(#$@(map (lambda (pair) #~(#$(car pair) . #$(cadr pair)))
                     env))))
     (computed-file
      "expanded-file"
      #~(begin
          (use-modules (guix build utils))
          (copy-recursively #$file-like-object #$output)
          (let ((alist '#$alist))
            (with-fluid*
                %default-port-encoding "UTF-8" ;; otherwise, λ gets turned into "??"
	            (lambda () (substitute
                       #$output
                       (map
                        (lambda (pair)
                          (cons (string-append "%%" (car pair) "%%")
                                (lambda (line matches)
                                  (string-replace line
                                                  (cdr pair)
                                                  (car (vector-ref (car matches) 1))
                                                  (cdr (vector-ref (car matches) 1))))))
                        alist))))
            #$output))))))
#+end_src

This function takes a file-like object and a pseudo alist =((name package)...)
and returns the "expanded" file. This is what such a file looks like:

#+begin_src shell
function parse_git_branch() {
    branch=$(%%git%%/bin/git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [ -n "$branch" ]; then
        branch="${RED}(${GREEN}$branch${RED})${RESET} "
    else
		branch=""
    fi
    printf "%b" "$branch"
}
#+end_src

It works reasonably well.

* G-expressions

To hear it from the horse's mouth, read Ludovic Courtes' [[https://hal.inria.fr/hal-01580582/document][Code staging in GNU Guix]].


In guix, the standard way to create a derivation is to use the =derivation=
function.

#+begin_src scheme :results results
(use-modules (guix derivations)
             (guix store))

(derivation store "name-of-derivation" bash
            `("-e" "'echo salut > $out'"))
#+end_src


However, they are quite cumbersome to use. Also, blablablablabla

But we have G-expressions. Gexps are very similar to scheme's quasiquote, but
ungexp (the analog to unquote) has special behaviour with regards to file-like
object.

To create a G-expression, use the =gexp= form or it's abbreviation =#~=

#+begin_src scheme
(use-modules (guix gexp)
             (gnu packages base))

(gexp
 (begin
   (ungexp coreutils)
   salut))
#+end_src

#+RESULTS:
: #<gexp (begin #<gexp-input #<package coreutils@8.32 gnu/packages/base.scm:328 7fee02e080b0>:out> salut) 7fee01ecb240>

However, G-expressions are useful only in combination with other g-expressions
or when compiled down to a file-like object. Let's see how we can do that.

#+begin_src scheme
(use-modules (guix gexp)
             (gnu packages base))

(define exp
  (gexp
   (display "this is a test from a g-expression...\n")))


(program-file "exp" exp)
#+end_src

#+RESULTS:
: #<gexp (begin #<gexp-input "this is a test":out> salut) 7f12d1547f00>


 #+begin_src scheme
(use-modules (guix gexp)
             (gnu packages base))

(define some-list-of-packages (list coreutils coreutils))

(gexp
 (begin
   (ungexp some-list-of-packages)
   salut))
#+end_src

#+RESULTS:
: #<gexp (begin #<gexp-input (#<package coreutils@8.32 gnu/packages/base.scm:328 7f1517daf0b0> #<package coreutils@8.32 gnu/packages/base.scm:328 7f1517daf0b0>):out> salut) 7f1516ed1bd0>

* Profiles, environments and direnv

Guix's =guix shell= command makes it easy to very quickly spawn a shell in a
fresh profile with the given packages.


#+begin_src shell
guix shell guile guile-gi
#+end_src

However, for programs (or group of programs) that you use often or for setting
up environment variables for direnv, this method is not fast enough. One method
to accelerate the whole process is to bypass the evaluation of derivations
entirely for profiles that were built in the past and "cache" these profiles. A
very simple method is to keep a store of profiles which are "content-addressed"
by a hash of the packages that they contain.


#+begin_src shell
function guix-load {
    anon_prof=~/.anonymous-profiles
    sorted_packages=`for i in $@;do
                         echo $i
                     done | sort | uniq`

    pkg_hash=`echo $sorted_packages | md5sum | awk '{print $1}'`

    if [ -d $anon_prof/$pkg_hash ]
    then
        true
    else
        printf "building $anon_prof/$pkg_hash...\n" > /dev/stderr
        mkdir -p $anon_prof/$pkg_hash
        guix install -p $anon_prof/$pkg_hash/profile $@
        if [ "$?" != "0" ];then
            printf "couldn't build profile\n"
            return
        fi
    fi
    
    prof=$anon_prof/$pkg_hash/profile

    printf "sourcing $prof...\n"
    GUIX_PROFILE=$prof . $prof/etc/profile
}
#+end_src

While it is true that using =guix-load= will pollute your installation with
roots in =~/.anonymous-profiles=, it makes the "I want to run some program
without installing it" use case much more realisable.

Finally, it opens the door to another use case: loading anonymous profiles with
direnv. With this function in your direnvrc, you can simply drop something like
=guix-load texlive r graphviz ghc r-ggplot2 gnuplot aspell aspell-dict-fr= into
your =.envrc= and ensure that you will always be able to quickly (once the
initial buil is done) develop/compile/execute some project.

* Sending a patch

You just found your favorite piece of software, but it's an obsolete version
missing that cool new feature you need in your workflow. You went and =git
clone='ed the repo at [[https://git.savannah.gnu.org/git/guix.git][savannah]] and you modified the package definition. What
now? You should submit a patch, of course.

** Building Guix

Before you can test wether your modified package works, you need to build
guix. This can be done by invoking =guix shell= with guix's dependencies.

#+begin_src shell
guix shell -D guix
#+end_src

Then, you can run the bootstrap script.

#+begin_src shell
./bootstrap
#+end_src

And the configure script

#+begin_src shell
./configure --localstatedir=/var
#+end_src

Finally, you can build Guix.

#+begin_src shell
make
#+end_src

This might take a while, but after that is done, you end up with a working build
and a working =pre-inst-env= script with which you can begin to test the
package within the tree.

First, start by building your package.

#+begin_src shell
./pre-inst-env guix build tiramisu
#+end_src

When you have a working build, verify the output is working correctly, then use
the =guix lint= subcommand to verify you didn't make a silly mistake.

#+begin_src shell
./pre-inst-env guix lint tiramisu
#+end_src

After you are done, make sure you updated with your name the copyright header of
the files you modified, then make a commit.

** Committing your changes

When you write your commit message, make sure you follow GNU's [[https://www.gnu.org/prep/standards/html_node/Change-Logs.html][standard]] for
commit messages. In the case of tiramisu, that means writing something like:

#+begin_src text
gnu: tiramisu: Update to 2.0.
    
,* gnu/packages/gnome-xyz.scm (tiramisu): Update to 2.0.
#+end_src

If you are unsure about how a particular change should be expressed, simply run
=git log= and take inspiration from the other commits.

** Creating a patch file

When you have committed your changes, it is time to turn the commit into a patch
file. This can be done with the =git format-patch= command:

#+begin_src shell
git format-patch HEAD~1
#+end_src

A patch file should have appeared in the directory. Now, you can add this file
as an attachment to an email sent to [[mailto:guix-patches@gnu.org][guix-patches@gnu.org]].

* Other resources

- [[https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng][Andrew Tropin's channel]]

  He's =guix home='s author, so obviously, he knows a lot about Guix.

- [[https://guix.gnu.org/en/manual/devel/en/guix.html][The manual]]

- [[https://guix.gnu.org/en/cookbook/en/guix-cookbook.html][The cookbook]]


* Snippets

** Build a derivation from scheme
#+begin_src scheme
(use-modules (guix gexp)
             (guix derivations)
             (guix store))

(let ((s (open-connection))
      (script
       (gexp
        (begin
          (display (command-line)) (newline)))))
  (let ((d (run-with-store s (gexp->script "some-script" script))))
    (build-derivations s (list d))
    (derivation-output-path (assoc-ref (derivation-outputs d) "out"))))
#+end_src

#+RESULTS:
: /gnu/store/xd3lz6mivk9z0i1qajgb8iz9b796sb32-some-script
