:PROPERTIES:
:ID:       a8bc74ff-eca5-4848-8ce9-f1c56170d4d4
:CREATED:  2024-06-27T16:30:54
:END:
#+title: Reduction rules all the way down

#+LATEX_HEADER: \usepackage{ebproof}
#+LANGUAGE: english
#+PROPERTY: header-args:latex :exports results

If like me, you are interested in programming language theory, you have probably
encountered the following notation and were at first confused by it:

#+begin_src latex :file assets/sequent.svg
\begin{prooftree}
\hypo{\Gamma \vdash a : A}
\hypo{\Gamma \vdash b : B}
\infer2[\times-intro]{\Gamma \vdash \langle a, b \rangle : A \times B}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/sequent.svg]]

This notation was invented to have a meta language to talk about new formal
systems. Here we defined the \( \times \)-intro rule which you can read like this:
"if \( \Gamma \vdash a : A \) and \( \Gamma \vdash b : B \), then we can deduct that \( \Gamma
\vdash \langle a,b \rangle : A \times B \)". For now, it is not sufficient to understand what
those sentences actually mean, just that those are sentences in our object
formal system. When proving something in our new formal system, it is then
sufficient to chain together the correct deduction rules.

Note that in a deduction rule, some symbols (like \( \Gamma, a, A, b, B \)) are
metavariables. You can use the rule for any value of \( \Gamma, a, A, b, B \). Other
symbol have concrete meaning (like \( \vdash, \langle,\rangle, :, \times \)). Usually, which are
which will be inferable for context.



#+begin_src latex :file assets/many-sequent.svg
\begin{prooftree}
\hypo{\Gamma \vdash x : X}
\hypo{\Gamma \vdash y : Y}
\infer2[\times-intro]{\Gamma \vdash \langle x, y \rangle : X \times Y}
\hypo{\Gamma \vdash z : Z}
\infer2[\times-intro]{\Gamma \vdash \langle \langle x, y \rangle, z \rangle : (X \times Y) \times Z}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/many-sequent.svg]]

As an exercice, let's formalize propositional logic.

* Propositional logic

We know that the language of propositional logic is made out of:

1. Primitive propositions denoted with their name
2. Composite propositions denoted with \( \cdot \wedge \cdot \) and \( \cdot \vee \cdot \).

We know that in classical propositional logic, \( A \wedge B \) when we know that \(
A \) and we know that \( B \).

#+begin_src latex :file assets/wedge-intro.svg
\begin{prooftree}
\hypo{A}
\hypo{B}
\infer2[\wedge-intro]{A \wedge B}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/wedge-intro.svg]]

We also know that \( A \vee B \) when \( A \) and also that \( A \vee B \) when \( B
\).

#+begin_src latex :file assets/vee-intro.svg
\begin{prooftree}
\hypo{A}
\infer1[\vee-intro-left]{A \vee B}
\end{prooftree},\quad
\begin{prooftree}
\hypo{B}
\infer1[\vee-intro-right]{A \vee B}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/vee-intro.svg]]

#+begin_src latex :file assets/wedge-elim.svg
\begin{prooftree}
\hypo{}
\end{prooftree}
#+end_src

Let's write down the deduction rules of classical propositional logic.

#+begin_src latex :file assets/many-sequent.svg
\begin{prooftree}
\hypo{\Gamma \vdash a : A}
\hypo{\Gamma \vdash b : B}
\hypo{\Gamma \vdash c : C}
\infer2[\times-intro]{\Gamma \vdash (a, b) : A \times B}
\infer2[\times-intro]{\Gamma \vdash ((a, b), c) : (A \times B) \times C}
\end{prooftree}
#+end_src

#+RESULTS:
[[file:assets/many-sequent.svg]]
