:PROPERTIES:
:ID:       db5e5ed5-987b-428a-a402-c267c09cf0c4
:CREATED:  2024-05-26T22:57:08
:END:
#+title: Implementing algebraic effects through typeclass prolog
#+LANGUAGE: english
#+PROPERTY: header-args :exports code
#+date: <2024-05-29 Wed>

Monads are a popular way to model effects in purely functional programming
languages, but they come with problems. For instance, to compose them(and
compose their effects), we have to use [[https://en.wikipedia.org/wiki/Monad_transformer][Monad transformers]]. An alternative that
has started to emerge is algebraic effects. Algebraic effects are composable and
one could see them as a type safe incarnation of delimited continuations. We
used delimited continuations to implement ~async~ and ~await~ syntax in [[id:bc6ba032-8b50-4403-95db-abb7da96ae83][the last
post]]. Here, however, we will try to derive a useful usage for algebraic
effects pattern through the use of typeclass metaprogramming and lots of haskell
extensions.

* COMMENT To play with the code, tangle this org document

If you use emacs, you can tangle the whole org document, open the haskell file
and type =C-c C-l=: everything typechecks!

#+begin_src emacs-lisp
(org-babel-tangle-file (buffer-file-name)
                       "typeclass-prolog-for-algebraic-effects.hs"
                       "haskell")
#+end_src

#+RESULTS:
| /home/terramorpha/org-roam/blog/typeclass-prolog-for-algebraic-effects.hs |

* Obligatory pragmas

We will be writing a lot of type level code and consequently, we will need to
give the compiler a a lot of src_haskell{LANGUAGE} pragmas.

To be able to construct a src_haskell{[* -> *]}:
#+begin_src haskell
{-# LANGUAGE DataKinds #-}
#+end_src

To be able to express that every element of a src_haskell{[* -> *]} is a
functor:
#+begin_src haskell
{-# LANGUAGE TypeFamilies #-}
#+end_src

For more complex instance declarations:
#+begin_src haskell
{-# LANGUAGE UndecidableInstances #-}
#+end_src

To be able to express src_haskell{PreservesShow}:
#+begin_src haskell
{-# LANGUAGE QuantifiedConstraints #-}
#+end_src

To disambiguate some types:
#+begin_src haskell
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE ScopedTypeVariables #-}
#+end_src

* Imports

Some of the type families we are going to define are actually constraints.

#+begin_src haskell
import GHC.Exts (Constraint)
#+end_src


# Alternative: on explique que les datatypes peuvent être compris comme le point
# fixe de foncteurs.

* Syntax tree as fixpoint of sum of functors

One of the ideas explained in the paper [cite:@swierstra2008] is that we can
create an extensible syntax tree by representing each constructor with a
functor, by combining constructors with sums of functors and by making this type
recusive through the fixpoint operator for functors.

#+caption: The fixpoint operator and an example of a constructor we might want to add to a syntax tree. 
#+begin_src haskell
data Fix f = In (f (Fix f))

data Plus s = -- s for self. This is the point of recursion
  Plus s s
  deriving (Functor, Show)
#+end_src

We will reuse the idea of sums of functors to represent different effects (each
functor is responsible for an effect), but instead of making the tree recursive
through the fixpoint operator, we will take the free monad from the sum of
functors.

#+caption: The free monad src_haskell{Free f} makes src_haskell{f} into a monad,
#+caption: because a term of type src_haskell{Free f x} is inhabited by terms of
#+caption: shape \( f^n(x) \) for some \( n \in \mathbb{N} \). \( f^0(x) = x \) is src_haskell{Return}
#+caption: and the src_haskell{Join} operation works becaus \( f^n(f^m(x)) = f^{n+m}(x) \).
#+begin_src haskell
data Free f x = Return x | Join (f (Free f x))
  deriving Functor
#+end_src

* The src_haskell{Sum} constructor

If we have a list of effects src_haskell{fs :: [* -> *]}, we would like to have
a way to combine these into a new functor src_haskell{* -> *}. This is what this type
does.

#+begin_src haskell
data Sum (fs :: [* -> *]) (x :: *) where
  Head :: f x -> Sum (f ': fs) x
  Tail :: Sum fs x -> Sum  (f ': fs) x
#+end_src

A term of type src_haskell{Sum '[A, B, C] x} is either a term of type
src_haskell{A x}, src_haskell{B x} or src_haskell{C x}.

* Inclusion of functors

For type inference to work well for us, we want our "effect sets" relations to
be computed by Haskell's instance resolution system. We will define a typeclass
for every relation we wish to have on effect sets. We will then define instances
(derivation rules) through with the Haskell compiler will generate code for us.


We first need an "is-element" relation(it is very similar to the \( \prec \)
typeclass they use in [cite:@swierstra2008]) which will be witnessed by a way to
turn an src_haskell{f x} into a src_haskell{Sum fs x} whenever src_haskell{f :∈:
fs}.

#+begin_src haskell
class (e :: * -> *) :∈: (es :: [* -> *]) where
  inject :: e x -> Sum es x
#+end_src

To make the compiler automatically verify this relation, we will give it
derivation rules:

An effect is an element of an effect set if it is the first element of the set.

#+begin_src haskell
instance {-# OVERLAPPING #-} f :∈: (f ': fs) where
  inject = Head
#+end_src

An effect is also an element of an effect set if it is an element of the tail of
the set.

#+begin_src haskell
instance f :∈: fs => f :∈: (g':fs) where
  inject = Tail . inject
#+end_src

Here is an example of this typeclass in action. We use it to automatically
"cast" a term to a "bigger" type.

#+begin_src haskell
data A s = A s
data B s = B s

test1 :: Sum '[A, B] Int
test1 = inject $ B 12
#+end_src

* Subset relation

With the help of our membership relation, we can define a new relation which
will let us express the fact an effect *set* is smaller than an other effect set.
This relation will be witnessed by a function very similar to
src_haskell{inject}, apart for the fact it converts from a src_haskell{Sum}.

#+begin_src haskell
class (l :: [* -> *]) :⊆: (r :: [* -> *]) where
  permute :: Sum l x -> Sum r x
#+end_src

The empty set is a subset of everything (this is the base case of our typeclass
recursion).

#+begin_src haskell
instance '[] :⊆: fs where
  -- no constructors for Sum '[] x
  permute _ = error "impossible"
#+end_src

If the first element of the LHS set is a member of the RHS set and the last
elements of the LHS set are a subset of the RHS, then the LHS is a subset of the
RHS. (this is the induction case of our typeclass recursion)

#+begin_src haskell
instance (f :∈: gs, fs :⊆: gs) => (f ': fs) :⊆: gs where
  permute (Head h) = inject h
  permute (Tail t) = permute t
#+end_src

Here is an example of ho we might use this relation:

#+begin_src haskell
data C s = C s

test2 :: Sum '[B, C, A] Int
test2 = permute test1
#+end_src

Because of the way we set up our derivation rules, whenever all the functors in
a set are known, the instance search algorithm will automatically generate the
necessary code to rearange the order of a functor sum.

* Effect type constructor

Now we ave a way to represent effects (as sum of functors), let's tie them in a
circle using the free monad. The following construction is equivalent to the
free monad on the sum of the effects.

#+begin_src haskell
data Eff (fs :: [* -> *]) (x :: *) where
  Pure :: x -> Eff fs x
  Impure :: Sum fs (Eff fs x) -> Eff fs x

-- To unwrapp empty effects into pure values
unwrapEff :: Eff '[] x -> x
unwrapEff (Impure _) = error "impossible"
unwrapEff (Pure x) = x
#+end_src

This construction will let us sequence many effects together. Another thing to
notice is that

* Free monoids, free monads, src_haskell{[x]} and src_haskell{Eff fs}

We all know the meme phrase "a monad is just a monoid in the category of
endofunctors", but what does it tell us about the free monad? It is just the
free monoid in the category of endofunctors. 

** What even is a free monoid?

A monoid is an object with an associative operation \( * \) and a neutral
element \( 1 \). This means that for every \( a, b, c \):

\[ a * (b * c) = (a * b) * c \]

\[ 1 * a = a = a * 1 \]

The free monoid on an alphabet is the smallest monoid made from this alphabet.
It is the smalles in the sense that it has no more equalities than absolutely
necessary to make it a monoid.

The free monoid on an alphabet set is the list containing elements of this set.
The neutral element \( 1 \) is the empty list and \( * \) is ~append~.

As it turns out, we can concisely express the type of lists of \( x \) with this
equation:

\[ L(x) = 1 + x \times L(x) \]

Here, \( 1 \) is the singleton set (a set with one element) which acts as the
neutral element for the cartesian product \( \times \) on sets and \( + \) is the
disjoint union of sets. If we expand this recursive definition, we will see
that:

\[ L(x) = \sum_{n=0}^{\infty} x^n \]

where \( x^0 \) is the singleton set and \( x^n \) is the \( n \)-tuple of \( x
\)s.

** Free monad

If we translate all of our operations from the set world to the endofunctor
world, this is what happens:

1. \( + \) which is the set disjoint union becomes the functor disjoint union
   where \( (f + g)(x) = f(x) + g(x) \).
2. \( \times \) which was the cartesian product becomes \( \circ \) the functor
   composition.
3. \( 1 \) which was the singleton set (neutral element of \( \times \)) becomes \(
   \text{id} \) (neutral element of \( \circ \)).

Finally, when translating the recursive equation for the list, we get:

\[ L(f) = \text{id} + f \circ L(f) \]

This object -- the free monoid on an alphabet of endofunctors -- is exactly
src_haskell{Eff fs}.

* Show for src_haskell{Eff fs x}

When working with effectful values, it will be useful to have src_haskell{Show
(Eff fs x)} when possible. To achieve this, we will need to define new
typeclasses and some instances.


We say that a src_haskell{* -> *} "preserves show" when src_haskell{Show (f x)}
whenever src_haskell{Show x}.

#+begin_src haskell
class (forall x. Show x => Show (f x)) => PreservesShow f
#+end_src

We know that src_haskell{Sum fs} preserves show if and only if al of the
elements of src_haskell{fs} preserve it too.

#+begin_src haskell
type family AllPreserveShow (fs :: [* -> *]) :: Constraint where
  AllPreserveShow (f ': fs) = (PreservesShow f, AllPreserveShow fs)
  AllPreserveShow '[] = ()

instance (AllPreserveShow fs, Show x) => Show (Sum fs x) where
  show (Head h) = show h
  show (Tail t) = show t
#+end_src

Finally, because src_haskell{Eff fs x} uses src_haskell{Sum fs}, it also
preserves show whenever src_haskell{Sum fs} preserves show.

#+begin_src haskell
instance (AllPreserveShow fs, Show x) => Show (Eff fs x) where
  show (Pure x) = show x
  show (Impure t) = show t
#+end_src

* When the effects src_haskell{fs} are functors, src_haskell{Eff fs} is a functor

Further down, having src_haskell{Functor} instances for everything will be very
useful. This is why it is important automatically derive src_haskell{Functor}
instances whenever possible.

#+begin_src haskell
type family AllFunctors (fs :: [* -> *]) :: Constraint where
  AllFunctors (f ': fs) = (Functor f, AllFunctors fs)
  AllFunctors '[] = ()
#+end_src

Again, a sum of src_haskell{* -> *}s is a functor if and only if they all are.

#+begin_src haskell
instance AllFunctors fs => Functor (Sum fs) where
  fmap f (Head h) = Head $ fmap f h
  fmap f (Tail t) = Tail $ fmap f t
#+end_src

By the same reasoning as with src_haskell{Show}, src_haskell{Eff fs} is a
functor whenever src_haskell{fs} are.

#+begin_src haskell
instance AllFunctors fs => Functor (Eff fs) where
  fmap f (Pure x) = Pure $ f x
  fmap f (Impure fx) = Impure $ (fmap . fmap) f fx
#+end_src

* src_haskell{Eff fs} is also a monad

The categorical presentation of a monad uses a src_haskell{join} operator
instead of src_haskell{>>=}. Here, we will first implement src_haskell{effJoin}
(it simply removes a src_haskell{Pure} between the two layers of src_haskell{Eff
fs}) and derive src_haskell{effBind} with it.

#+begin_src haskell
effJoin :: AllFunctors fs => Eff fs (Eff fs x) -> Eff fs x
effJoin (Pure x) = x
effJoin (Impure fx) = Impure $ (fmap effJoin) fx

effBind :: AllFunctors fs => Eff fs x -> (x -> Eff fs y) -> Eff fs y
effBind fx f = effJoin $ fmap f fx
#+end_src

The two instances we need to have src_haskell{Monad (Eff fs)} then flow
naturally.

#+begin_src haskell
instance (AllFunctors fs) => Applicative (Eff fs) where
  pure = Pure
  ff <*> fx = effBind ff (\f -> fmap f fx)

instance (AllFunctors fs) => Monad (Eff fs) where
  (>>=) = effBind
#+end_src

* Why do we need src_haskell{Monad (Eff fs)}?

I hear you ask: "At the beginning, you presented algebraic effects as an
alternative to monads, so why are you making src_haskell{Eff fs} a monad?"

The reason algebraic effects are interesting is because they compose very well.
Monads, in their normal form, don't. What we do here is compose the effects
*before* turning them into a monad. This way, we only have to think about a single
"monad constructor": src_haskell{Eff}.

* Lift a term into an effect

Now that we have built ourselves an ontology of typeclasses, functors and
monads, we need utilities to actually use the algebraic effects. The first one
of them will be this simple src_haskell{effInj} function which will let us turn
a naked effect into a fully-clothed effectful value.

#+begin_src haskell
effInj :: (Functor f, f :∈: fs) => f x -> Eff fs x
effInj e = Impure $ inject $ fmap Pure e
#+end_src

* Example

Here is how to use it. Let's say we defined two effects for asking for a string
and asking for an integer. The function that will find itself inside the
src_haskell{GetInt} or the src_haskell{GetString} will be the continuation (you
can read more about continuations in [[id:bc6ba032-8b50-4403-95db-abb7da96ae83][My last post]]) to which will be passed the
src_haskell{String} or src_haskell{Int}. Here, we use src_haskell{id}, because
the continuation of our block will automatically be add through the monadic
operations.

#+begin_src haskell
data GetString a = GetString (String -> a)
  deriving Functor

data GetInt a = GetInt (Int -> a)
  deriving Functor

type MyEff = [GetString, GetInt]

comp :: Eff MyEff String
comp = do
  int <- effInj $ GetInt id
  str <- effInj $ GetString id
  return $ str ++ show int
#+end_src

* Permuting effects

Here is an utility function to embed an effectful value into a bigger effect
space.

#+begin_src haskell
effPerm :: forall fs gs x. (AllFunctors fs, fs :⊆: gs) => Eff fs x -> Eff gs x
effPerm (Pure x) = Pure x
effPerm (Impure sx) = Impure $ permute @fs @gs $ fmap (effPerm @fs @gs) sx
#+end_src

* Handlers

The idea of a handler is what makes algebraic effects ergonomic. It lets us
easily handle one of the effects using the other effects in the set.

#+begin_src haskell
handle :: forall fs g gs x. (Functor g, AllFunctors gs, AllFunctors fs,fs :⊆: (g ': gs))
  => (forall x. g x -> Eff gs x) -> Eff fs x -> Eff gs x
handle trans (Pure x) = (Pure x)
handle trans (Impure x) = case permute @fs @(g ': gs) x of
  Head h -> let val = fmap (handle trans) h
                val' = trans val
            in effJoin val'
  Tail t -> let val = fmap (handle @fs @g @gs trans) t
            in Impure val
#+end_src

You use src_haskell{handle} a bit like you use ~try~ / ~catch~ blocks in other
programming languages. Whenever the effect you want to eliminate is used, you
must do so using one of the remaining effects in the set.

#+begin_src haskell
comp' :: Eff '[GetString] String
comp' = handle func comp
  where func :: GetInt x -> Eff '[GetString] x
        func (GetInt f) = return $ f 0
#+end_src

* More advanced handler

Let's say you want an effect src_haskell{GenSym :: (Int -> x) -> GenSym x} that
generates unique integers. We need some kind of way to remember the last number
we gave out. A src_haskell{Handler f fs} lets us handle a src_haskell{f} effect
using src_haskell{fs} and also, at the same time, give the next
src_haskell{Handler f fs} to use.

#+begin_src haskell
data Handler (f :: * -> *) (fs :: [* -> *]) where
  Handler :: (forall x. f x -> Eff fs (x, Handler f fs)) -> Handler f fs
#+end_src

Now we need a src_haskell{handleFold} function.

#+begin_src haskell
handleFold :: forall fs g gs x. (Functor g, AllFunctors gs, AllFunctors fs,fs :⊆: (g ': gs))
  => Handler g gs -> Eff fs x -> Eff gs x
handleFold _ (Pure x) = Pure x
handleFold (Handler fold) (Impure x) = case permute @fs @(g ': gs) x of
  Tail t -> Impure $ fmap (handleFold (Handler fold)) t
  Head h -> do
    (val, fold') <- fold h
    handleFold fold' val
#+end_src

Example:

#+begin_src haskell
data GenSym x = GenSym (Int -> x)
  deriving Functor

syms :: Eff '[GenSym] [Int]
syms = do
  x <- effInj $ GenSym id
  y <- effInj $ GenSym id
  z <- effInj $ GenSym id
  return [x, y, z+1]

symsEvaled :: Eff '[] [Int]
symsEvaled = handleFold (fh 0) syms
  where fh :: Int -> Handler GenSym '[]
        fh k = Handler $ \(GenSym cont) -> return $ (cont k, fh (k+1))
#+end_src

* References

#+print_bibliography: 
