# -*- ispell-dictionary: "english" -*-
:PROPERTIES:
:ID:       d652fd73-f650-4db8-b2b0-9d94ffe7058b
:CREATED:  2024-07-21T12:33:38
:END:
#+title: Guile scheme's syntax parameters
#+LANGUAGE: english
#+PROPERTY: header-args :exports code
#+date: <2024-07-21 Sun>

One of the distinguishing features of the scheme programming language, when it
was created in 1975, was its use of lexical scoping, which departed from the
tradition of dynamic scoping of other lisps at the time.

* Dynamic vs lexical scope

Since the release of scheme 50 years ago, lexical scoping has become the way (as
far as I can tell) every language does things. For this reaseon, most reader
will not know what either of these scoping rules mean and will see lexical scope
as the obvious "correct" behaviour.

Dynamic and lexical scoping differ in how they treat free variables of lambdas.
In the following code, the variabel src_emacs-lisp{c} is free in the lambda as
it is not bound in the parameter list.

#+begin_src emacs-lisp
(setq c "something")
(setq func (lambda (a b) c))
#+end_src

In dynamic binding, when the lambda is executed, the value of src_emacs-lisp{c}
will be retrieved from the binding closest to the call site. In lexical scoping,
the value will be retrieved from the binding closest to the place where the
lambda was created.

For instance, if the following code is executed in dynamic binding:

#+name: elisp-dynamic-scope
#+begin_src emacs-lisp :lexical nil :exports both
(setq x "initial-value")

(let ((some-function
       (let ((x "modified-value"))
         (lambda () x))))
  (message "the value is %s" (funcall some-function)))
#+end_src

We get

#+RESULTS: elisp-dynamic-scope
: the value is initial-value

But if it is executed in lexical binding, we get

#+begin_src emacs-lisp :lexical yes :exports results
(setq x "initial-value")

(let ((some-function
       (let ((x "modified-value"))
         (lambda () x))))
  (message "the value is %s" (funcall some-function)))
#+end_src

#+RESULTS:
: the value is modified-value

* Scheme dynamic parameters

Even if history has decided lexical scope is a generally better paradigm, there
are still cases where we would like to have something like special variables
that are dynamically bound. For instance, we might want to temporarily set a
global variable of a program to some value so that the "verbose" mode is
activated for some specific part of the program.

#+begin_src python
old_verbose = VERBOSE
VERBOSE = True
do_something()
VERBOSE = old_verbose
#+end_src

This code, however is incorrect because if src_python{do_something} throws an
exception, the global variable is left with the "temporary" value. What you
would want is actually:

#+begin_src python
old_verbose = VERBOSE
VERBOSE = True
try:
    do_something()
finally:
    VERBOSE = old_verbose
#+end_src

Scheme's parameters (constructed with src_scheme{make-parameter}) work just like this.

#+begin_src scheme :results output :exports both
(define verbose (make-parameter #f))

(define (do-something)
  (when (verbose)
    (format #t "verbose mode on\n")))


(format #t "a:\n")
(parameterize ((verbose 1))
  (do-something))

(format #t "b:\n")
(do-something)
#+end_src

#+RESULTS:
: a:
: verbose mode on
: b:

Parameters let us control explicitly where we want dynamic scope. They use
special low level runtime facilities so that they interact well with re-entrant
continuations, exceptions and all kinds of dynamic behaviour. They are used for
things such as the default text encoding or the default output port.

* lexical scope as hygiene

One way to conceptualise lexical scope is to think of it as hygiene for
variables. Lexical scope acts as a form of access control. The free variables of
a closure are inaccessible by the caller of the closure. This lets us build an
object system using only these closures:

#+caption: When implementing an object system using closures, the object is its own method dispatch and its state is its closure
#+name: scheme-object
#+begin_src scheme :results output :exports both
(use-modules (ice-9 match))

(define (make-person name age)
  (lambda msg
    (match msg
      (('get-name) name)
      (('get-age) age)
      (('set-name new-name)
       (set! name new-name))
      (('set-age new-age)
       (set! age new-age))
      (('say-hello)
       (format #t "my name is ~a and I am ~a years old\n"
               name age)))))


(define me (make-person "Sam" 12))

(me 'say-hello)
(me 'set-name "John")
(me 'say-hello)
#+end_src

Output: 

#+RESULTS: scheme-object
: my name is Sam and I am 12 years old
: my name is John and I am 12 years old

* Scheme hygienic macros

Another thing scheme pioneered was the use of hygienic macros for
metaprogramming. Hygienic macros prevent variable references from being shadowed
by binding created during macro expansion.

#+begin_src scheme :exports both

(define-syntax-rule (bind-x body)
  (let ((x 42))
    body))

(define x 0)

(bind-x (+ x 1))
#+end_src

#+RESULTS:
: 1

Here, if there were no hygiene, this is what the last part would expand to:

#+begin_src scheme
(define x 0)

(bind-x (+ x 1))
#+end_src

#+begin_src scheme
(define x 0)

(let ((x 42))
  (+ x 1))
#+end_src

* Syntax parameters

Syntactic parameters act a bit like normal parameters, but exist during macro
expansion. Whereas src_scheme{parameterize} changes the value of a pre-existing
parameter for a limited time, src_scheme{syntax-parameterize} changes the
definition of a pre-existing macro for a limited time.


#+begin_src scheme :results output :exports both
(define-syntax-parameter return
  (lambda (s)
    (syntax-violation 'return "return used outside `with-return`" s)))

(return 123)
#+end_src

#+RESULTS:
: ice-9/boot-9.scm:1685:16: In procedure raise-exception:
: Syntax error:
: unknown file:13:0: return: return used outside `with-return` in form (return 123)
: 
: Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.

#+begin_src scheme :results output :exports both
(define-syntax-parameter return
  (lambda (s)
    (syntax-violation 'return "return used outside `with-return`" s)))

(define-syntax-rule (with-return body body* ...)
  (call/cc (lambda (retfunc)
             (syntax-parameterize
                 ((return
                   (lambda (s) (syntax-case s () ((_ x) #'(retfunc x))))))
               body
               body* ...))))

(define val
  (with-return
   123
   (return 456)
   789))

(format #t "val: ~a\n" val)
#+end_src

#+RESULTS:
: val: 456

Guile scheme's syntax parameters let you create macros that modify the behaviour
of other macros at expansion time and it turns out that you can actually use
this same concept to have the macro expansion check the ~await~ keyword I defined
in [[id:bc6ba032-8b50-4403-95db-abb7da96ae83][an old post]] lives within an ~async~ block instead of throwing an error at
runtime.
